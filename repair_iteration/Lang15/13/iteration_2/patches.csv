bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
2	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
4	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
5	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true	  	non-compiled	[CE]  ';'  expected	75	None	add
6	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
7	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
8	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isEmpty())  {	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
9	[BUG]  [BUGGY]  ||  typeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  typeVarAssigns.isEmpty())  {	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
10	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	62	None	replace
11	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  getTypeArguments(type,  toClass);	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  incompatible  types	81	None	replace
12	[BUG]  [BUGGY]  Class  <?>  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toTypeVarAssigns  =  getTypeArguments(type,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toTypeVarAssigns  =  getTypeArguments(type,  toClass);	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  incompatible  types	81	None	replace
13	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(toClass,  type);  [CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(toClass,  type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  getTypeArguments(toClass,  type);	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Class<CAP#1>,Type)	81	None	replace
14	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(0);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(0);	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	83	None	replace
15	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(1);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(1);	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	83	None	replace
16	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    fromTypeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	40	None	replace
17	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    fromTypeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	40	None	replace
18	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	100	None	replace
19	[BUG]  [BUGGY]  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	100	None	replace
20	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
21	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
22	[BUG]  [BUGGY]  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
23	[BUG]  [BUGGY]  parent  ==  null  &&!parent.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  &&!parent.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&!parent.isEmpty())  {  return  false;  }	  parent    ==    null    &&!typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
24	[BUG]  [BUGGY]  ||  typeVarAssigns.isEmpty())  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  typeVarAssigns.isEmpty())  {  return  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  typeVarAssigns.isEmpty())  {  return  false;	  ||    toTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
25	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  true;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  true;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isEmpty())  {  return  true;	  ||    toTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
26	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns))  {  return  false;  }	  parent    ==    null    ||    parent.isAssignableFrom(parent))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
27	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns))  {  return  false;  }	  parent    ==    null    ||    parent.isAssignableFrom(parent))    {    return    false;    }    	non-compiled	[CE]  not  a  statement	144	None	replace
28	[BUG]  [BUGGY]  parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    null    ||    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	128	None	replace
29	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  toTypeVarAssigns.get(0);	  Type    toTypeVarAssigns    =    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  typeVarAssigns.put(type,  fromTypeArg);  [CE]  cannot  find  symbol  fromTypeArg  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(type,  fromTypeArg);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  fromTypeArg);	  typeVarAssigns.put(type,    toTypeArg);    	non-compiled	[CE]  cannot  find  symbol  fromTypeArg	103	None	replace
31	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);	  return(fromTypeVarAssigns!=    null)?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	133	None	replace
32	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);	  return(fromTypeVarAssigns!=    null)?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	133	None	replace
33	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
34	[BUG]  [BUGGY]  ||!toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||!toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!toTypeVarAssigns.isEmpty())  {  return  false;  }	  ||!typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
35	[BUG]  [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  toTypeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  toTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  toTypeVarAssigns);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
36	[BUG]  [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
37	[BUG]  [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  getTypeArguments(type,  toClass);	  return    false;    Type    toParameterizedType    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	82	None	replace
38	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  else  {  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  }  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  else  {  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  else  {  Type  toParameterizedType  =  getTypeArguments(type,  toClass);  }	  return    false;    Type    toParameterizedType    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	82	None	replace
39	[BUG]  [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  fromTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  getTypeArguments(type,  fromTypeVarAssigns);	  return    false;    Type    toParameterizedType    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	82	None	replace
40	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	65	None	replace
41	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	65	None	replace
42	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  toTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  toTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(toClass,  toTypeVarAssigns);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	65	None	replace
43	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  toParameterizedType);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  toParameterizedType);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(toClass,  toParameterizedType);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	65	None	replace
44	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
45	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
46	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	30	None	replace
47	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	24	None	replace
48	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toClass);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	24	None	replace
49	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toTypeVarAssigns.getValue());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toTypeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toTypeVarAssigns.getValue());	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	24	None	replace
50	[BUG]  [BUGGY]  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns  =  fromTypeVarAssigns.get(0);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    	non-compiled	[CE]  incompatible  types	27	None	replace
51	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	19	None	replace
52	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toClass.get(type,  fromTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toClass.get(type,  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toClass.get(type,  fromTypeVarAssigns);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	19	None	replace
53	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type,  fromTypeVarAssigns);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	19	None	replace
54	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    fromTypeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	28	None	replace
55	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  typeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
56	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  typesVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  typesVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  typesVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
57	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
58	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  getTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
59	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeArguments(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  getTypeArguments(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  getTypeArguments(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
60	[BUG]  [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	                Type        toTypeVarAssigns        =        fromTypeVarAssigns.get(type);        Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	87	None	add
61	[BUG]  [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	                Type        toTypeVarAssigns        =        fromTypeVarAssigns.get(type);        Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	87	None	add
62	[BUG]  [BUGGY]  typeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
63	[BUG]  [BUGGY]  Type  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  ';'  expected	126	None	replace
64	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	126	None	replace
65	[BUG]  [BUGGY]  owner.handleMissingClass(fromTypeVarAssigns);  [CE]  cannot  find  symbol  owner  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  owner.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	owner.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  owner	126	None	replace
66	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  typeVarAssigns.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  typeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  typeVarAssigns.getValue());	  Type    toParameterizedType    =    fromTypeVarAssigns.get(typeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	106	None	replace
67	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(typeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	106	None	replace
68	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	96	None	add
69	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	96	None	add
70	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1));  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1));	  	non-compiled	[CE]  ';'  expected	96	None	add
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	compilable	  [FE]  AssertionError  	96	2	add
72	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	compilable	  [FE]  AssertionError  	96	2	add
73	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
74	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0),  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0),  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0),  toClass);	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
75	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(0));	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
76	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
77	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toClass.getKey());	  Type    type    =    toTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	42	None	replace
78	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	57	None	replace
79	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(typeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
80	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	57	None	replace
81	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toParameterizedType.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toParameterizedType.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  toParameterizedType.contains(typeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
82	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }	  return    false;    if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(type))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	143	None	replace
83	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }	  return    false;    if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(type))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
84	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }	  return    false;    if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(type))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	143	None	replace
85	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(type))  {  return  false;  }	  return    false;    if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(type))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
86	[BUG]  [BUGGY]  parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    null    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	124	None	replace
87	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);	  Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    	non-compiled	[CE]  incompatible  types	111	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	58	2	add
89	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	58	2	add
90	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  If(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  If(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    If(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	58	None	add
91	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigneds.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	58	None	add
92	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typesVarAssigns.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typesVarAssigns  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typesVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty()  ||  typesVarAssigns.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	58	None	add
93	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toParameterizedType.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty()  ||  toParameterizedType.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty()  ||  toParameterizedType.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(toParameterizedType.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
94	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(toParameterizedType.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
95	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(toParameterizedType.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
96	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
97	[BUG]  [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  true;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  true;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!typeVarAssigns.isEmpty())  {  return  true;	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
98	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type,  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	44	None	replace
99	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  type);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	44	None	replace
100	[BUG]  [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Constructor  <?>  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
101	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.get(0))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.get(0))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.get(0))  {  return  false;  }	  parent    ==    fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	93	None	replace
102	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toClass);	  Type    type    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	25	None	replace
103	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toTypeVarAssigns.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toTypeVarAssigns.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toTypeVarAssigns.getKey());	  Type    type    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	25	None	replace
104	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns);  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(fromTypeVarAssigns);	  parent    ==    null    ||    parent.isAssignableFrom(parent);    	non-compiled	[CE]  not  a  statement	145	None	replace
105	[BUG]  [BUGGY]  parent  ==  null  &&  parent.isAssignableFrom(parent);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  &&  parent.isAssignableFrom(parent);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&  parent.isAssignableFrom(parent);	  parent    ==    null    ||    parent.isAssignableFrom(parent);    	non-compiled	[CE]  not  a  statement	145	None	replace
106	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(typeVarAssigns);	  parent    ==    null    ||    parent.isAssignableFrom(parent);    	non-compiled	[CE]  not  a  statement	145	None	replace
107	[BUG]  [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(toParameterizedType);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  parent.isAssignableFrom(toParameterizedType);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  parent.isAssignableFrom(toParameterizedType);	  parent    ==    null    ||    parent.isAssignableFrom(parent);    	non-compiled	[CE]  not  a  statement	145	None	replace
108	[BUG]  [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toClass.get(fromTypeVarAssigns);	  Type    type    =    fromTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	47	None	replace
109	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey(),  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	46	None	replace
110	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getValue());	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	46	None	replace
111	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  -  1);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  -  1);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	46	None	replace
112	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  +  1);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type.getKey()  +  1);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	46	None	replace
113	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
114	[BUG]  [BUGGY]  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
115	[BUG]  [BUGGY]  ||  toParameterizedType.isEmpty())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toParameterizedType.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toParameterizedType.isEmpty())  {  return  false;  }	  ||    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
116	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toClass);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toClass);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  typeVarAssigns.get(toClass);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    	compilable	  [FE]  AssertionError  	6	2	replace
118	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toClass);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(toClass);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    	compilable	  [FE]  AssertionError  	6	2	replace
119	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);	  return(typeVarAssigns    ==    null    ||    toTypeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	39	None	replace
120	[BUG]  [BUGGY]  return(toTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(toTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(toTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  toTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    toTypeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	39	None	replace
121	[BUG]  [BUGGY]  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	85	None	replace
122	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	85	2	replace
123	[BUG]  [BUGGY]  if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	85	2	replace
124	[BUG]  [BUGGY]  if(!toParameterizedType.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!toParameterizedType.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!toParameterizedType.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
125	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    fromTypeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	37	None	replace
126	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    fromTypeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	37	None	replace
127	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    fromTypeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	37	None	replace
128	[BUG]  [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(type);	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	80	None	replace
129	[BUG]  [BUGGY]  Class  <?>  toParameterizedType  =  typeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toParameterizedType  =  typeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toParameterizedType  =  typeVarAssigns.get(type);	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	80	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(2);    	compilable	  [FE]  AssertionError  	134	2	replace
131	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(2);    	compilable	  [FE]  AssertionError  	134	2	replace
132	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns);	  Type    toParameterizedType    =    typeVarAssigns.get(toTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	92	None	replace
133	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns);	  Type    toParameterizedType    =    typeVarAssigns.get(toTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	92	None	replace
134	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns);	  Type    toParameterizedType    =    typeVarAssigns.get(toTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	92	None	replace
135	[BUG]  [BUGGY]  if(type.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(type.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(type.isEmpty())  {  return  false;  }	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigneds.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
136	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass,  type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toClass,  type);	  Type    type    =    toTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	43	None	replace
137	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(type,  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(type,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(type,  toClass);	  Type    type    =    toTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	43	None	replace
138	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);  [CE]  cannot  find  symbol  inTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  inTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    toTypeVarAssigns    =    inTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  inTypeVarAssigns	135	None	replace
139	[BUG]  [BUGGY]  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	86	None	replace
140	[BUG]  [BUGGY]  parent!=  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent!=    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
141	[BUG]  [BUGGY]  typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.isEmpty())  {  return  true;  }	  parent!=    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	84	None	replace
142	[BUG]  [BUGGY]  parent!=  fromTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  fromTypeVarAssigns.isEmpty())  {  return  true;  }	  parent!=    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	84	None	replace
143	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	90	None	replace
144	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	90	None	replace
145	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns.size());	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	90	None	replace
146	[BUG]  [BUGGY]  parent  ==  null  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    null    &&    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	125	None	replace
147	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(type.getKey());	  Type    toParameterizedType    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	122	None	replace
148	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());	  Type    toParameterizedType    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	122	None	replace
149	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);	  Type    toParameterizedType    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	122	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
151	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
153	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
154	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false	  	non-compiled	[CE]  ';'  expected	52	None	add
155	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
156	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	52	None	add
157	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass,  type);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
158	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toParameterizedType);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toParameterizedType);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
159	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toTypeVarAssigns);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  toTypeVarAssigns);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
160	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  typeVarAssigns);  [CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  typeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type,  toClass,  typeVarAssigns);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  method  get  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	7	None	replace
161	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	59	None	replace
162	[BUG]  [BUGGY]  typeVarAssigns.handleMissingClass(type);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.handleMissingClass(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.handleMissingClass(type);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
163	[BUG]  [BUGGY]  toTypeVarAssigns.handleMissingClass(typeVarAssigns);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  toTypeVarAssigns.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	toTypeVarAssigns.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	51	None	replace
164	[BUG]  [BUGGY]  Type  toParameterizedType.handleMissingClass(typeVarAssigns);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  ';'  expected	51	None	replace
165	[BUG]  [BUGGY]  owner.handleMissingClass(typeVarAssigns);  [CE]  cannot  find  symbol  owner  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  owner.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	owner.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  owner	51	None	replace
166	[BUG]  [BUGGY]  Constructor  <?>  toParameterizedType  =  fromTypeVarAssigns.get(toClass);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Constructor  <?>  toParameterizedType  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Constructor  <?>  toParameterizedType  =  fromTypeVarAssigns.get(toClass);	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
167	[BUG]  [BUGGY]  Class  <?>  toClass  =  fromTypeVarAssigns.get(toClass);  [CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toClass  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toClass  =  fromTypeVarAssigns.get(toClass);	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	68	None	replace
168	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	108	None	add
169	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toParameterizedType);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toParameterizedType);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	108	None	add
170	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	108	None	add
171	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigns  =  getTypeArguments(toParameterizedType);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	108	None	add
172	[BUG]  [BUGGY]  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	127	None	replace
173	[BUG]  [BUGGY]  Type  fromTypeVarAssigns  =  toTypeVarAssigns.get(type);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  fromTypeVarAssigns  =  toTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  fromTypeVarAssigns  =  toTypeVarAssigns.get(type);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	127	None	replace
174	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);  [CE]  cannot  find  symbol  toTypeArg  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  cannot  find  symbol  toTypeArg	127	None	replace
175	[BUG]  [BUGGY]  ||  toParameterizedType.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toParameterizedType.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toParameterizedType.isEmpty())  {	  ||    fromTypeVarAssigns.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
176	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	36	None	replace
177	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toParameterizedType);	  Type    type    =    fromTypeVarAssigns.get(toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	112	None	replace
178	[BUG]  [BUGGY]  typeVarAssigns.put(toParameterizedType,  toTypeVarAssigns);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(toParameterizedType,  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(toParameterizedType,  toTypeVarAssigns);	  typeVarAssigns.put(toTypeArg,    toTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	32	None	replace
179	[BUG]  [BUGGY]  typeVarAssigns.put(fromTypeArg,  toTypeVarAssigns);  [CE]  cannot  find  symbol  fromTypeArg  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(fromTypeArg,  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(fromTypeArg,  toTypeVarAssigns);	  typeVarAssigns.put(toTypeArg,    toTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  fromTypeArg	32	None	replace
180	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())  {	  if(typeVarAssigns.isEmpty())    {    return    false;    }    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
181	[BUG]  [BUGGY]  typeVarAssigns.clear())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.clear())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.clear())  {	  if(typeVarAssigns.isEmpty())    {    return    false;    }    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	64	None	replace
182	[BUG]  [BUGGY]  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
183	[BUG]  [BUGGY]  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	8	None	replace
184	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  if(toParameterizedType.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  if(toParameterizedType.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {  return  false;  }  if(toParameterizedType.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigned.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
185	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	5	None	add
186	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	5	None	add
187	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toClass);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigns  =  byTypeVarAssigns.get(toClass);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	5	None	add
188	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    fromTypeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	94	None	replace
189	[BUG]  [BUGGY]  Type  toParameterizedType  =  toClass.get(type,  fromTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toClass.get(type,  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toClass.get(type,  fromTypeVarAssigns);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	70	None	replace
190	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toClass,  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(toClass,  type);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	70	None	replace
191	[BUG]  [BUGGY]  typeVarAssigns.isEmpty()?  true  :  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.isEmpty()?  true  :  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.isEmpty()?  true  :  false;	  parent    ==    typeVarAssigns.isEmpty()?    true    :    false;    	non-compiled	[CE]  not  a  statement	129	None	replace
192	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()?  true  :  false;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()?  true  :  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty()?  true  :  false;	  parent    ==    typeVarAssigns.isEmpty()?    true    :    false;    	non-compiled	[CE]  not  a  statement	129	None	replace
193	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()?  true  :  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()?  true  :  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()?  true  :  false;	  parent    ==    typeVarAssigns.isEmpty()?    true    :    false;    	non-compiled	[CE]  not  a  statement	129	None	replace
194	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass,  type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(toClass,  type);	  Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	16	None	replace
195	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toParameterizedType);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  toTypeVarAssigns.get(toParameterizedType);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  typeVarAssigns.get(toParameterizedType);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    	compilable	  [FE]  AssertionError  	109	2	replace
197	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toParameterizedType);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(toParameterizedType);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    	compilable	  [FE]  AssertionError  	109	2	replace
198	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
199	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
200	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
201	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
202	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  If(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  If(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  ';'  expected	66	None	add
203	[BUG]  [BUGGY]  typeVarAssigns.put(fromTypeVarAssigns,  type);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(fromTypeVarAssigns,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(fromTypeVarAssigns,  type);	  typeVarAssigns.put(type,    fromTypeVarAssigns);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	31	None	replace
204	[BUG]  [BUGGY]  typeVarAssigns.put(toParameterizedType,  fromTypeVarAssigns);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(toParameterizedType,  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(toParameterizedType,  fromTypeVarAssigns);	  typeVarAssigns.put(type,    fromTypeVarAssigns);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	31	None	replace
205	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toTypeVarAssigns);	  Type    toParameterizedType    =    toTypeVarAssigns.get(type,    fromTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	35	None	replace
206	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  type);	  Type    toParameterizedType    =    toTypeVarAssigns.get(type,    fromTypeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	35	None	replace
207	[BUG]  [BUGGY]  result.put(toParameterizedType,  toTypeVarAssigns);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  result.put(toParameterizedType,  toTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	result.put(toParameterizedType,  toTypeVarAssigns);	  return    false;    if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	140	None	replace
208	[BUG]  [BUGGY]  if(toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toTypeVarAssigns.isEmpty())  {  return  false;  }	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	79	None	replace
209	[BUG]  [BUGGY]  type  =  toTypeVarAssigns.get(type);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  type  =  toTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	type  =  toTypeVarAssigns.get(type);	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	79	None	replace
210	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.size());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.size());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    	non-compiled	[CE]  cannot  find  symbol	97	None	replace
211	[BUG]  [BUGGY]  typeVarAssigns.put(toParameterizedType,  type);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(toParameterizedType,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(toParameterizedType,  type);	  typeVarAssigns.put(type,    toParameterizedType);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	33	None	replace
212	[BUG]  [BUGGY]  typeVarAssigns.put(type,  toParameterizedType,  toClass);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(type,  toParameterizedType,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  toParameterizedType,  toClass);	  typeVarAssigns.put(type,    toParameterizedType);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	33	None	replace
213	[BUG]  [BUGGY]  typeVarAssigns.put(toClass,  type);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(toClass,  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(toClass,  type);	  typeVarAssigns.put(type,    toParameterizedType);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	33	None	replace
214	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  type);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	45	None	replace
215	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(fromTypeVarAssigns.getValue());	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	45	None	replace
216	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(1);	  return(typeVarAssigns    ==    null    ||    fromTypeVarAssigns.isEmpty())?    null    :    typeVarAssigns.get(1);    	non-compiled	[CE]  incompatible  types	139	None	replace
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	78	2	replace
218	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	78	2	replace
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	78	2	replace
220	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	78	2	replace
221	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	98	None	add
222	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	98	None	add
223	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  fromTypeVarAssigneds.get(fromTypeVarAssigns.size());  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  fromTypeVarAssigneds.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  toTypeVarAssigns  =  fromTypeVarAssigneds.get(fromTypeVarAssigns.size());	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	98	None	add
224	[BUG]  [BUGGY]  ||  toTypeVarAssigns.isPrimitive())  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  toTypeVarAssigns.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  toTypeVarAssigns.isPrimitive())  {  return  false;  }	  ||    toTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
225	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;	  parent    ==    fromTypeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  not  a  statement	95	None	replace
226	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.isEmpty()  ||  toTypeVarAssigns.isEmpty())  {  return  false;	  parent    ==    fromTypeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  not  a  statement	95	None	replace
227	[BUG]  [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  toParameterizedType);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	104	None	replace
228	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toParameterizedType.getKey(),  toTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toParameterizedType.getKey(),  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toParameterizedType.getKey(),  toTypeVarAssigns);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	104	None	replace
229	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toParameterizedType);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	104	None	replace
230	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toTypeArg);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toTypeArg);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toTypeArg);	  Type    type    =    toTypeVarAssigns.get(toTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	107	None	replace
231	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	41	None	replace
232	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	41	None	replace
233	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	41	None	replace
234	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
235	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(2);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
236	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
237	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(3);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(3);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(3);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
238	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  type.get(toTypeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  type.get(toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  type.get(toTypeVarAssigns);	  Type    toTypeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol	119	None	replace
239	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  types.get(toTypeVarAssigns);  [CE]  cannot  find  symbol  types  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  types.get(toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  types.get(toTypeVarAssigns);	  Type    toTypeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  types	119	None	replace
240	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(0);    Type  toTypeVarAssigns  =  typeVarAssigns.get(0);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	add
241	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(1);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(0);    Type  toTypeVarAssigns  =  typeVarAssigns.get(1);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	add
242	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(0);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	add
243	[BUG]  [BUGGY]  AssertionError  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  AssertionError  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	AssertionError  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	26	None	replace
244	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);  [CE]  cannot  find  symbol  byTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  byTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    toTypeVarAssigns    =    byTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  byTypeVarAssigns	21	None	replace
245	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getValue());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getValue());	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg.getKey());    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	131	None	replace
246	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  toClass);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg.getKey());    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	131	None	replace
247	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey()  -  1);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey()  -  1);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg.getKey());    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	131	None	replace
248	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg.getKey());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeArg.getKey());	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg.getKey());    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	131	None	replace
249	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  getTypeVarAssigns(type);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  getTypeVarAssigns(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  getTypeVarAssigns(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    toTypeVarAssigns    =    getTypeVarAssigns(type);    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
251	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
253	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
254	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false	  	non-compiled	[CE]  ';'  expected	61	None	add
255	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
256	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
257	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	105	None	replace
258	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	105	None	replace
259	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(1);  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.get(1);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	105	None	replace
260	[BUG]  [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  toClass);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  toClass);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	23	None	replace
261	[BUG]  [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  false;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||!typeVarAssigns.isEmpty())  {  return  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!typeVarAssigns.isEmpty())  {  return  false;	  ||    fromTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
262	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(1);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(1);	  Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	60	None	replace
263	[BUG]  [BUGGY]  ||!toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||!toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!toTypeVarAssigns.isEmpty())  {  return  true;  }	  ||!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
264	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns);	  Type    toParameterizedType    =    typeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	34	None	replace
265	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeVarAssigns.getKey());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
266	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toTypeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  toTypeVarAssigns);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
267	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
268	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  +  1);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
269	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  +  1);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  2);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
271	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  2);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
272	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	10	None	replace
273	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    true;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	118	None	replace
274	[BUG]  [BUGGY]  parent!=  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent!=    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
275	[BUG]  [BUGGY]  parent!=  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  parent!=    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	101	None	replace
276	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey());	  Type    toParameterizedType    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	122	None	replace
277	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(typeVarAssigns.getKey());	  Type    toParameterizedType    =    toTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	122	None	replace
278	[BUG]  [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toClass.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	23	None	replace
279	[BUG]  [BUGGY]  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Map<TypeVariable<?>,Type>,Class<CAP#1>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns  =  getTypeArguments(typeVarAssigns,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Map<TypeVariable<?>,Type>,Class<CAP#1>)	65	None	replace
280	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass,  typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(toClass,  typeVarAssigns);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	65	None	replace
281	[BUG]  [BUGGY]  return  false;  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return  false;  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return  false;  if(typeVarAssigns.isEmpty()  ||  toTypeVarAssigns.contains(type))  {  return  false;  }	  return    false;    if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(type))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	143	None	replace
282	[BUG]  [BUGGY]  return(toTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(toTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(toTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    toTypeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	29	None	replace
283	[BUG]  [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  toTypeVarAssigns.get(type,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  toTypeVarAssigns.get(type,  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	70	None	replace
284	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.get())  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.get())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.get())  {  return  false;  }	  parent    ==    fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	93	None	replace
285	[BUG]  [BUGGY]  Type  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  fromTypeVarAssigns.get(0);	  return    false;    Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	141	None	replace
286	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());	  if(typeVarAssigns.isEmpty())    {    return    false;    }    If(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	63	None	replace
287	[BUG]  [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  getTypeArguments(toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  getTypeArguments(toClass);	  if(typeVarAssigns.isEmpty())    {    return    true;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	118	None	replace
288	[BUG]  [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  fromTypeVarAssigns);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	104	None	replace
289	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	11	None	replace
290	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {  return  true;  }  if(fromTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
291	[BUG]  [BUGGY]  parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    null    &&!typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	121	None	replace
292	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg  +  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeArg  +  1);	  Type    type    =    toTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	123	None	replace
293	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg  -  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeArg  -  1);	  Type    type    =    toTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	123	None	replace
294	[BUG]  [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	67	None	replace
295	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(fromTypeVarAssigns);	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	62	None	replace
296	[BUG]  [BUGGY]  if(type.isEmpty())  {  return  false;  type  =  toTypeVarAssigns.get(type);  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(type.isEmpty())  {  return  false;  type  =  toTypeVarAssigns.get(type);  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(type.isEmpty())  {  return  false;  type  =  toTypeVarAssigns.get(type);  }	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
297	[BUG]  [BUGGY]  if(type.isEmpty())  {  return  false;  }  else  {  Type  type  =  toTypeVarAssigns.get(type);  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(type.isEmpty())  {  return  false;  }  else  {  Type  type  =  toTypeVarAssigns.get(type);  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(type.isEmpty())  {  return  false;  }  else  {  Type  type  =  toTypeVarAssigns.get(type);  }	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
298	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
299	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getValue());	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	45	None	replace
300	[BUG]  [BUGGY]  return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns!=  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns!=    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  incompatible  types	89	None	replace
301	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigned.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
302	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(toClass,  toParameterizedType);	  Type    type    =    fromTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	47	None	replace
303	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromTypeVarAssigns);	  Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	17	None	replace
304	[BUG]  [BUGGY]  parent  ==  toTypeVarAssigns.get(0))  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  toTypeVarAssigns.get(0))  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  toTypeVarAssigns.get(0))  {  return  true;  }	  parent    ==    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	8	None	replace
305	[BUG]  [BUGGY]  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	85	None	replace
306	[BUG]  [BUGGY]  if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!fromTypeVarAssigns.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	85	None	replace
307	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	85	2	replace
308	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())    {    return    true;    }    	compilable	  [FE]  AssertionError  	85	2	replace
309	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  toTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	41	None	replace
310	[BUG]  [BUGGY]  parent!=  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  null  &&  typeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    null    &&    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	125	None	replace
311	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey(),  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey(),  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getKey(),  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(typeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	106	None	replace
312	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getValue());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getValue());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(typeVarAssigns.getValue());	  Type    toParameterizedType    =    fromTypeVarAssigns.get(typeVarAssigns.getKey());    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	106	None	replace
313	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toTypeVarAssigns);  [CE]  variable  toTypeVarAssigns  might  not  have  been  initialized  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(toTypeVarAssigns);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(toTypeVarAssigns);	  Type    toTypeVarAssigns    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  toTypeVarAssigns  might  not  have  been  initialized	119	None	replace
314	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	54	None	replace
315	[BUG]  [BUGGY]  Class  <?>  toClass  =  typeVarAssigns.get(type);  [CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toClass  =  typeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toClass  =  typeVarAssigns.get(type);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	54	None	replace
316	[BUG]  [BUGGY]  typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {	  if(typeVarAssigns.isEmpty())    {    return    false;    }    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
317	[BUG]  [BUGGY]  typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	64	None	replace
318	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	  	compilable	  [FE]  AssertionError  	98	2	add
319	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());	  	compilable	  [FE]  AssertionError  	98	2	add
320	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	126	None	replace
321	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	126	None	replace
322	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.contains(typeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
323	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(fromTypeVarAssigns))  {  return  false;  }  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(fromTypeVarAssigns))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.contains(fromTypeVarAssigns))  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.contains(typeVarAssigns))    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
324	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    typeVarAssigns.isEmpty()    ||    toTypeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	9	None	replace
325	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true	  	non-compiled	[CE]  ';'  expected	66	None	add
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
327	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	66	2	add
328	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
329	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;	  	non-compiled	[CE]  illegal  start  of  expression	66	None	add
330	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(typeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	51	None	replace
331	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(typeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	51	None	replace
332	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.handleMissingClass(type);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	51	None	replace
333	[BUG]  [BUGGY]  if(type.isEmpty())  {  return  false;  type  =  fromTypeVarAssigns.get(type);  }  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(type.isEmpty())  {  return  false;  type  =  fromTypeVarAssigns.get(type);  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(type.isEmpty())  {  return  false;  type  =  fromTypeVarAssigns.get(type);  }	  return    false;    Type    type    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
335	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	61	2	add
336	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigneds  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigneds.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigneds	61	None	add
337	[BUG]  [BUGGY]  if(!toParameterizedType.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!toParameterizedType.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!toParameterizedType.isEmpty())  {  return  true;  }  if(!toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigneds.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
338	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.get(1);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	105	None	replace
339	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  typeVarAssigns  =  typeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  typeVarAssigns  =  typeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  typeVarAssigns  =  typeVarAssigns.get(type);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
340	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  classVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(type);  Type  toTypeVarAssigns  =  classVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(type);    Type  toTypeVarAssigns  =  classVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	110	None	add
341	[BUG]  [BUGGY]  Class  <?>  toClass  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toClass  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toClass  =  getTypeArguments(fromTypeVarAssigns,  toClass);	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  variable  toClass  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	68	None	replace
342	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.getKey());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.getKey());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.getKey());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
343	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg  -  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeArg  -  1);	  Type    type    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	48	None	replace
344	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg  +  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeArg  +  1);	  Type    type    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	48	None	replace
345	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg.type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeArg.type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeArg.type);	  Type    type    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	48	None	replace
346	[BUG]  [BUGGY]  parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent!=  null  &&!typeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    null    &&!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	73	None	replace
347	[BUG]  [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	                Type        toTypeVarAssigns        =        fromTypeVarAssigns.get(type);        Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	87	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(toClass);	  	compilable	  [FE]  AssertionError  	5	2	add
349	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(toClass);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(toClass);	  	compilable	  [FE]  AssertionError  	5	2	add
350	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	compilable	  [FE]  AssertionError  	59	2	replace
351	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	compilable	  [FE]  AssertionError  	59	2	replace
352	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  true  :  null;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  true  :  null;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()?  true  :  null;	  parent    ==    typeVarAssigns.isEmpty()?    true    :    false;    	non-compiled	[CE]  not  a  statement	129	None	replace
353	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [CE]  no  suitable  method  found  for  getTypeArguments(Map<TypeVariable<?>,Type>,Class<CAP#1>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  getTypeArguments(fromTypeVarAssigns,  toClass);	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  no  suitable  method  found  for  getTypeArguments(Map<TypeVariable<?>,Type>,Class<CAP#1>)	81	None	replace
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigns  =  typeVarAssigns.get(fromTypeVarAssigns.size());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
355	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(fromTypeVarAssigns.size());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  typeVarAssigns.get(fromTypeVarAssigns.size());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	compilable	  [FE]  AssertionError  	99	2	replace
356	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.size());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type.size());	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
357	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue(),  toParameterizedType);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	24	None	replace
358	[BUG]  [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(1));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(1));  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(1));	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
359	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(1));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(1));  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeVarAssigns.get(1));	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
360	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	44	None	replace
361	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
362	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
363	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass,  toParameterizedType);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass,  toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toClass,  toParameterizedType);	  Type    type    =    toTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	42	None	replace
364	[BUG]  [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.get(type));  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.get(type));  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  typeVarAssigns.get(fromTypeVarAssigns.get(type));	  Type    toParameterizedType    =    typeVarAssigns.get(type);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	34	None	replace
365	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigned.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigned.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty()  ||  typeVarAssigned.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	58	None	add
366	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(1);	  	compilable	  [FE]  AssertionError  	1	2	add
367	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(1);	  	compilable	  [FE]  AssertionError  	1	2	add
368	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(1);	  	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	1	None	add
369	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg  +  1);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg  +  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg  +  1);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	113	None	replace
370	[BUG]  [BUGGY]  return  false;  type  =  fromTypeVarAssigns.get(type);  [CE]  unreachable  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return  false;  type  =  fromTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return  false;  type  =  fromTypeVarAssigns.get(type);	  return    false;    Type    type    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  unreachable  statement	114	None	replace
371	[BUG]  [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  true;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||  fromTypeVarAssigns.isEmpty())  {  return  true;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||  fromTypeVarAssigns.isEmpty())  {  return  true;	  ||    fromTypeVarAssigns.isEmpty())    {    return    false;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
372	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	88	2	replace
373	[BUG]  [BUGGY]  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	88	2	replace
374	[BUG]  [BUGGY]  TypeUtils.handleMissingClass(fromTypeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  TypeUtils.handleMissingClass(fromTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	TypeUtils.handleMissingClass(fromTypeVarAssigns);	  aughtExceptionHandler.handleMissingClass(fromTypeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
375	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size());  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size());  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size());  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size());    Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size());	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	98	None	add
376	[BUG]  [BUGGY]  Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  true;  }	  parent    ==    null    ||    typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  ';'  expected	128	None	replace
377	[BUG]  [BUGGY]  ||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns)))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns)))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns)))  {  return  false;  }	  ||!typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
378	[BUG]  [BUGGY]  ||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns.getKey())))  {  return  false;  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns.getKey())))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||(typeVarAssigns.isEmpty()  &&  toTypeVarAssigns.contains(typeVarAssigns.getKey())))  {  return  false;  }	  ||!typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
379	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toClass.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(toClass.isPrimitive())  {  return  false;  }	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	compilable	  [FE]  AssertionError  	81	2	replace
380	[BUG]  [BUGGY]  if(toClass.isPrimitive())  {  return  false;  }  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toClass.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toClass.isPrimitive())  {  return  false;  }	  return    false;    Type    toTypeVarAssigns    =    getTypeArguments(type,    toClass);    	compilable	  [FE]  AssertionError  	81	2	replace
381	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(entry.getKey());  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(entry.getKey());  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(entry.getKey());	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	54	None	replace
382	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(type,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(type,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(type,  toClass);	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    If(fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	54	None	replace
383	[BUG]  [BUGGY]  parent  ==  fromTypeVarAssigns.get(fromTypeArg.getKey()))  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  fromTypeVarAssigns.get(fromTypeArg.getKey()))  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  fromTypeVarAssigns.get(fromTypeArg.getKey()))  {  return  false;  }	  parent    ==    fromTypeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  not  a  statement	93	None	replace
384	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(2);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  typeVarAssigns.get(0);  Type  toTypeVarAssigns  =  typeVarAssigns.get(2);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    typeVarAssigns.get(0);    Type  toTypeVarAssigns  =  typeVarAssigns.get(2);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	3	None	add
385	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigned.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigned.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigned.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	61	None	add
386	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {  return  false;  }  if(typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        false;        }        if(typeVarAssigns.isEmpty())    {    return    false;    }    if(typeVarAssigns.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
387	[BUG]  [BUGGY]  ||!typeVarAssigns.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  ||!typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	||!typeVarAssigns.isEmpty())  {	  ||    fromTypeVarAssigns.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
388	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass);	  if(typeVarAssigns.isEmpty())    {    return    true;    }    If(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	77	None	replace
389	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg.type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(fromTypeArg.type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(fromTypeArg.type);	  Type    type    =    toTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	123	None	replace
390	[BUG]  [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	115	None	replace
391	[BUG]  [BUGGY]  Type[]  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type[]  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type[]  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(0);    Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(2);    	non-compiled	[CE]  incompatible  types	134	None	replace
392	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromClass);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	18	None	replace
393	[BUG]  [BUGGY]  Type  typeVarAssigns  =  toTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  toTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  toTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	86	None	replace
394	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type[]  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type[]  typeVarAssigns  =  fromTypeVarAssigns.get(type);	          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	86	None	replace
395	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.getKey(),  type);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg.getKey());    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	131	None	replace
396	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type,  toClass);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
397	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toClass.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty()  ||  toClass.isPrimitive())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	compilable	  [FE]  AssertionError  	65	2	replace
398	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toClass.isPrimitive())  {  return  false;  }  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  toClass.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  toClass.isPrimitive())  {  return  false;  }	  if(typeVarAssigns.isEmpty())    {    return    false;    }    Type    typeVarAssigns    =    getTypeArguments(typeVarAssigns,    toClass);    	compilable	  [FE]  AssertionError  	65	2	replace
399	[BUG]  [BUGGY]  Type  typeVarAssigns  =  typeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  typeVarAssigns  =  typeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  typeVarAssigns  =  typeVarAssigns.get(type);	  Type    toParameterizedType    =    typeVarAssigns.get(type);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	34	None	replace
400	[BUG]  [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass,  toClass);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  fromTypeVarAssigns.get(type,  toClass,  toClass);	  Type    toParameterizedType    =    fromTypeVarAssigns.get(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	70	None	replace
401	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigned.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	66	None	add
402	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())        {        return        true;        }        if(!typeVarAssigns.isEmpty())    {    return    true;    }    if(!typeVarAssigns.isEmpty())  {  return  true;  }  if(!typeVarAssigned.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	66	None	add
403	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  }  else  if(typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	}  else  if(typeVarAssigns.isEmpty())  {	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    ||    fromTypeVarAssigns.isEmpty())    {    return    false;    }    	compilable	  [FE]  AssertionError  	55	3	replace
404	[BUG]  [BUGGY]  }  else  if(typeVarAssigns.isEmpty())  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  }  else  if(typeVarAssigns.isEmpty())  {  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	}  else  if(typeVarAssigns.isEmpty())  {	  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    ||    fromTypeVarAssigns.isEmpty())    {    return    false;    }    	compilable	  [FE]  AssertionError  	55	3	replace
405	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType  ==  null)  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(toParameterizedType  ==  null)  {  return  false;  }	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	80	2	replace
406	[BUG]  [BUGGY]  if(toParameterizedType  ==  null)  {  return  false;  }  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType  ==  null)  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType  ==  null)  {  return  false;  }	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(type);    	compilable	  [FE]  AssertionError  	80	2	replace
407	[BUG]  [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toParameterizedType.get(fromTypeVarAssigns.getKey(),  type);	  Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),    toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	104	None	replace
408	[BUG]  [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getValue());    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	116	None	replace
409	[BUG]  [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(0);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  toParameterizedType  =  fromTypeVarAssigns.get(0);	  return    false;    Type    toParameterizedType    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	83	None	replace
410	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigned.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  typeVarAssigned  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigned.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigned.isEmpty())  {  return  true;  }	  	non-compiled	[CE]  cannot  find  symbol  typeVarAssigned	75	None	add
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
412	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isEmpty())  {  return  true;  }	  	compilable	  [FE]  AssertionError  	75	2	add
413	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  while(typeVarAssigns.isEmpty())  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  while(typeVarAssigns.isEmpty())  {  return  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())        {        return        true;        }        if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())  {  return  true;  }  if(typeVarAssigns.isEmpty())  {  return  true;  }  while(typeVarAssigns.isEmpty())  {  return	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
414	[BUG]  [BUGGY]  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);  [CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  fromTypeVarAssigns  =  fromTypeVarAssigns.get(toTypeArg);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  fromTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	127	None	replace
415	[BUG]  [BUGGY]  typeVarAssigns.put(type,  toClass);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.put(type,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.put(type,  toClass);	  typeVarAssigns.put(type,    toTypeArg);    	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	103	None	replace
416	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  +  1]);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  +  1]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[fromTypeVarAssigns.size()  +  1]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.values().toArray(new    Type[typeVarAssigns.size()    +    1]);    	non-compiled	[CE]  incompatible  types	38	None	replace
417	[BUG]  [BUGGY]  Class  <?>  type  =  toTypeVarAssigns.get(type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  type  =  toTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  type  =  toTypeVarAssigns.get(type);	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	79	None	replace
418	[BUG]  [BUGGY]  return  false;  type  =  toTypeVarAssigns.get(type);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return  false;  type  =  toTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return  false;  type  =  toTypeVarAssigns.get(type);	  return    false;    Type    type    =    toTypeVarAssigns.get(type);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	79	None	replace
419	[BUG]  [BUGGY]  return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(1);  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(1);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns!=  null)?  null  :  fromTypeVarAssigns.get(1);	  return(fromTypeVarAssigns!=    null)?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	133	None	replace
420	[BUG]  [BUGGY]  if(toTypeVarAssigns.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toTypeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toTypeVarAssigns.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	78	None	replace
421	[BUG]  [BUGGY]  if(toParameterizedType.isEmpty())  {  return  true;  }  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(toParameterizedType.isEmpty())  {  return  true;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(toParameterizedType.isEmpty())  {  return  true;  }	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigneds.isEmpty())    {    return    true;    }    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
422	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isPrimitive())  {  return  false;  }  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isPrimitive())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty()  ||  typeVarAssigns.isPrimitive())  {  return  false;  }	  if(typeVarAssigns.isEmpty()    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
423	[BUG]  [BUGGY]  Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  parent  ==  null  ||  typeVarAssigns.isEmpty())  {  return  false;  }	  parent    ==    null    ||    typeVarAssigns.isEmpty())    {    return    false;    }    	non-compiled	[CE]  ';'  expected	124	None	replace
424	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
425	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty()  ||  fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
426	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
427	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	  	compilable	  [FE]  AssertionError  	52	2	add
428	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigned.isEmpty())  {  return  false;  }  [CE]  cannot  find  symbol  fromTypeVarAssigned  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigned.isEmpty())  {  return  false;  }  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())        {        return        false;        }        if(fromTypeVarAssigns.isEmpty())    {    return    false;    }    if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  if(fromTypeVarAssigned.isEmpty())  {  return  false;  }	  	non-compiled	[CE]  cannot  find  symbol  fromTypeVarAssigned	52	None	add
429	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  toTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    toTypeVarAssigns.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	29	None	replace
430	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(fromTypeArg.type);	  Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(fromTypeArg);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	113	None	replace
431	[BUG]  [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  false  :  false;  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  typeVarAssigns.isEmpty()?  false  :  false;  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  typeVarAssigns.isEmpty()?  false  :  false;	  parent    ==    typeVarAssigns.isEmpty()?    true    :    false;    	non-compiled	[CE]  not  a  statement	129	None	replace
432	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromClass);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(fromClass);	  Class    <?>    typeVarAssigns    =    toTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	17	None	replace
433	[BUG]  [BUGGY]  Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  type  Type  does  not  take  parameters  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);	  return    false;    Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  type  Type  does  not  take  parameters	141	None	replace
434	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toParameterizedType);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toParameterizedType);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	108	None	add
435	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toParameterizedType);	  	compilable	  [FE]  AssertionError  	108	2	add
436	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toParameterizedType);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toParameterizedType);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toParameterizedType);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toParameterizedType);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toParameterizedType);	  	compilable	  [FE]  AssertionError  	108	2	add
437	[BUG]  [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  toClass,  typeVarAssigns);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toParameterizedType  =  getTypeArguments(type,  toClass,  typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toParameterizedType  =  getTypeArguments(type,  toClass,  typeVarAssigns);	  return    false;    Type    toParameterizedType    =    getTypeArguments(type,    toClass);    	non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	82	None	replace
438	[BUG]  [BUGGY]  Type  type  =  toParameterizedType.getType();  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toParameterizedType.getType();  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toParameterizedType.getType();	  Type    type    =    fromTypeVarAssigns.get(toParameterizedType);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	112	None	replace
439	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(1);	  	compilable	  [FE]  AssertionError  	1	2	add
440	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(1);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(1);	  	compilable	  [FE]  AssertionError  	1	2	add
441	[BUG]  [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass,  toTypeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass,  toTypeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  typeVarAssigns  =  getTypeArguments(fromParameterizedType,  toClass,  toTypeVarAssigns);	  if(!typeVarAssigns.isEmpty())    {    return    true;    }    If(!typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	68	None	replace
442	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey(),  type);	  Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
443	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	compilable	  [FE]  AssertionError  	96	2	add
444	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	compilable	  [FE]  AssertionError  	96	2	add
445	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(fromTypeVarAssigns.size()    -    1);    Type  toTypeVarAssigns  =  inTypeVarAssigns.get(fromTypeVarAssigns.size()  -  1);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	96	None	add
446	[BUG]  [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Class  <?>  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));	  return    false;    Type    type    =    fromTypeVarAssigns.get(fromTypeVarAssigns.get(0));    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	117	None	replace
447	[BUG]  [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	                Type        toTypeVarAssigns        =        fromTypeVarAssigns.get(type);        Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigns  =  toTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	87	None	add
448	[BUG]  [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]          Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(type);    Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	                Type        toTypeVarAssigns        =        fromTypeVarAssigns.get(type);        Type    toTypeVarAssigneds    =    fromTypeVarAssigns.get(type);    Type  typeVarAssigns  =  fromTypeVarAssigns.get(type);  Type  toTypeVarAssigneds  =  fromTypeVarAssigns.get(type);	  	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	87	None	add
449	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  fromTypeVarAssigns.isEmpty())?  null  :  fromTypeVarAssigns.get(0);	  return(typeVarAssigns    ==    null    ||    typeVarAssigns.isEmpty())?    null    :    fromTypeVarAssigns.get(0);    	non-compiled	[CE]  incompatible  types	41	None	replace
450	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toClass);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigns  =  inTypeVarAssigns.get(toClass);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	5	None	add
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toClass);	  	compilable	  [FE]  AssertionError  	5	2	add
452	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toClass);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigned  =  fromTypeVarAssigns.get(toClass);	  	compilable	  [FE]  AssertionError  	5	2	add
453	[BUG]  [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);  [CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(toClass);  Type  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type    toTypeVarAssigns    =    fromTypeVarAssigns.get(toClass);    Type  toTypeVarAssigns  =  getTypeArguments(toClass,  toClass);	  	non-compiled	[CE]  variable  toTypeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	5	None	add
454	[BUG]  [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(fromTypeVarAssigns  ==  null)?  null  :  fromTypeVarAssigns.toArray(new  Type[fromTypeVarAssigns.size()  ]);	  return(typeVarAssigns    ==    null)?    null    :    typeVarAssigns.toArray(new    Type[fromTypeVarAssigns.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
455	[BUG]  [BUGGY]  Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  type  Type  does  not  take  parameters  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);	  return    false;    Class    <?>    typeVarAssigns    =    fromTypeVarAssigns.get(type);    	non-compiled	[CE]  type  Type  does  not  take  parameters	142	None	replace
456	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass  -  1);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.get(toClass  -  1);  [BUGGY]      return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.get(toClass  -  1);	  Type    type    =    toTypeVarAssigns.get(toClass);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	42	None	replace
457	[BUG]  [BUGGY]  [Delete]  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  [Delete]  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	[Delete]	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
458	[BUG]  [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  parent  ==  null  ||  typeVarAssigns.isEmpty();  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	parent  ==  null  ||  typeVarAssigns.isEmpty();	  if(typeVarAssigns.isEmpty())    {    return    true;    }    if(typeVarAssigns.isEmpty())    {    return    true;    }    	non-compiled	[CE]  not  a  statement	76	None	replace
459	[BUG]  [BUGGY]  TypeUtils.handleMissingClass(typeVarAssigns);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  TypeUtils.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	TypeUtils.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
460	[BUG]  [BUGGY]  Type  type  =  toTypeVarAssigns.handleMissingClass(typeVarAssigns);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  Type  type  =  toTypeVarAssigns.handleMissingClass(typeVarAssigns);  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	Type  type  =  toTypeVarAssigns.handleMissingClass(typeVarAssigns);	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	51	None	replace
461	[BUG]  [BUGGY]  typeVarAssigns.handleMissingClass();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {      [BUGGY]  typeVarAssigns.handleMissingClass();  [BUGGY]      }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	typeVarAssigns.handleMissingClass();	  aughtExceptionHandler.handleMissingClass(typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
