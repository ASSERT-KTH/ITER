bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);		compilable	  [FE]  AssertionError  	26	2	add
2	[BUG]  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(type);		compilable	  [FE]  AssertionError  	26	2	add
3	[BUG]  [BUGGY]    Type  type  =  toTypeVarAssigns.get(type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  type  =  toTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  type  =  toTypeVarAssigns.get(type);		non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
4	[BUG]  [BUGGY]    Type  toParameterizedType  =  toTypeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toParameterizedType  =  toTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  toParameterizedType  =  toTypeVarAssigns.get(type);		non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
5	[BUG]  [BUGGY]    typeVarAssigns.put(type,  toTypeVarAssigns);  [CE]  cannot  find  symbol  toTypeVarAssigns  [FE]          AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    typeVarAssigns.put(type,  toTypeVarAssigns);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    typeVarAssigns.put(type,  toTypeVarAssigns);		non-compiled	[CE]  cannot  find  symbol  toTypeVarAssigns	26	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);		compilable	  [FE]  AssertionError  	26	2	add
7	[BUG]  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  toTypeVarAssigns  =  fromTypeVarAssigns.get(0);		compilable	  [FE]  AssertionError  	26	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  return  false;  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	return  false;	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
9	[BUG]  [BUGGY]  return  false;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  return  false;  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return  false;	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())  {  return  true;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
11	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())  {  return  true;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(typeVarAssigns.isEmpty())  {  return  false;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
13	[BUG]  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(typeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(typeVarAssigns.isEmpty())  {  return  false;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
15	[BUG]  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(fromTypeVarAssigns.isEmpty())  {  return  false;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(fromTypeVarAssigns.isEmpty())  {  return  false;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	if(!typeVarAssigns.isEmpty())  {  return  true;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
17	[BUG]  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  if(!typeVarAssigns.isEmpty())  {  return  true;  }  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	if(!typeVarAssigns.isEmpty())  {  return  true;  }	return  true;  	compilable	  [FE]  AssertionError  	25	2	replace
18	[BUG]  [BUGGY]    Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  toParameterizedType  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());		non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
19	[BUG]  [BUGGY]    Type  toParameterizedType  =  fromTypeVarAssigns.get(type);  [CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  toParameterizedType  =  fromTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  toParameterizedType  =  fromTypeVarAssigns.get(type);		non-compiled	[CE]  variable  toParameterizedType  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
20	[BUG]  [BUGGY]    Type  type  =  fromTypeVarAssigns.get(type);  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  type  =  fromTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  type  =  fromTypeVarAssigns.get(type);		non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
21	[BUG]  [BUGGY]    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Type  type  =  fromTypeVarAssigns.get(fromTypeVarAssigns.getKey());		non-compiled	[CE]  variable  type  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
22	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null  ||  typeVarAssigns.isEmpty())?  null  :  typeVarAssigns.get(0);	return  true;  	non-compiled	[CE]  incompatible  types	25	None	replace
23	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	return  true;  	non-compiled	[CE]  cannot  find  symbol	25	None	replace
24	[BUG]  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]  return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	return(typeVarAssigns  ==  null)?  null  :  typeVarAssigns.values().toArray(new  Type[typeVarAssigns.size()  ]);	return  true;  	non-compiled	[CE]  incompatible  types	25	None	replace
25	[BUG]  [BUGGY]    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(type);		non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
26	[BUG]  [BUGGY]    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Class  <?>  typeVarAssigns  =  fromTypeVarAssigns.get(0);		non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
27	[BUG]  [BUGGY]    Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (fromTypeVarAssigns  ==  null)  {  return  false;  }    if  (fromTypeVarAssigns.isEmpty())  {  [BUGGY]    Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type);  [BUGGY]  return  true;  }  Map<TypeVariable<?>,  Type>  toTypeVarAssigns  =  getTypeArguments(toParameterizedType,  toClass,  typeVarAssigns);  for  (Map.Entry<TypeVariable<?>,  Type>  entry  :  toTypeVarAssigns.entrySet())  {  Type  toTypeArg  =  entry.getValue();  Type  fromTypeArg  =  fromTypeVarAssigns.get(entry.getKey());  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  ParameterizedType  toParameterizedType  Type>  typeVarAssigns  [VARIABLES]  ParameterizedType  toParameterizedType  Type  fromTypeArg  toTypeArg  type  Entry  entry  boolean  Class  toClass  Map  fromTypeVarAssigns  toTypeVarAssigns  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	    Class  <?>  typeVarAssigns  =  toTypeVarAssigns.get(type);		non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  isAssignable(Type,ParameterizedType,Map<TypeVariable<?>,Type>)	26	None	add
