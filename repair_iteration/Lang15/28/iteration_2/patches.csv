bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
2	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  type);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  type);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
3	[BUG]  [BUGGY]  toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(typeVarAssigns);  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(typeVarAssigns);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  ';'  expected	54	None	replace
4	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
5	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
6	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
7	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
8	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    lowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	42	None	replace
9	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    lowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	42	None	replace
10	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    lowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	42	None	replace
11	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    lowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	42	None	replace
12	[BUG]  [BUGGY]  toBound  =  replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
13	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
14	[BUG]  [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replacementTypeVariables(toBound,  lowerBounds,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
15	[BUG]  [BUGGY]  toBound  =  replacementTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replacementTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replacementTypeVariables(toBound,  upperBounds,  typeVarAssigns);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
16	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	15	None	replace
17	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  type);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	15	None	replace
18	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  wildcardType);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  wildcardType);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	15	None	replace
19	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(lowerBounds,  toLowerBounds);	  toBound    =    toLowerBounds.replaceTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
20	[BUG]  [BUGGY]  toBound  =  toLowerBounds.replaceTypeVariables(toBound,  lowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toLowerBounds.replaceTypeVariables(toBound,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toLowerBounds.replaceTypeVariables(toBound,  lowerBounds);	  toBound    =    toLowerBounds.replaceTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
21	[BUG]  [BUGGY]  toBound  =  toLowerBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toLowerBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toLowerBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);	  toBound    =    toLowerBounds.replaceTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
22	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  toLowerBounds);	  toBound    =    toBound.replaceTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
23	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(type,  upperBounds);	  toBound    =    toBound.replaceTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
24	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(wildcardType,  lowerBounds);	  toBound    =    toBound.replaceTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
25	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBounds,  lowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBounds,  lowerBounds);	  toBound    =    replaceTypeVariables(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	56	None	replace
26	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	55	None	replace
27	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	55	None	replace
28	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	17	None	replace
29	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	17	None	replace
30	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  false);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  false);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  false);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	17	None	replace
31	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns);	  Type[]    upperBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	51	None	replace
32	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);	  Type[]    upperBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	51	None	replace
33	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
34	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toWildcardType,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toWildcardType,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
35	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
36	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  Type    toBound    =    substituteTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	34	None	replace
37	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	62	None	replace
38	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  type,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  type,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(lowerBounds,  type,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
39	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(toLowerBounds,  type);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(toLowerBounds,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(toLowerBounds,  type);	  toBound    =    toBound.subtractTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
40	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound.type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
41	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound.type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
42	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  toWildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound.type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
43	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	14	None	replace
44	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds,  type);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	14	None	replace
45	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
46	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  false);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  false);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  false);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
47	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	28	None	replace
48	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toLowerBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toLowerBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	28	None	replace
49	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	28	None	replace
50	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
51	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
52	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  toLowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
53	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toLowerBounds,  lowerBounds);	  toBound    =    toBound.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBound);	  toBound    =    toBound.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
55	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(upperBounds,  toBounds);	  toBound    =    toBound.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	6	None	replace
56	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  upperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds,  upperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    upperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	29	None	replace
57	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  upperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  upperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    upperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	29	None	replace
58	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll( ".000 ",  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll( ".000 ",  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll( ".000 ",  lowerBounds);	  toBound    =    toBound.replaceAll(   "u000   ",    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
59	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll( "0000 ",  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll( "0000 ",  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll( "0000 ",  lowerBounds);	  toBound    =    toBound.replaceAll(   "u000   ",    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
60	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll( "000 ",  lowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll( "000 ",  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll( "000 ",  lowerBounds);	  toBound    =    toBound.replaceAll(   "u000   ",    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
61	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	76	None	replace
62	[BUG]  [BUGGY]  ToBound  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  ToBound  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	ToBound  toBound  =  toBound.replaceTypeVariables(lowerBounds,  toBounds);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
63	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
64	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toBound,  lowerBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
65	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
66	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);	  Type    toBound    =    substituteTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
67	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  type);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  type);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(toBound);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	30	None	replace
68	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toWildcardType);	  Type[]    toUpperBounds    =    getImplicitLowerBounds(toBound);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	30	None	replace
69	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toLowerBounds);  [CE]  cannot  find  symbol  higherBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(higherBounds,  toLowerBounds);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  higherBounds	9	None	replace
70	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(upperBounds,  toLowerBounds);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
71	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toBound,  upperBounds);	  toBound    =    replaceTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
72	[BUG]  [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toBound,  upperBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.replaceTypeVariables(toBound,  upperBounds);	  toBound    =    replaceTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	8	None	replace
73	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toLowerBounds,  lowerBounds);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
74	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(lowerBounds,  toBound);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
75	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(upperBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(upperBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(upperBounds,  toBounds);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	23	None	replace
76	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(type,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(type,  lowerBounds);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
77	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toWildcardType,  lowerBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toWildcardType,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toWildcardType,  lowerBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
78	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
79	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  lowBounds  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	27	None	replace
80	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
81	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toLowerBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toLowerBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    upperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	71	None	replace
82	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  type);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBound);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
83	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBound);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
84	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBound,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBound);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
85	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	18	None	replace
86	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  wildcardType);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  type,  wildcardType);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	18	None	replace
87	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	18	None	replace
88	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toBound);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toBound);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	18	None	replace
89	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
90	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
91	[BUG]  [BUGGY]  toBound  =  toBound.replace(toBound,  upperBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toBound,  upperBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
92	[BUG]  [BUGGY]  toBound  =  toBound.replace(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toBound,  lowerBounds,  typeVarAssigns);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
93	[BUG]  [BUGGY]  toBound  =  toBound.replace(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toBound,  toLowerBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
94	[BUG]  [BUGGY]  toBound  =  toBound.replace(toBound,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toBound,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toBound,  lowerBounds,  toLowerBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
95	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  upperBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toBound,  upperBounds);	  toBound    =    replacementTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
96	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds));  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds));	  toBound    =    replacementTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
97	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	22	None	replace
98	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
99	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	21	None	replace
100	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  toWildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
101	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
102	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toBound);  [CE]  cannot  find  symbol  higherBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(higherBounds,  toBound);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toBound);    	non-compiled	[CE]  cannot  find  symbol  higherBounds	10	None	replace
103	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
104	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
105	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  type);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(lowerBounds,  type);	  toBound    =    toBound.subtractTypeVariables(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
106	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  upperBounds);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  upperBounds);	  toBound    =    toBound.subtractTypeVariables(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
107	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
108	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
109	[BUG]  [BUGGY]  toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
110	[BUG]  [BUGGY]  toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toLowerBounds.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  ')'  expected	24	None	replace
111	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
112	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toBound);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(toBound);	          Type[]    upperBounds    =    getImplicitUpperBounds(toBound);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
113	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
114	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  true,  toLowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
115	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  type);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  type);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
116	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
117	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toWildcardType,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toWildcardType,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toWildcardType,  toLowerBounds);	  toBound    =    toBound.replaceTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
118	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toLowerBounds,  type);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toLowerBounds,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toLowerBounds,  type);	  toBound    =    toBound.replaceTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
119	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  lowerBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
120	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  lowBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	65	None	replace
121	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  type);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
122	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  upperBounds);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
123	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
124	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
125	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  toLowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  toLowerBounds);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
126	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  toUpperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  toUpperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	74	None	replace
127	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);	  	non-compiled	[CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
128	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  toLowerBounds);	  	non-compiled	[CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
129	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  toBounds  =  getImplicitUpperBounds(wildcardType,  typeVarAssigns);	  	non-compiled	[CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  fromBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	add	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  fromBounds  =  getImplicitUpperBounds(wildcardType);	  	compilable	  [FE]  AssertionError  	69	2	add
131	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  fromBounds  =  getImplicitUpperBounds(wildcardType);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  fromBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  fromBounds  =  getImplicitUpperBounds(wildcardType);	  	compilable	  [FE]  AssertionError  	69	2	add
132	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(typeVarAssigns,  lowerBounds);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
133	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  lowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
134	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  width  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(width,  lowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  width	52	None	replace
135	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(toBound,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(toBound,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(toBound,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
136	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(lowerBounds,  typeVarAssigns);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
137	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  type);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(lowerBounds,  type);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
138	[BUG]  [BUGGY]  toBound  =  toBound,  typeVarAssigns);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound,  typeVarAssigns);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  ';'  expected	49	None	replace
139	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
140	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  type);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
141	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	32	None	replace
142	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
143	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  lowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
144	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
145	[BUG]  [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  type.subtractTypeVariables(toBound,  lowerBounds);	  toBound    =    type.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
146	[BUG]  [BUGGY]  toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(type);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound,  typeVarAssigns.subtractTypeVariables(type);	  toBound    =    type.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  ';'  expected	53	None	replace
147	[BUG]  [BUGGY]  toBound  =  toBounds.subtractTypeVariables(type,  typeVarAssigns);  [CE]  cannot  find  symbol  toBounds  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.subtractTypeVariables(type,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.subtractTypeVariables(type,  typeVarAssigns);	  toBound    =    type.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toBounds	53	None	replace
148	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    type,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
149	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(toBound,  type,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(toBound,  type,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(toBound,  type,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    type,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
150	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  type,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  type,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  type,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    type,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
151	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  type);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds,  type);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	19	None	replace
152	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	19	None	replace
153	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitUpperBounds(wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
154	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    upperBounds,    toLowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	59	None	replace
155	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    upperBounds,    toLowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	59	None	replace
156	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  upperBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  upperBounds);	  toBound    =    toBound.subtractTypeVariables(type,    typeVarAssigns,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
157	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  typeVarAssigns,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    typeVarAssigns,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
158	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssignsReplacement(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssignsReplacement(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssignsReplacement(toBound,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
159	[BUG]  [BUGGY]  toBound  =  toBound.replacement(type,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacement(type,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacement(type,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
160	[BUG]  [BUGGY]  toBound  =  toBound.replacement(typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacement(typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacement(typeVarAssigns,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
161	[BUG]  [BUGGY]  toBound  =  toBound.replacement(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacement(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacement(toBound,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
162	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
163	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns);  [CE]  cannot  find  symbol  toVarAssigns  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toVarAssigns	13	None	replace
164	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  lowerBounds,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
165	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
166	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
167	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
168	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toUpperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  variable  toUpperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
169	[BUG]  [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  lowerBounds  =  getImplicitLowerBounds(toBound,  toLowerBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
170	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitLowerBounds(toBound,  toUpperBounds);	  Type[]    lowerBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	50	None	replace
171	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitToUpperBounds(toBound);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitToUpperBounds(toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitToUpperBounds(toBound);	          Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
172	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLopperBounds(toBound);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLopperBounds(toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLopperBounds(toBound);	          Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
173	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  toWildcardType,  type);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
174	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  lowerBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
175	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    type);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	12	None	replace
176	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(lowerBounds,  toLowerBounds);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
177	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBounds);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	26	None	replace
178	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toBound,  toBounds);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	26	None	replace
179	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll( "000 ",  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll( "000 ",  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll( "000 ",  upperBounds);	  toBound    =    toBound.replaceAll(   "u000   ",    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
180	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  lowBounds);	  toBound    =    replaceTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	8	None	replace
181	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(lowerBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(lowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(lowerBounds,  toBounds);	  toBound    =    replaceTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	8	None	replace
182	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(upperBounds,  lowerBounds);	  toBound    =    toBounds.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
183	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitToOtherBounds(toBound);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitToOtherBounds(toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitToOtherBounds(toBound);	          Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
184	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  upperBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
185	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds,  typeVarAssigns);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds,  typeVarAssigns);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	27	None	replace
186	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(lowerBounds,  typeVarAssigns,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
187	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(higherBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  higherBounds  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(higherBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(higherBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  higherBounds	52	None	replace
188	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound.type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound.type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	33	None	replace
189	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  type,  typeVarAssigns);  [CE]  cannot  find  symbol  width  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  type,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(width,  type,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    type,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  width	41	None	replace
190	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns);	          Type[]    upperBounds    =    getImplicitUpperBounds(toBound);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
191	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]          AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  toLowerBounds);	          Type[]    upperBounds    =    getImplicitUpperBounds(toBound);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	44	None	replace
192	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(upperBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(upperBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(upperBounds,  toBound);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
193	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(higherBounds,  toBound);  [CE]  cannot  find  symbol  higherBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(higherBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(higherBounds,  toBound);	  toBound    =    toBound.replacementTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  higherBounds	23	None	replace
194	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  upperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    upperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	55	None	replace
195	[BUG]  [BUGGY]  toBound  =  typeVarAssigns.subtractTypeVariables(toBound,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  typeVarAssigns.subtractTypeVariables(toBound,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  typeVarAssigns.subtractTypeVariables(toBound,  lowerBounds);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
196	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(typeVarAssigns);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
197	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  wildcardType);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  type,  wildcardType);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	15	None	replace
198	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(wildcardType,  toLowerBounds);	  toBound    =    toBound.replaceTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
199	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
200	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  upperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
201	[BUG]  [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  upperBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  type.subtractTypeVariables(toBound,  upperBounds);	  toBound    =    toBound.subtractTypeVariables(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
202	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBoundType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBoundType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBoundType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
203	[BUG]  [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  upperBounds  =  getImplicitUpperBounds(toBound,  wildcardType);	  Type[]    upperBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	46	None	replace
204	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	31	None	replace
205	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toBound);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(upperBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(upperBounds,  toBound);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toBound);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
206	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
207	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toUpperBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  lowerBounds,  toUpperBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
208	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  lowerBounds,  upperBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
209	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  upperBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(type,    typeVarAssigns,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
210	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  toLowerBounds);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
211	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  lowBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	71	None	replace
212	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	20	None	replace
213	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  upperBounds,  toBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	62	None	replace
214	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  lowBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
215	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(lowerBounds,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
216	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  lowerBounds,  upperBounds);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
217	[BUG]  [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  type.subtractTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  type.subtractTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
218	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  upperBounds,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
219	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(lowerBounds,  upperBounds);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
220	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  upperBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	58	None	replace
221	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
222	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds,  typeVarAssigns);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowerBounds,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
223	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  upperBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
224	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  lowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	16	None	replace
225	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toUpperBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  lowBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  lowBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toUpperBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	63	None	replace
226	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
227	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
228	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  type,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    type);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	3	None	replace
229	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);	  	non-compiled	[CE]  variable  upperBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
230	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type  toBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type  toBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type  toBounds  =  getImplicitUpperBounds(wildcardType);	  	non-compiled	[CE]  variable  toBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
231	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toBounds);  [CE]  cannot  find  symbol  higherBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(higherBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(higherBounds,  toBounds);	  toBound    =    toBound.replaceTypeVariables(toLowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  higherBounds	76	None	replace
232	[BUG]  [BUGGY]  toBound  =  toBoundReplacement(typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBoundReplacement(typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBoundReplacement(typeVarAssigns,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
233	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssignsReplacement(type,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssignsReplacement(type,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssignsReplacement(type,  toLowerBounds);	  toBound    =    typeVarAssignsReplacement(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
234	[BUG]  [BUGGY]  toBound  =  toBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.replaceTypeVariables(lowerBounds,  toLowerBounds);	  toBound    =    toLowerBounds.replaceTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	75	None	replace
235	[BUG]  [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
236	[BUG]  [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  upperBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replacementTypeVariables(toBound,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replacementTypeVariables(toBound,  lowerBounds,  upperBounds);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
237	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  upperBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  upperBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	19	None	replace
238	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowBounds);  [CE]  cannot  find  symbol  lowBounds  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  lowBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	19	None	replace
239	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds));	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
240	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  ')'  expected	24	None	replace
241	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll(replacementTypeVariables(toBound,  upperBounds);	  toBound    =    replacementTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  ')'  expected	48	None	replace
242	[BUG]  [BUGGY]  toBound  =  typeVarAssigns(toBound,  upperBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  typeVarAssigns(toBound,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  typeVarAssigns(toBound,  upperBounds);	  toBound    =    replacementTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
243	[BUG]  [BUGGY]  toBound  =  toBound.replace(lowerBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(lowerBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(lowerBounds,  toBound);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
244	[BUG]  [BUGGY]  toBound  =  toBound.replace(0,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(0,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(0,  lowerBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
245	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(type,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(type,  lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
246	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(toBound,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(toBound,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(toBound,  lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
247	[BUG]  [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.typeVarAssigns(lowerBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.typeVarAssigns(lowerBounds,  toBound);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
248	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  lowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
249	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(name,  lowerBounds);  [CE]  cannot  find  symbol  name  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(name,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(name,  lowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  name	38	None	replace
250	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(type,  toBound,  upperBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	43	None	replace
251	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowerBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	43	None	replace
252	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  type);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(lowerBounds,  type);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(lowerBounds,  type);	  toBound    =    toBound.replaceTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
253	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBoundType);  [CE]  cannot  find  symbol  toBoundType  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBoundType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBoundType);	          Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    	non-compiled	[CE]  cannot  find  symbol  toBoundType	70	None	replace
254	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  upperBounds,  lowBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    lowBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	37	None	replace
255	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toUpperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toUpperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    toUpperBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	74	None	replace
256	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  type,  toLowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
257	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
258	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	61	None	replace
259	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  type,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(wildcardType,  type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(wildcardType,  type,  lowerBounds);	  toBound    =    toBound.replaceTypeVariables(type,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
260	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(type,  toLowerBounds,  typeVarAssigns);	  toBound    =    toBound.replaceTypeVariables(type,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
261	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBound,  typeVarAssigns,  toLowerBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	4	None	replace
262	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
263	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns,  typeVarAssigns);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBound,  toVarAssigns,  typeVarAssigns);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns,    toUpperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	79	None	replace
264	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toBoundType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toWildcardType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	5	None	replace
265	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(type,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(type,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(type,  toBounds);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	26	None	replace
266	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(lowerBounds,  typeVarAssigns);	  toBound    =    toBound.replacementTypeVariables(lowerBounds,    toBounds);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
267	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  lowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  upperBounds,  lowerBounds);	  toBound    =    substituteTypeVariables(toBound,    toLowerBounds,    lowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	42	None	replace
268	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  toLowerBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	28	None	replace
269	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toLowerBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(toBound,  type,  lowerBounds,  toLowerBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	28	None	replace
270	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
271	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(type,  lowerBounds,  typeVarAssigns);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
272	[BUG]  [BUGGY]  toBound  =  toLowerBounds.replace(toBound,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toLowerBounds.replace(toBound,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toLowerBounds.replace(toBound,  toLowerBounds);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
273	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBound);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBound);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toLowerBounds,  toBound);	  toBound    =    replacementTypeVariables(toBound,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
274	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typesVarAssigns);  [CE]  cannot  find  symbol  typesVarAssigns  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  typesVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  typesVarAssigns);	  toBound    =    type.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  typesVarAssigns	53	None	replace
275	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toWildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBound);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	2	None	replace
276	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  type,  upperBounds);  [CE]  cannot  find  symbol  width  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(width,  type,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(width,  type,  upperBounds);	  toBound    =    toBound.subtractTypeVariables(type,    upperBounds);    	non-compiled	[CE]  cannot  find  symbol  width	40	None	replace
277	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toLowerBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  toLowerBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	14	None	replace
278	[BUG]  [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  replaceTypeVariables(toBound,  upperBounds,  typeVarAssigns);	  Type    toBound    =    replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	36	None	replace
279	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  typeVarAssigns,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(wildcardType,  typeVarAssigns,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(wildcardType,  typeVarAssigns,  lowerBounds);	  toBound    =    toBound.subtractTypeVariables(type,    typeVarAssigns,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
280	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
281	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  wildcardType);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitToLowerBounds(toBoundType,  wildcardType);	  Type[]    toLowerBounds    =    getImplicitToLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	68	None	replace
282	[BUG]  [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replacementTypeVariables(toBound,  toLowerBounds,  typeVarAssigns);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
283	[BUG]  [BUGGY]  toBound  =  toBounds.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  toBounds  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.replacementTypeVariables(toBound,  lowerBounds,  typeVarAssigns);	  toBound    =    replacementTypeVariables(toBound,    lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toBounds	25	None	replace
284	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  upperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  upperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(wildcardType,  toBound,  lowerBounds,  upperBounds);	  toBound    =    substituteTypeVariables(toBound,    lowerBounds,    upperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	29	None	replace
285	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  false);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  false);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  false);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
286	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  wildcardType);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  wildcardType);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  false,  wildcardType);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    false);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	45	None	replace
287	[BUG]  [BUGGY]  toBound  =  toBounds.typeVarAssigns(type,  lowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.typeVarAssigns(type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.typeVarAssigns(type,  lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	49	None	replace
288	[BUG]  [BUGGY]  toBound  =  toBound.assigns(typeVarAssigns,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.assigns(typeVarAssigns,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.assigns(typeVarAssigns,  lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
289	[BUG]  [BUGGY]  toBound  =  toBound.isAssignableFrom(type,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.isAssignableFrom(type,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.isAssignableFrom(type,  lowerBounds);	  toBound    =    typeVarAssigns(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
290	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitUpperBounds(toWildcardType,  upperBounds);	  Type[]    toLowerBounds    =    getImplicitUpperBounds(toBound,    upperBounds);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	60	None	replace
291	[BUG]  [BUGGY]  toBound  =  toBound.replace(toLowerBounds,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toLowerBounds,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toLowerBounds,  toBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	66	None	replace
292	[BUG]  [BUGGY]  toBound  =  toBound.replace(toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replace(toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replace(toLowerBounds,  lowerBounds);	  toBound    =    toBound.replace(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
293	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);	  Type    toBound    =    substituteTypeVariables(toBound,    upperBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	35	None	replace
294	[BUG]  [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.replaceTypeVariables(toLowerBounds,  lowerBounds);	  toBound    =    toBounds.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	77	None	replace
295	[BUG]  [BUGGY]  toBound  =  toBounds.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);  [CE]  cannot  find  symbol  toBounds  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.subtractTypeVariables(typeVarAssigns,  typeVarAssigns);	  toBound    =    typeVarAssigns.subtractTypeVariables(toBound,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  toBounds	54	None	replace
296	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  lowBounds  [FE]                        AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(type,  lowBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(type,  lowBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    type,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol  lowBounds	41	None	replace
297	[BUG]  [BUGGY]  toBound  =  toBound.replaceAll( "u000 ", "u000 ");  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceAll( "u000 ", "u000 ");  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceAll( "u000 ", "u000 ");	  toBound    =    toBound.replaceAll(   "u000   ",    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
298	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
299	[BUG]  [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBounds.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBounds.replaceTypeVariables(toBound,  toLowerBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(toBound,    lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	47	None	replace
300	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toBounds,  toLowerBounds);  [CE]  cannot  find  symbol  toBounds  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toBounds,  toLowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toBounds,  toLowerBounds);	  toBound    =    replaceTypeVariables(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	56	None	replace
301	[BUG]  [BUGGY]  toBound  =  replaceTypeVariables(toLowerBounds,  lowerBounds);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  replaceTypeVariables(toLowerBounds,  lowerBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  replaceTypeVariables(toLowerBounds,  lowerBounds);	  toBound    =    replaceTypeVariables(lowerBounds,    toLowerBounds);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
302	[BUG]  [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toUpperBounds);  [CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type  toBound  =  substituteTypeVariables(toBound,  lowerBounds,  toUpperBounds);	  Type    toBound    =    substituteTypeVariables(toBound,    upperBounds,    toLowerBounds);    	non-compiled	[CE]  variable  toBound  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	59	None	replace
303	[BUG]  [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  toBounds);  [CE]  cannot  find  symbol  toBounds  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.replaceTypeVariables(type,  toBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.replaceTypeVariables(type,  toBounds);	  toBound    =    toBound.replaceTypeVariables(toBound,    lowerBounds);    	non-compiled	[CE]  cannot  find  symbol  toBounds	6	None	replace
304	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  wildcardType,  typeVarAssigns);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	15	None	replace
305	[BUG]  [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]    AssertionError    [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]          Type[]  toBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	                Type[]    toBounds    =    getImplicitUpperBounds(wildcardType);    Type[]  lowerBounds  =  getImplicitUpperBounds(wildcardType);	  	non-compiled	[CE]  variable  lowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	69	None	add
306	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  upperBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  upperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  upperBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    wildcardType);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	18	None	replace
307	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  toUpperBounds);  [CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitLowerBounds(toBound,  typeVarAssigns,  toUpperBounds);	  Type[]    toBounds    =    getImplicitLowerBounds(toBound,    typeVarAssigns);    	non-compiled	[CE]  method  getImplicitLowerBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	13	None	replace
308	[BUG]  [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  toLowerBounds);  [CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  toLowerBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toBounds  =  getImplicitUpperBounds(toBound,  wildcardType,  toLowerBounds);	  Type[]    toBounds    =    getImplicitUpperBounds(toBound,    toLowerBounds);    	non-compiled	[CE]  method  getImplicitUpperBounds  in  class  TypeUtils  cannot  be  applied  to  given  types;	19	None	replace
309	[BUG]  [BUGGY]  toBound  =  toBound.subtractTypeVariables(toLowerBounds,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  toBound.subtractTypeVariables(toLowerBounds,  typeVarAssigns);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  toBound.subtractTypeVariables(toLowerBounds,  typeVarAssigns);	  toBound    =    toBound.subtractTypeVariables(lowerBounds,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
310	[BUG]  [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  upperBounds,  toUpperBounds);  [CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  toBound  =  substituteTypeVariables(wildcardType,  toBound,  upperBounds,  toUpperBounds);  [BUGGY]          for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	toBound  =  substituteTypeVariables(wildcardType,  toBound,  upperBounds,  toUpperBounds);	  toBound    =    substituteTypeVariables(toBound,    upperBounds,    toUpperBounds);    	non-compiled	[CE]  method  substituteTypeVariables  in  class  TypeUtils  cannot  be  applied  to  given  types;	63	None	replace
311	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  toUpperBounds);  [CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError      [CONTEXT]      Type[]  toLowerBounds  =  getImplicitLowerBounds(toWildcardType);  if  (type  instanceof  WildcardType)  {  WildcardType  wildcardType  =  (WildcardType)  type;  Type[]  upperBounds  =  getImplicitUpperBounds(wildcardType);  Type[]  lowerBounds  =  getImplicitLowerBounds(wildcardType);  for  (Type  toBound  :  toUpperBounds)  {        [BUGGY]  Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  toUpperBounds);  [BUGGY]      toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  upperBounds)  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  return  false;  }  }  }  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	Type[]  toLowerBounds  =  getImplicitLowerBounds(toBoundType,  toUpperBounds);	  Type[]    toLowerBounds    =    getImplicitLowerBounds(toBoundType);    	non-compiled	[CE]  variable  toLowerBounds  is  already  defined  in  method  isAssignable(Type,WildcardType,Map<TypeVariable<?>,Type>)	1	None	replace
