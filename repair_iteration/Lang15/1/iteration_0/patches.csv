bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [CE]  cannot  find  symbol  typeParams  [FE]    AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);		non-compiled	[CE]  cannot  find  symbol  typeParams	2	None	add
2	[BUG]  [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass);  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass);		non-compiled	[CE]  cannot  find  symbol	2	None	add
3	[BUG]  [BUGGY]    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParameters.size()  ]);  [CE]  cannot  find  symbol  typeParameters  [FE]        AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParameters.size()  ]);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeParams  =  typeVarAssigns.toArray(new  Type[typeParameters.size()  ]);		non-compiled	[CE]  cannot  find  symbol  typeParameters	2	None	add
4	[BUG]  [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]          AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);		non-compiled	[CE]  cannot  find  symbol	2	None	add
5	[BUG]  [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass);  [CE]  cannot  find  symbol  [FE]            AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass);		non-compiled	[CE]  cannot  find  symbol	2	None	add
6	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType;  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType;	ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
7	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
8	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
9	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
10	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
11	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
12	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);	ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  	non-compiled	[CE]  incompatible  types	1	None	replace
13	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  parameterizedOwnerType  might  not  have  been  initialized  [FE]      AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  	non-compiled	[CE]  variable  parameterizedOwnerType  might  not  have  been  initialized	1	None	replace
14	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]    AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeParams.size()  ]);		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
15	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]      AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
16	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType));  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType));		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
17	[BUG]  [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError  [CONTEXT]    if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {    [BUGGY]    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]  ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	    Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  subtypeVarAssigns);		non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	2	None	add
