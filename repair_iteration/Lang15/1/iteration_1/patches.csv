bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.clone();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
2	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.cloneTree();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
3	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.getOwnerType();  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(ParameterizedType)ownerType.getOwnerType();  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ParameterizedType)ownerType.getOwnerType();	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
4	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
5	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(ownerType));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
6	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(ownerType));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
7	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
8	[BUG]  [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeArgs  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
9	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
10	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[ownerType.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
11	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  toClass.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
12	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
13	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
14	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
15	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  toClass);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
16	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
17	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
18	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
19	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	9	None	replace
20	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeVarAssigns);	      Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
21	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass);	      Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
22	[BUG]  [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  toClass);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  toClassParams  =  getTypeParameters(toClass,  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  toClassParams  =  getTypeParameters(toClass,  toClass);	      Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
23	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
24	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
25	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	13	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	add	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	compilable	  [FE]  AssertionError  	13	2	replace
27	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [FE]  AssertionError  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(ownerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  null;	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    null;    	compilable	  [FE]  AssertionError  	13	2	replace
28	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns,  ownerType);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
29	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  cls,  typeVarAssigns);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
30	[BUG]  [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeParams  =  getTypeParameters(cls,  toClass,  typeVarAssigns);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
31	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
32	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  toClass,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
33	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                    AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
34	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                      AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
35	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[typeParams.size()  ]);	      Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
36	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[ownerType.size()  ]);	      Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
37	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[typeArgs.size()  ]);	      Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
38	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	8	None	replace
39	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	8	None	replace
40	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  toClass,  getRawType(toClass));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	8	None	replace
41	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  ownerType);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	8	None	replace
42	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  cls);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  cls);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
43	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  ownerType);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
44	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeArgs);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  typeArgs);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	2	None	replace
45	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  typeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	7	None	replace
46	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(ownerType));	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
47	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  ownerType);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
48	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(cls,  getRawType(parameterizedType));	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	16	None	replace
49	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType);    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	12	None	replace
50	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  ownerType);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType);    	non-compiled	[CE]  incompatible  types	12	None	replace
51	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
52	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
53	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(cls,  getRawType(parameterizedType),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
54	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  ==  null)?  null  :(ParameterizedType)ownerType;	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
55	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[subtypeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
56	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  typeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
57	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  toClass.toArray(new  Type[toClass.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParameters.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	3	None	replace
58	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(cls,  toClass,  subtypeVarAssigns);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
59	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  toClass);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
60	[BUG]  [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  parameterizedOwnerType  =(parameterizedOwnerType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedOwnerType,  toClass);	  ParameterizedType    parameterizedOwnerType    =(parameterizedOwnerType    instanceof    ParameterizedType)?(ParameterizedType)ownerType    :    getRawType(parameterizedOwnerType);    	non-compiled	[CE]  incompatible  types	12	None	replace
61	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(parameterizedType,  getRawType(toClass),  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
62	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  ownerType.toArray(new  Type[typeParams.size()  ]);	      Type[]    subtypeVarAssigns    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	14	None	replace
63	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(toClass),  cls);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	11	None	replace
64	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  subtypeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  subtypeVarAssigns.toArray(new  Type[subtypeVarAssigns.size()  ]);	      Type[]    subtypeParams    =    typeVarAssigns.toArray(new    Type[typeParams.size()    ]);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	1	None	replace
65	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(ownerType),  toClass);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
66	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType));  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType));  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(parameterizedType,  getRawType(ownerType));	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(ownerType));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	10	None	replace
67	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(ownerType,  getRawType(toClass),  toClass);	      Type[]    subtypeVarAssigns    =    getTypeArguments(ownerType,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	7	None	replace
68	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(toClass),  cls);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(toClass));    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	8	None	replace
69	[BUG]  [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  typeVarAssigns  =  getTypeParameters(cls,  toClass,  typeVarAssigns);	      Type[]    subtypeParams    =    getTypeParameters(cls,    toClass,    typeVarAssigns);    	non-compiled	[CE]  variable  typeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	4	None	replace
70	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeArguments(toClass,  getRawType(parameterizedType),  ownerType);	      Type[]    subtypeVarAssigns    =    getTypeArguments(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	15	None	replace
71	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :(ParameterizedType)ownerType;	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
72	[BUG]  [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType);  [CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType);  [BUGGY]    typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	ParameterizedType  ownerType  =(parameterizedType  instanceof  ParameterizedType)?(ParameterizedType)ownerType  :  getRawType(parameterizedType);	  ParameterizedType    ownerType    =(ParameterizedType)ownerType;    	non-compiled	[CE]  variable  ownerType  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	6	None	replace
73	[BUG]  [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  subtypeVarAssigns);  [CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  subtypeVarAssigns);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeVarAssigns  =  getTypeParameters(toClass,  getRawType(parameterizedType),  cls,  subtypeVarAssigns);	      Type[]    subtypeVarAssigns    =    getTypeParameters(toClass,    getRawType(parameterizedType),    subtypeVarAssigns);    	non-compiled	[CE]  variable  subtypeVarAssigns  is  already  defined  in  method  getTypeArguments(ParameterizedType,Class<?>,Map<TypeVariable<?>,Type>)	17	None	replace
74	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);  [CE]  cannot  find  symbol  typeArgs  [FE]                AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  typeArgs);	      Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol  typeArgs	5	None	replace
75	[BUG]  [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]      if  (!isAssignable(cls,  toClass))  {  return  null;  }  Type  ownerType  =  parameterizedType.getOwnerType();  Map<TypeVariable<?>,  Type>  typeVarAssigns;  if  (ownerType  instanceof  ParameterizedType)  {      [BUGGY]  Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType);  [BUGGY]    ParameterizedType  parameterizedOwnerType  =  (ParameterizedType)  ownerType;  typeVarAssigns  =  getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType),  subtypeVarAssigns);  }  else  {  typeVarAssigns  =  subtypeVarAssigns  ==  null  ?  new  HashMap<TypeVariable<?>,  Type>()  :  new  HashMap<TypeVariable<?>,  Type>(subtypeVarAssigns);  }  Type[]  typeArgs  =  parameterizedType.getActualTypeArguments();  [CLASS]  TypeUtils  [METHOD]  getTypeArguments  [RETURN_TYPE]  Map  ParameterizedType  parameterizedType  Class<?>  toClass  Type>  subtypeVarAssigns  [VARIABLES]  ParameterizedType  parameterizedOwnerType  parameterizedType  Type  ownerType  typeArg  boolean  Type[]  typeArgs  Class  cls  toClass  TypeVariable[]  typeParams  Map  subtypeVarAssigns  typeVarAssigns  int  i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	Type[]  subtypeParams  =  getTypeParameters(toClass,  toClass,  ownerType);	      Type[]    subtypeParams    =    getTypeParameters(toClass,    toClass);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
