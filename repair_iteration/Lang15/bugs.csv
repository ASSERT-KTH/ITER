bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; [FE] AssertionError [CONTEXT]  if (!isAssignable(cls, toClass)) { return null; } Type ownerType = parameterizedType.getOwnerType(); Map<TypeVariable<?>, Type> typeVarAssigns; if (ownerType instanceof ParameterizedType) {  [BUGGY] ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; [BUGGY] typeVarAssigns = getTypeArguments(parameterizedOwnerType, getRawType(parameterizedOwnerType), subtypeVarAssigns); } else {  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); }  Type[] typeArgs = parameterizedType.getActualTypeArguments(); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (!isAssignable(cls, toClass)) { return null; } Type ownerType = parameterizedType.getOwnerType(); Map<TypeVariable<?>, Type> typeVarAssigns; if (ownerType instanceof ParameterizedType) {  [BUGGY] [BUGGY] ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; typeVarAssigns = getTypeArguments(parameterizedOwnerType, getRawType(parameterizedOwnerType), subtypeVarAssigns); } else {  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); }  Type[] typeArgs = parameterizedType.getActualTypeArguments(); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	612	612	2	add	
3	[BUG] [BUGGY] typeVarAssigns = getTypeArguments(parameterizedOwnerType,  getRawType(parameterizedOwnerType), subtypeVarAssigns); [FE] AssertionError [CONTEXT] if (!isAssignable(cls, toClass)) { return null; } Type ownerType = parameterizedType.getOwnerType(); Map<TypeVariable<?>, Type> typeVarAssigns; if (ownerType instanceof ParameterizedType) {  ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; [BUGGY] typeVarAssigns = getTypeArguments(parameterizedOwnerType,     getRawType(parameterizedOwnerType), subtypeVarAssigns); [BUGGY] getRawType(parameterizedOwnerType), subtypeVarAssigns); } else {  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); }  Type[] typeArgs = parameterizedType.getActualTypeArguments();  [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (!isAssignable(cls, toClass)) { return null; } Type ownerType = parameterizedType.getOwnerType(); Map<TypeVariable<?>, Type> typeVarAssigns; if (ownerType instanceof ParameterizedType) {  ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; [BUGGY] [BUGGY] typeVarAssigns = getTypeArguments(parameterizedOwnerType,     getRawType(parameterizedOwnerType), subtypeVarAssigns); getRawType(parameterizedOwnerType), subtypeVarAssigns); } else {  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); }  Type[] typeArgs = parameterizedType.getActualTypeArguments();  [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	613	614	2	add	
5	[BUG] [BUGGY] } else { [FE] AssertionError [CONTEXT] if (ownerType instanceof ParameterizedType) {  ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; typeVarAssigns = getTypeArguments(parameterizedOwnerType, getRawType(parameterizedOwnerType), subtypeVarAssigns); [BUGGY] } else { [BUGGY]  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (ownerType instanceof ParameterizedType) {  ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType; typeVarAssigns = getTypeArguments(parameterizedOwnerType, getRawType(parameterizedOwnerType), subtypeVarAssigns); [BUGGY] [BUGGY] } else {  typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  ParameterizedType parameterizedType Class<?> toClass Type> subtypeVarAssigns [VARIABLES] ParameterizedType parameterizedOwnerType parameterizedType Type ownerType typeArg boolean Type[] typeArgs Class cls toClass TypeVariable[] typeParams Map subtypeVarAssigns typeVarAssigns int i  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	1.0	615	615	2	add	
7	[BUG] [BUGGY] return typeVarAssigns; [FE] AssertionError [CONTEXT]  cls = ClassUtils.primitiveToWrapper(cls); }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { [BUGGY] return typeVarAssigns; [BUGGY] }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.8164965809277261	676	676	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  cls = ClassUtils.primitiveToWrapper(cls); }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { [BUGGY] [BUGGY] return typeVarAssigns; }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.8164965809277261	676	676	2	add	
9	[BUG] [BUGGY] return isAssignable(type, (GenericArrayType) toType, typeVarAssigns); [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { if (toType == null || toType instanceof Class<?>) { return isAssignable(type, (Class<?>) toType); } if (toType instanceof ParameterizedType) { return isAssignable(type, (ParameterizedType) toType, typeVarAssigns); } if (toType instanceof GenericArrayType) { [BUGGY] return isAssignable(type, (GenericArrayType) toType, typeVarAssigns); [BUGGY] } if (toType instanceof WildcardType) { return isAssignable(type, (WildcardType) toType, typeVarAssigns); }  if (toType instanceof TypeVariable<?>) { return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns); } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Type toType Type> typeVarAssigns [VARIABLES] Type toType type boolean Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	88	88	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { if (toType == null || toType instanceof Class<?>) { return isAssignable(type, (Class<?>) toType); } if (toType instanceof ParameterizedType) { return isAssignable(type, (ParameterizedType) toType, typeVarAssigns); } if (toType instanceof GenericArrayType) { [BUGGY] [BUGGY] return isAssignable(type, (GenericArrayType) toType, typeVarAssigns); } if (toType instanceof WildcardType) { return isAssignable(type, (WildcardType) toType, typeVarAssigns); }  if (toType instanceof TypeVariable<?>) { return isAssignable(type, (TypeVariable<?>) toType, typeVarAssigns); } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Type toType Type> typeVarAssigns [VARIABLES] Type toType type boolean Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	88	88	2	add	
11	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] private static boolean isAssignable(Type type, Class<?> toClass) { if (type == null) {  return toClass == null || !toClass.isPrimitive(); }   if (toClass == null) { [BUGGY] return false; [BUGGY] }  if (toClass.equals(type)) { return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	121	121	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] private static boolean isAssignable(Type type, Class<?> toClass) { if (type == null) {  return toClass == null || !toClass.isPrimitive(); }   if (toClass == null) { [BUGGY] [BUGGY] return false; }  if (toClass.equals(type)) { return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	121	121	2	add	
13	[BUG] [BUGGY] if (type instanceof ParameterizedType) { [FE] AssertionError [CONTEXT]  if (toClass.equals(type)) { return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); } [BUGGY] if (type instanceof ParameterizedType) { [BUGGY]  return isAssignable(getRawType((ParameterizedType) type), toClass); }  if (type instanceof TypeVariable<?>) {   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	134	134	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (toClass.equals(type)) { return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); } [BUGGY] [BUGGY] if (type instanceof ParameterizedType) {  return isAssignable(getRawType((ParameterizedType) type), toClass); }  if (type instanceof TypeVariable<?>) {   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	134	134	2	add	
15	[BUG] [BUGGY] return isAssignable(getRawType((ParameterizedType) type), toClass); [FE] AssertionError [CONTEXT] return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); } if (type instanceof ParameterizedType) {  [BUGGY] return isAssignable(getRawType((ParameterizedType) type), toClass); [BUGGY] }  if (type instanceof TypeVariable<?>) {   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { return true; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	136	136	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return true; } if (type instanceof Class<?>) {  return ClassUtils.isAssignable((Class<?>) type, toClass); } if (type instanceof ParameterizedType) {  [BUGGY] [BUGGY] return isAssignable(getRawType((ParameterizedType) type), toClass); }  if (type instanceof TypeVariable<?>) {   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { return true; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	136	136	2	add	
17	[BUG] [BUGGY] if (type instanceof TypeVariable<?>) { [FE] AssertionError [CONTEXT]  return ClassUtils.isAssignable((Class<?>) type, toClass); } if (type instanceof ParameterizedType) {  return isAssignable(getRawType((ParameterizedType) type), toClass); }  [BUGGY] if (type instanceof TypeVariable<?>) { [BUGGY]   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { return true; } } return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	140	140	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  return ClassUtils.isAssignable((Class<?>) type, toClass); } if (type instanceof ParameterizedType) {  return isAssignable(getRawType((ParameterizedType) type), toClass); }  [BUGGY] [BUGGY] if (type instanceof TypeVariable<?>) {   for (Type bound : ((TypeVariable<?>) type).getBounds()) { if (isAssignable(bound, toClass)) { return true; } } return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	140	140	2	add	
19	[BUG] [BUGGY] if (type instanceof GenericArrayType) { [FE] AssertionError [CONTEXT] if (isAssignable(bound, toClass)) { return true; } } return false; }   [BUGGY] if (type instanceof GenericArrayType) { [BUGGY] return toClass.equals(Object.class) || toClass.isArray() && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass .getComponentType()); }   if (type instanceof WildcardType) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	154	154	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (isAssignable(bound, toClass)) { return true; } } return false; }   [BUGGY] [BUGGY] if (type instanceof GenericArrayType) { return toClass.equals(Object.class) || toClass.isArray() && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass .getComponentType()); }   if (type instanceof WildcardType) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	154	154	2	add	
21	[BUG] [BUGGY] return toClass.equals(Object.class)  || toClass.isArray()   && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass [FE] AssertionError [CONTEXT] return true; } } return false; }   if (type instanceof GenericArrayType) { [BUGGY] return toClass.equals(Object.class)     || toClass.isArray()          && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass [BUGGY] || toClass.isArray() && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass .getComponentType()); }   if (type instanceof WildcardType) { return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	155	157	2	replace	
22	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return true; } } return false; }   if (type instanceof GenericArrayType) { [BUGGY] [BUGGY] return toClass.equals(Object.class)     || toClass.isArray()          && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass || toClass.isArray() && isAssignable(((GenericArrayType) type).getGenericComponentType(), toClass .getComponentType()); }   if (type instanceof WildcardType) { return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Class<?> toClass [VARIABLES] Type bound type boolean Class toClass  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	155	157	2	add	
23	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] }   if (toParameterizedType == null) { return false; }  if (toParameterizedType.equals(type)) { [BUGGY] return true; [BUGGY] }  Class<?> toClass = getRawType(toParameterizedType);   Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);  if (fromTypeVarAssigns == null) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type ParameterizedType toParameterizedType Type> typeVarAssigns [VARIABLES] ParameterizedType toParameterizedType Type fromTypeArg toTypeArg type Entry entry boolean Class toClass Map fromTypeVarAssigns toTypeVarAssigns typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	193	193	2	replace	
24	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }   if (toParameterizedType == null) { return false; }  if (toParameterizedType.equals(type)) { [BUGGY] [BUGGY] return true; }  Class<?> toClass = getRawType(toParameterizedType);   Map<TypeVariable<?>, Type> fromTypeVarAssigns = getTypeArguments(type, toClass, null);  if (fromTypeVarAssigns == null) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type ParameterizedType toParameterizedType Type> typeVarAssigns [VARIABLES] ParameterizedType toParameterizedType Type fromTypeArg toTypeArg type Entry entry boolean Class toClass Map fromTypeVarAssigns toTypeVarAssigns typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	193	193	2	add	
25	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT]  if (fromTypeVarAssigns == null) { return false; }    if (fromTypeVarAssigns.isEmpty()) { [BUGGY] return true; [BUGGY] }  Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType, toClass, typeVarAssigns);  for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) { Type toTypeArg = entry.getValue(); Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey()); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type ParameterizedType toParameterizedType Type> typeVarAssigns [VARIABLES] ParameterizedType toParameterizedType Type fromTypeArg toTypeArg type Entry entry boolean Class toClass Map fromTypeVarAssigns toTypeVarAssigns typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	replace	
26	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (fromTypeVarAssigns == null) { return false; }    if (fromTypeVarAssigns.isEmpty()) { [BUGGY] [BUGGY] return true; }  Map<TypeVariable<?>, Type> toTypeVarAssigns = getTypeArguments(toParameterizedType, toClass, typeVarAssigns);  for (Map.Entry<TypeVariable<?>, Type> entry : toTypeVarAssigns.entrySet()) { Type toTypeArg = entry.getValue(); Type fromTypeArg = fromTypeVarAssigns.get(entry.getKey()); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type ParameterizedType toParameterizedType Type> typeVarAssigns [VARIABLES] ParameterizedType toParameterizedType Type fromTypeArg toTypeArg type Entry entry boolean Class toClass Map fromTypeVarAssigns toTypeVarAssigns typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	211	211	2	add	
27	[BUG] [BUGGY] if (type == null) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { [BUGGY] if (type == null) { [BUGGY] return true; }   if (toGenericArrayType == null) { return false; }   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	262	262	2	replace	
28	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { [BUGGY] [BUGGY] if (type == null) { return true; }   if (toGenericArrayType == null) { return false; }   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	262	262	2	add	
29	[BUG] [BUGGY] if (toGenericArrayType == null) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { if (type == null) { return true; }   [BUGGY] if (toGenericArrayType == null) { [BUGGY] return false; }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType();  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	268	268	2	replace	
30	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> typeVarAssigns) { if (type == null) { return true; }   [BUGGY] [BUGGY] if (toGenericArrayType == null) { return false; }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType();  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	268	268	2	add	
31	[BUG] [BUGGY] if (toGenericArrayType.equals(type)) { [FE] AssertionError [CONTEXT] return true; }   if (toGenericArrayType == null) { return false; }  [BUGGY] if (toGenericArrayType.equals(type)) { [BUGGY] return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	273	273	2	replace	
32	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return true; }   if (toGenericArrayType == null) { return false; }  [BUGGY] [BUGGY] if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	273	273	2	add	
33	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT] }   if (toGenericArrayType == null) { return false; }  if (toGenericArrayType.equals(type)) { [BUGGY] return true; [BUGGY] } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	274	274	2	replace	
34	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }   if (toGenericArrayType == null) { return false; }  if (toGenericArrayType.equals(type)) { [BUGGY] [BUGGY] return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	274	274	2	add	
35	[BUG] [BUGGY] Type toComponentType = toGenericArrayType.getGenericComponentType(); [FE] AssertionError [CONTEXT]  if (toGenericArrayType == null) { return false; }  if (toGenericArrayType.equals(type)) { return true; } [BUGGY] Type toComponentType = toGenericArrayType.getGenericComponentType(); [BUGGY]  if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	277	277	2	replace	
36	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (toGenericArrayType == null) { return false; }  if (toGenericArrayType.equals(type)) { return true; } [BUGGY] [BUGGY] Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	277	277	2	add	
37	[BUG] [BUGGY] if (type instanceof Class<?>) { [FE] AssertionError [CONTEXT] return false; }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); [BUGGY] if (type instanceof Class<?>) { [BUGGY] Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	279	279	2	replace	
38	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] return false; }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); [BUGGY] [BUGGY] if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	279	279	2	add	
39	[BUG] [BUGGY] Class<?> cls = (Class<?>) type; [FE] AssertionError [CONTEXT] }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { [BUGGY] Class<?> cls = (Class<?>) type; [BUGGY]   return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	280	280	2	replace	
40	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] }  if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { [BUGGY] [BUGGY] Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	280	280	2	add	
41	[BUG] [BUGGY] return cls.isArray()  && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); [FE] AssertionError [CONTEXT] if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  [BUGGY] return cls.isArray()     && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); [BUGGY] && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); } if (type instanceof WildcardType) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	283	284	2	replace	
42	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (toGenericArrayType.equals(type)) { return true; } Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  [BUGGY] [BUGGY] return cls.isArray()     && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); } if (type instanceof WildcardType) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	283	284	2	add	
43	[BUG] [BUGGY] if (type instanceof GenericArrayType) { [FE] AssertionError [CONTEXT] Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } [BUGGY] if (type instanceof GenericArrayType) { [BUGGY]  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); } if (type instanceof WildcardType) {  for (Type bound : getImplicitUpperBounds((WildcardType) type)) { if (isAssignable(bound, toGenericArrayType)) { return true; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	287	287	2	replace	
44	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Type toComponentType = toGenericArrayType.getGenericComponentType(); if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } [BUGGY] [BUGGY] if (type instanceof GenericArrayType) {  return isAssignable(((GenericArrayType) type).getGenericComponentType(), toComponentType, typeVarAssigns); } if (type instanceof WildcardType) {  for (Type bound : getImplicitUpperBounds((WildcardType) type)) { if (isAssignable(bound, toGenericArrayType)) { return true; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	287	287	2	add	
45	[BUG] [BUGGY] return isAssignable(((GenericArrayType) type).getGenericComponentType(),  toComponentType, typeVarAssigns); [FE] AssertionError [CONTEXT] if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  [BUGGY] return isAssignable(((GenericArrayType) type).getGenericComponentType(),     toComponentType, typeVarAssigns); [BUGGY] toComponentType, typeVarAssigns); } if (type instanceof WildcardType) {  for (Type bound : getImplicitUpperBounds((WildcardType) type)) { if (isAssignable(bound, toGenericArrayType)) { return true; } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	289	290	2	replace	
46	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (type instanceof Class<?>) { Class<?> cls = (Class<?>) type;  return cls.isArray() && isAssignable(cls.getComponentType(), toComponentType, typeVarAssigns); } if (type instanceof GenericArrayType) {  [BUGGY] [BUGGY] return isAssignable(((GenericArrayType) type).getGenericComponentType(),     toComponentType, typeVarAssigns); toComponentType, typeVarAssigns); } if (type instanceof WildcardType) {  for (Type bound : getImplicitUpperBounds((WildcardType) type)) { if (isAssignable(bound, toGenericArrayType)) { return true; } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type GenericArrayType toGenericArrayType Type> typeVarAssigns [VARIABLES] Type bound toComponentType type boolean Class cls GenericArrayType toGenericArrayType Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	289	290	2	add	
47	[BUG] [BUGGY] WildcardType wildcardType = (WildcardType) type; [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { [BUGGY] WildcardType wildcardType = (WildcardType) type; [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	357	357	2	replace	
48	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { [BUGGY] [BUGGY] WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	357	357	2	add	
49	[BUG] [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); [BUGGY] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);     [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	replace	
50	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; [BUGGY] [BUGGY] Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);     [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	358	358	2	add	
51	[BUG] [BUGGY] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); [FE] AssertionError [CONTEXT] if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); [BUGGY] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); [BUGGY]  for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	replace	
52	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] if (toWildcardType.equals(type)) { return true; } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); [BUGGY] [BUGGY] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	359	359	2	add	
53	[BUG] [BUGGY] for (Type toBound : toUpperBounds) { [FE] AssertionError [CONTEXT] } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); [BUGGY] for (Type toBound : toUpperBounds) { [BUGGY]   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	replace	
54	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } Type[] toUpperBounds = getImplicitUpperBounds(toWildcardType); Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); [BUGGY] [BUGGY] for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	361	361	2	add	
55	[BUG] [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns); [FE] AssertionError [CONTEXT] Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns); [BUGGY]     for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	replace	
56	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Type[] toLowerBounds = getImplicitLowerBounds(toWildcardType); if (type instanceof WildcardType) { WildcardType wildcardType = (WildcardType) type; Type[] upperBounds = getImplicitUpperBounds(wildcardType); Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   [BUGGY] [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	364	364	2	add	
57	[BUG] [BUGGY] for (Type bound : upperBounds) { [FE] AssertionError [CONTEXT] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [BUGGY] for (Type bound : upperBounds) { [BUGGY] if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	replace	
58	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Type[] lowerBounds = getImplicitLowerBounds(wildcardType); for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [BUGGY] [BUGGY] for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns); [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	369	369	2	add	
59	[BUG] [BUGGY] if (!isAssignable(bound, toBound, typeVarAssigns)) { [FE] AssertionError [CONTEXT] for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { [BUGGY] if (!isAssignable(bound, toBound, typeVarAssigns)) { [BUGGY] return false; } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	370	370	2	replace	
60	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { [BUGGY] [BUGGY] if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	370	370	2	add	
61	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { [BUGGY] return false; [BUGGY] } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	replace	
62	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (Type toBound : toUpperBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { [BUGGY] [BUGGY] return false; } } } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	371	371	2	add	
63	[BUG] [BUGGY] for (Type toBound : toLowerBounds) { [FE] AssertionError [CONTEXT]    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } [BUGGY] for (Type toBound : toLowerBounds) { [BUGGY]   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	376	376	2	replace	
64	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]    for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } [BUGGY] [BUGGY] for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	376	376	2	add	
65	[BUG] [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns); [FE] AssertionError [CONTEXT] for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } for (Type toBound : toLowerBounds) {   [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns); [BUGGY]     for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	379	379	2	replace	
66	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (Type bound : upperBounds) { if (!isAssignable(bound, toBound, typeVarAssigns)) { return false; } } } for (Type toBound : toLowerBounds) {   [BUGGY] [BUGGY] toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	379	379	2	add	
67	[BUG] [BUGGY] for (Type bound : lowerBounds) { [FE] AssertionError [CONTEXT] } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [BUGGY] for (Type bound : lowerBounds) { [BUGGY] if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } return true; } for (Type toBound : toUpperBounds) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	replace	
68	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    [BUGGY] [BUGGY] for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } return true; } for (Type toBound : toUpperBounds) { [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	384	384	2	add	
69	[BUG] [BUGGY] if (!isAssignable(toBound, bound, typeVarAssigns)) { [FE] AssertionError [CONTEXT] for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { [BUGGY] if (!isAssignable(toBound, bound, typeVarAssigns)) { [BUGGY] return false; } } } return true; } for (Type toBound : toUpperBounds) {  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	
70	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { [BUGGY] [BUGGY] if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } return true; } for (Type toBound : toUpperBounds) {  [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	add	
71	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { [BUGGY] return false; [BUGGY] } } } return true; } for (Type toBound : toUpperBounds) {   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	replace	
72	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] for (Type toBound : toLowerBounds) {   toBound = substituteTypeVariables(toBound, typeVarAssigns);    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { [BUGGY] [BUGGY] return false; } } } return true; } for (Type toBound : toUpperBounds) {   [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	386	386	2	add	
73	[BUG] [BUGGY] return true; [FE] AssertionError [CONTEXT]    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } [BUGGY] return true; [BUGGY] } for (Type toBound : toUpperBounds) {   if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns)) { return false; } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	391	391	2	replace	
74	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]    for (Type bound : lowerBounds) { if (!isAssignable(toBound, bound, typeVarAssigns)) { return false; } } } [BUGGY] [BUGGY] return true; } for (Type toBound : toUpperBounds) {   if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns)) { return false; } } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	391	391	2	add	
75	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] } return true; } for (Type toBound : toUpperBounds) {   if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns)) { [BUGGY] return false; [BUGGY] } } for (Type toBound : toLowerBounds) {   if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns)) { return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	399	399	2	replace	
76	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] } return true; } for (Type toBound : toUpperBounds) {   if (!isAssignable(type, substituteTypeVariables(toBound, typeVarAssigns), typeVarAssigns)) { [BUGGY] [BUGGY] return false; } } for (Type toBound : toLowerBounds) {   if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns)) { return false; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	399	399	2	add	
77	[BUG] [BUGGY] return false; [FE] AssertionError [CONTEXT] typeVarAssigns)) { return false; } } for (Type toBound : toLowerBounds) {   if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns)) { [BUGGY] return false; [BUGGY] } } return true; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	408	408	2	replace	
78	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] typeVarAssigns)) { return false; } } for (Type toBound : toLowerBounds) {   if (!isAssignable(substituteTypeVariables(toBound, typeVarAssigns), type, typeVarAssigns)) { [BUGGY] [BUGGY] return false; } } return true; } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type WildcardType toWildcardType Type> typeVarAssigns [VARIABLES] Type bound toBound type WildcardType toWildcardType wildcardType boolean Type[] lowerBounds toLowerBounds toUpperBounds upperBounds Map typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	408	408	2	add	
79	[BUG] [BUGGY] if (toClass.isPrimitive()) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  if (!isAssignable(cls, toClass)) { return null; }  if (cls.isPrimitive()) {  [BUGGY] if (toClass.isPrimitive()) { [BUGGY]   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); }   [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	660	660	2	replace	
80	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  if (!isAssignable(cls, toClass)) { return null; }  if (cls.isPrimitive()) {  [BUGGY] [BUGGY] if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); }   [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	660	660	2	add	
81	[BUG] [BUGGY] cls = ClassUtils.primitiveToWrapper(cls); [FE] AssertionError [CONTEXT]  if (cls.isPrimitive()) {  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); }  [BUGGY] cls = ClassUtils.primitiveToWrapper(cls); [BUGGY] }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { return typeVarAssigns; } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	667	667	2	replace	
82	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  if (cls.isPrimitive()) {  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); }  [BUGGY] [BUGGY] cls = ClassUtils.primitiveToWrapper(cls); }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { return typeVarAssigns; } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	667	667	2	add	
83	[BUG] [BUGGY] if (type instanceof Class<?>) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { [BUGGY] if (type instanceof Class<?>) { [BUGGY] return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } if (type instanceof ParameterizedType) { return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	547	547	2	replace	
84	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { [BUGGY] [BUGGY] if (type instanceof Class<?>) { return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } if (type instanceof ParameterizedType) { return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	547	547	2	add	
85	[BUG] [BUGGY] return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { [BUGGY] return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); [BUGGY] } if (type instanceof ParameterizedType) { return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	548	548	2	replace	
86	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { [BUGGY] [BUGGY] return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } if (type instanceof ParameterizedType) { return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	548	548	2	add	
87	[BUG] [BUGGY] if (type instanceof ParameterizedType) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } [BUGGY] if (type instanceof ParameterizedType) { [BUGGY] return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); }    [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	551	551	2	replace	
88	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } [BUGGY] [BUGGY] if (type instanceof ParameterizedType) { return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); }    [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	551	551	2	add	
89	[BUG] [BUGGY] return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } if (type instanceof ParameterizedType) { [BUGGY] return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); [BUGGY] } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); }   if (type instanceof WildcardType) { [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	552	552	2	replace	
90	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) { if (type instanceof Class<?>) { return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns); } if (type instanceof ParameterizedType) { [BUGGY] [BUGGY] return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns); } if (type instanceof GenericArrayType) { return getTypeArguments(((GenericArrayType) type).getGenericComponentType(), toClass .isArray() ? toClass.getComponentType() : toClass, subtypeVarAssigns); }   if (type instanceof WildcardType) { [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Type type Class<?> toClass Type> subtypeVarAssigns [VARIABLES] Type bound type boolean Class toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	552	552	2	add	
91	[BUG] [BUGGY] if (!isAssignable(cls, toClass)) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  [BUGGY] if (!isAssignable(cls, toClass)) { [BUGGY] return null; }  if (cls.isPrimitive()) {  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	653	653	2	replace	
92	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  [BUGGY] [BUGGY] if (!isAssignable(cls, toClass)) { return null; }  if (cls.isPrimitive()) {  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	653	653	2	add	
93	[BUG] [BUGGY] if (cls.isPrimitive()) { [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  if (!isAssignable(cls, toClass)) { return null; }  [BUGGY] if (cls.isPrimitive()) { [BUGGY]  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	658	658	2	replace	
94	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] Map<TypeVariable<?>, Type> subtypeVarAssigns) {  if (!isAssignable(cls, toClass)) { return null; }  [BUGGY] [BUGGY] if (cls.isPrimitive()) {  if (toClass.isPrimitive()) {   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	658	658	2	add	
95	[BUG] [BUGGY] HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); [FE] AssertionError [CONTEXT]   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); }  [BUGGY] HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); [BUGGY] : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { return typeVarAssigns; }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	671	672	2	replace	
96	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]   return new HashMap<TypeVariable<?>, Type>(); }  cls = ClassUtils.primitiveToWrapper(cls); }  [BUGGY] [BUGGY] HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()    : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns); : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { return typeVarAssigns; }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	671	672	2	add	
97	[BUG] [BUGGY] if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { [FE] AssertionError [CONTEXT]  cls = ClassUtils.primitiveToWrapper(cls); }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  [BUGGY] if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { [BUGGY] return typeVarAssigns; }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	675	675	2	replace	
98	[BUG] [BUGGY] [FE] AssertionError [CONTEXT]  cls = ClassUtils.primitiveToWrapper(cls); }  HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>() : new HashMap<TypeVariable<?>, Type>(subtypeVarAssigns);  [BUGGY] [BUGGY] if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) { return typeVarAssigns; }  return getTypeArguments(getClosestParentType(cls, toClass), toClass, typeVarAssigns); } [CLASS] TypeUtils [METHOD] getTypeArguments [RETURN_TYPE] Map  Class<?> cls Class<?> toClass Type> subtypeVarAssigns [VARIABLES] boolean HashMap typeVarAssigns Class cls toClass Map subtypeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.6324555320336759	675	675	2	add	
99	[BUG] [BUGGY] return isAssignable(type, toType, null); [FE] AssertionError [CONTEXT] public static boolean isAssignable(Type type, Type toType) { [BUGGY] return isAssignable(type, toType, null); [BUGGY] } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Type toType [VARIABLES] Type toType type boolean  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.5773502691896258	65	65	2	replace	
100	[BUG] [BUGGY] [FE] AssertionError [CONTEXT] public static boolean isAssignable(Type type, Type toType) { [BUGGY] [BUGGY] return isAssignable(type, toType, null); } [CLASS] TypeUtils [METHOD] isAssignable [RETURN_TYPE] boolean  Type type Type toType [VARIABLES] Type toType type boolean  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.5773502691896258	65	65	2	add	
