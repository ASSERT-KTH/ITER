bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  bound.getTypes();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  bound.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  bound.getTypes();	      Type[]    toLowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
2	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  bound.toLowerBounds;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  bound.toLowerBounds;  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  bound.toLowerBounds;	      Type[]    toLowerBounds    =    toLowerBounds.toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toUpperBounds;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toUpperBounds;  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toUpperBounds;	      Type[]    toLowerBounds    =    toLowerBounds.toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds;  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds;	      Type[]    toLowerBounds    =    toLowerBounds.toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toLowerBounds,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	6	None	replace
6	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  toUpperBounds,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  toUpperBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(toBound,  toLowerBounds,  toUpperBounds,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[],Map<TypeVariable<?>,Type>)	6	None	replace
7	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toUpperBounds,  toLowerBounds,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[],Map<TypeVariable<?>,Type>)  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toUpperBounds,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(toBound,  toUpperBounds,  toLowerBounds,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type[],Map<TypeVariable<?>,Type>)	6	None	replace
8	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  bound,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type,Map<TypeVariable<?>,Type>)  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  bound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(toBound,  toLowerBounds,  bound,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Type,Map<TypeVariable<?>,Type>)	6	None	replace
9	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
10	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
11	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  If  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  If  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    If  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {	  	non-compiled	[CE]  ';'  expected	7	None	add
12	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  types))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  types))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    if  (!isAssignable(toBound,  toWildcardType,  types))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
13	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  bound.toArray();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  bound.toArray();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  bound.toArray();	      Type[]    toLowerBounds    =    toLowerBounds.toArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
14	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds  ==  null?  null  :  toLowerBounds.toArray();  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds  ==  null?  null  :  toLowerBounds.toArray();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds  ==  null?  null  :  toLowerBounds.toArray();	      Type[]    toLowerBounds    =    toLowerBounds.toArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
15	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet();	      Type[]    upperBounds    =    toLowerBounds.keySet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
16	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.keySet();	      Type[]    upperBounds    =    toLowerBounds.keySet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
17	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.keySet();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.keySet();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toUpperBounds  =  toLowerBounds.keySet();	      Type[]    upperBounds    =    toLowerBounds.keySet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
18	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.keySet().toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
19	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[bound.size()  ]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[bound.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[bound.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.keySet().toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
20	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    lowerBounds    =    toLowerBounds.keySet().toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
21	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
22	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  +  1]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
23	[BUG]  [BUGGY]  Type[]  lowerBounds  =  bound.getTypes();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  bound.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  bound.getTypes();	      Type[]    lowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
24	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.getRawTypes();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.getRawTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.getRawTypes();	      Type[]    lowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
25	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toUpperBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
26	[BUG]  [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.getTypes();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toUpperBounds  =  toLowerBounds.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toUpperBounds  =  toLowerBounds.getTypes();	      Type[]    upperBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
27	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
28	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[size()  -  1]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
29	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[bound.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
30	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
31	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  If  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  If  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    If  (!isAssignable(bound,  toBound,  typeVarAssigns))  {	  	non-compiled	[CE]  ';'  expected	13	None	add
32	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignable(bound,  toBound,  typesVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignable(bound,  toBound,  typesVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    if  (!isAssignable(bound,  toBound,  typesVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
33	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[toLowerBounds.size()  +  1]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  bound.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
35	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  toUpperBounds))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  toUpperBounds))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toBound,  toUpperBounds))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	14	None	replace
36	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  toLowerBounds))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  toLowerBounds))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toBound,  toLowerBounds))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	14	None	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	add	if  (!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	compilable	  [FE]  AssertionError  	8	2	replace
38	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toWildcardType,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	compilable	  [FE]  AssertionError  	8	2	replace
39	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(toBound,  toLowerBounds,  typeVarAssigns)||!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type[],Map<TypeVariable<?>,Type>)	8	None	replace
40	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.values();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.values();	      Type[]    upperBounds    =    toLowerBounds.keySet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
41	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.keySet();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toUpperBounds.keySet();	      Type[]    upperBounds    =    toLowerBounds.keySet();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
42	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[lowerBounds.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
43	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[highBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[highBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[highBounds.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
44	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toUpperBounds();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toUpperBounds();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.toUpperBounds();	      Type[]    upperBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  Type[]  upperBounds  =  toUpperBounds.getTypes();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toUpperBounds.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toUpperBounds.getTypes();	      Type[]    upperBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  toLowerBounds,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[],Map<TypeVariable<?>,Type>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toBound,  toLowerBounds,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[],Map<TypeVariable<?>,Type>)	6	None	replace
47	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  bound,  toLowerBounds,  typeVarAssigns))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[],Map<TypeVariable<?>,Type>)  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  bound,  toLowerBounds,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(toBound,  bound,  toLowerBounds,  typeVarAssigns))  {	  if    (!isAssignable(toBound,    toLowerBounds,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[],Map<TypeVariable<?>,Type>)	6	None	replace
48	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[length()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[size()    ]);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
50	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toUpperBounds();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toUpperBounds();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.toUpperBounds();	      Type[]    lowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  lowerBounds))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  lowerBounds))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toBound,  lowerBounds))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	14	None	replace
52	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns,  false))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,boolean)  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns,  false))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if  (!isAssignable(bound,  toBound,  typeVarAssigns,  false))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,boolean)	14	None	replace
53	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    upperBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray(new    Type[typeVarAssigns.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  typesVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssignable(toBound,  toWildcardType,  typesVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    if  (!isAssignable(toBound,  toWildcardType,  typesVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
56	[BUG]  [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  toLowerBounds.keySet().toArray(new  Type[toLowerBounds.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.keySet().toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toLowerBounds;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.toLowerBounds;  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toUpperBounds.toLowerBounds;	      Type[]    toLowerBounds    =    toLowerBounds.toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
58	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toWildcardType.toLowerBounds;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toWildcardType.toLowerBounds;  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toWildcardType.toLowerBounds;	      Type[]    toLowerBounds    =    toLowerBounds.toLowerBounds;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
59	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.getTypes();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toUpperBounds.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toUpperBounds.getTypes();	      Type[]    toLowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.toArray(new  Type[size()  ]);	      Type[]    toLowerBounds    =    toLowerBounds.toArray();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
62	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if(!isAssignable(bound,  toBound,  upperBounds))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if(!isAssignable(bound,  toBound,  upperBounds))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Type[])	14	None	replace
63	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns,  wildcardType))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,WildcardType)  [FE]      AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns,  wildcardType))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns,  wildcardType))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,WildcardType)	14	None	replace
64	[BUG]  [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns,  null))  {  [CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,<null>)  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if(!isAssignable(bound,  toBound,  typeVarAssigns,  null))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if(!isAssignable(bound,  toBound,  typeVarAssigns,  null))  {	  if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    	non-compiled	[CE]  no  suitable  method  found  for  isAssignable(Type,Type,Map<TypeVariable<?>,Type>,<null>)	14	None	replace
65	[BUG]  [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[typeVarAssigns.size()  ]);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[typeVarAssigns.size()  ]);  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  lowerBounds  =  toLowerBounds.keySet().toArray(new  Type[typeVarAssigns.size()  ]);	      Type[]    lowerBounds    =    toLowerBounds.keySet().toArray(new    Type[toLowerBounds.size()    ]);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignedable(bound,  toBound,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(bound,  toBound,  typeVarAssigns))  {  if  (!isAssignedable(bound,  toBound,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(bound,    toBound,    typeVarAssigns))    {    if  (!isAssignedable(bound,  toBound,  typeVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
67	[BUG]  [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.cloneTree();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  toLowerBounds  =  toLowerBounds.cloneTree();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  toLowerBounds  =  toLowerBounds.cloneTree();	      Type[]    toLowerBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssigned(toBound,  toWildcardType,  typeVarAssigns))  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  if  (!isAssignable(toBound,  toWildcardType,  typeVarAssigns))  {  if  (!isAssigned(toBound,  toWildcardType,  typeVarAssigns))  {  [BUGGY]    return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	if    (!isAssignable(toBound,    toWildcardType,    typeVarAssigns))    {    if  (!isAssigned(toBound,  toWildcardType,  typeVarAssigns))  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
69	[BUG]  [BUGGY]  Type[]  upperBounds  =  bound.getTypes();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    for  (Type  toBound  :  toLowerBounds)  {    toBound  =  substituteTypeVariables(toBound,  typeVarAssigns);    for  (Type  bound  :  lowerBounds)  {    [BUGGY]  Type[]  upperBounds  =  bound.getTypes();  [BUGGY]    if  (!isAssignable(toBound,  bound,  typeVarAssigns))  {  return  false;  }  }  }  return  true;  }  for  (Type  toBound  :  toUpperBounds)  {  [CLASS]  TypeUtils  [METHOD]  isAssignable  [RETURN_TYPE]  boolean  Type  type  WildcardType  toWildcardType  Type>  typeVarAssigns  [VARIABLES]  Type  bound  toBound  type  WildcardType  toWildcardType  wildcardType  boolean  Type[]  lowerBounds  toLowerBounds  toUpperBounds  upperBounds  Map  typeVarAssigns  	projects/Lang15/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java	0.7071067811865475	385	385	2	replace	Type[]  upperBounds  =  bound.getTypes();	      Type[]    upperBounds    =    toLowerBounds.getTypes();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
