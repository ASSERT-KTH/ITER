bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  token  =  nextStandardLocal();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextStandardLocal();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextStandardLocal();	  token    =    nextLocal();    	non-compiled	[CE]  	73	None	replace
2	[BUG]  [BUGGY]  token  =  parser.append( "n ").append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "n ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "n ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
3	[BUG]  [BUGGY]  token  =  builder.append( "t ").append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "t ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "t ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
4	[BUG]  [BUGGY]  token  =  builder.append( "u ").append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "u ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "u ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
5	[BUG]  [BUGGY]  token  =  builder.append( "n ".append('n'));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append('n'));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append('n'));	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
6	[BUG]  [BUGGY]  token  =  builder.append( "n ".append('n');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
7	[BUG]  [BUGGY]  token  =  option.getValue();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  option.getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  option.getValue();	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
8	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option.getValue());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option.getValue());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option.getValue());	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
9	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option.getValue());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option.getValue());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option.getValue());	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
10	[BUG]  [BUGGY]  token  =  options.getValue();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  options.getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  options.getValue();	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
11	[BUG]  [BUGGY]  token  =  builder.append( "n ".equals(option.getValue());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".equals(option.getValue());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".equals(option.getValue());	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
12	[BUG]  [BUGGY]  Builder  builder.append( "n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  Builder  builder.append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	Builder  builder.append( "n ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
13	[BUG]  [BUGGY]  builder.append( "n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  builder.append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	builder.append( "n ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
14	[BUG]  [BUGGY]  Builder.append( "n ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  Builder.append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	Builder.append( "n ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
15	[BUG]  [BUGGY]  state  =  State.SEARCHING_NEWLINE;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_NEWLINE;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_NEWLINE;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
16	[BUG]  [BUGGY]  token  =  jsdocBuilder.nextToken();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.nextToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.nextToken();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
17	[BUG]  [BUGGY]  token  =  jsdocBuilder.nextDoc();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.nextDoc();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
18	[BUG]  [BUGGY]  token  =  jsdocBuilder.nextInt();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.nextInt();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.nextInt();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
19	[BUG]  [BUGGY]  token  =  second();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  second();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  second();	  token    =    first();    	non-compiled	[CE]  	21	None	replace
20	[BUG]  [BUGGY]  token  =  this.first();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.first();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.first();	  token    =    first();    	non-compiled	[CE]  	21	None	replace
21	[BUG]  [BUGGY]  token  =  builder.getLineno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.getLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.getLineno();	  token    =    builder.nextLine();    	non-compiled	[CE]  	19	None	replace
22	[BUG]  [BUGGY]  token  =  parser.nextLine();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextLine();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextLine();	  token    =    builder.nextLine();    	non-compiled	[CE]  	19	None	replace
23	[BUG]  [BUGGY]  token  =  builder.nextEOL();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.nextEOL();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.nextEOL();	  token    =    builder.nextLine();    	non-compiled	[CE]  	19	None	replace
24	[BUG]  [BUGGY]  token  =  builder.nextToken()  +  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.nextToken()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.nextToken()  +  1;	  token    =    builder.nextToken();    	non-compiled	[CE]  	16	None	replace
25	[BUG]  [BUGGY]  token  =  builder.appendToken( "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.appendToken( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.appendToken( "n ");	  token    =    builder.nextToken();    	non-compiled	[CE]  	16	None	replace
26	[BUG]  [BUGGY]  token  =  builder.getToken();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.getToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.getToken();	  token    =    builder.nextToken();    	non-compiled	[CE]  	16	None	replace
27	[BUG]  [BUGGY]  token  =  n.next();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  n.next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  n.next();	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
28	[BUG]  [BUGGY]  token  =  builder.toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.toString();	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
29	[BUG]  [BUGGY]  token  =  builder.replaceAll( "n ", "n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replaceAll( "n ", "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replaceAll( "n ", "n ");	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
30	[BUG]  [BUGGY]  token  =  next( "t ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "t ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "t ");	  token    =    next(   "n   ");    	non-compiled	[CE]  	34	None	replace
31	[BUG]  [BUGGY]  token  =  next( "n ".equals(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "n ".equals(option));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "n ".equals(option));	  token    =    next(   "n   ");    	non-compiled	[CE]  	34	None	replace
32	[BUG]  [BUGGY]  token  =  next( "n ".getString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "n ".getString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "n ".getString());	  token    =    next(   "n   ");    	non-compiled	[CE]  	34	None	replace
33	[BUG]  [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN,  unreadToken);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN,  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(NO_UNREAD_TOKEN,  unreadToken);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
34	[BUG]  [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN  +  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(NO_UNREAD_TOKEN  +  1);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
35	[BUG]  [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN)+  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(NO_UNREAD_TOKEN)+  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(NO_UNREAD_TOKEN)+  1;	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
36	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.EOL);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.EOL);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.EOL);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
37	[BUG]  [BUGGY]  token  =  this.nextCharno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextCharno();	  token    =    this.nextLineno();    	non-compiled	[CE]  	76	None	replace
38	[BUG]  [BUGGY]  token  =  this.nextLineno()  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextLineno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextLineno()  -  1;	  token    =    this.nextLineno();    	non-compiled	[CE]  	76	None	replace
39	[BUG]  [BUGGY]  token  =  this.nextLineno()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextLineno()  +  1;	  token    =    this.nextLineno();    	non-compiled	[CE]  	76	None	replace
40	[BUG]  [BUGGY]  token  =  builder.append( ",no ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( ",no ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( ",no ");	  token    =    builder.append(   ",n   ");    	non-compiled	[CE]  	47	None	replace
41	[BUG]  [BUGGY]  token  =  builder.append( "n ",  null);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ",  null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ",  null);	  token    =    builder.append(   ",n   ");    	non-compiled	[CE]  	47	None	replace
42	[BUG]  [BUGGY]  token  =  builder.append( "n ",  true);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ",  true);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ",  true);	  token    =    builder.append(   ",n   ");    	non-compiled	[CE]  	47	None	replace
43	[BUG]  [BUGGY]  token  =  builder.append( "n, ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n, ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n, ");	  token    =    builder.append(   ",n   ");    	non-compiled	[CE]  	47	None	replace
44	[BUG]  [BUGGY]  token  =  nextLineno()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno()  +  1;	  token    =    nextCharno()    +    1;    	non-compiled	[CE]  	59	None	replace
45	[BUG]  [BUGGY]  token  =  nextLocation()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocation()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocation()  +  1;	  token    =    nextCharno()    +    1;    	non-compiled	[CE]  	59	None	replace
46	[BUG]  [BUGGY]  token  =  nextLineno()  /  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno()  /  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno()  /  1;	  token    =    nextCharno()    +    1;    	non-compiled	[CE]  	59	None	replace
47	[BUG]  [BUGGY]  token  =  getToken().toString();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().toString();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
48	[BUG]  [BUGGY]  token  =  getToken().toLowerCase();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().toLowerCase();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().toLowerCase();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
49	[BUG]  [BUGGY]  token  =  getToken().trim();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().trim();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().trim();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
50	[BUG]  [BUGGY]  token  =  getToken().append( "n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().append( "n ");	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
51	[BUG]  [BUGGY]  token  =  getToken()  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken()  -  1;	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
52	[BUG]  [BUGGY]  token  =  next().nextIndividualBlock();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().nextIndividualBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().nextIndividualBlock();	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  token  =  nextState().nextIndividualBlock();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().nextIndividualBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().nextIndividualBlock();	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
54	[BUG]  [BUGGY]  token  =  nextToken().nextIndividualBlock();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().nextIndividualBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().nextIndividualBlock();	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
55	[BUG]  [BUGGY]  token  =  nextIndividualBlock().cloneTree();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().cloneTree();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().cloneTree();	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
56	[BUG]  [BUGGY]  token  =  builder.nextDocument();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.nextDocument();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.nextDocument();	  token    =    this.nextDocument();    	non-compiled	[CE]  	81	None	replace
57	[BUG]  [BUGGY]  token  =  parser.nextDocument();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextDocument();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextDocument();	  token    =    this.nextDocument();    	non-compiled	[CE]  	81	None	replace
58	[BUG]  [BUGGY]  token  =  n.nextDocument();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  n.nextDocument();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  n.nextDocument();	  token    =    this.nextDocument();    	non-compiled	[CE]  	81	None	replace
59	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
60	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
61	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
62	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
63	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
64	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
65	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
66	[BUG]  [BUGGY]  token  =  option.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  option.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  option.toString();	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
67	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option.toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option.toString());	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
68	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option.toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option.toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option.toString());	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
69	[BUG]  [BUGGY]  token  =  options.toString();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  options.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  options.toString();	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
70	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(token));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(token));	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
71	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(token).append( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(token).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(token).append( "n ");	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
72	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(token).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(token).append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(token).append('n');	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
73	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(token).append(unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(token).append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(token).append(unreadToken);	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
74	[BUG]  [BUGGY]  token  =  sourceFile.getNext();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.getNext();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.getNext();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
75	[BUG]  [BUGGY]  token  =  sourceFile.nextToken();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.nextToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.nextToken();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
76	[BUG]  [BUGGY]  token  =  sourceFile.getParent();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.getParent();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.getParent();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
77	[BUG]  [BUGGY]  token  =  sourceFile.getLastChild();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.getLastChild();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.getLastChild();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
78	[BUG]  [BUGGY]  token  =  sourceFile.getSourceName();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.getSourceName();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.getSourceName();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
79	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
80	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
81	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
84	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
85	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
86	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
87	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
88	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
89	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
90	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
91	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option).append( "n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option).append( "n ");	  token    =    builder.append(   "n   ".append(option).append(   "n   ");    	non-compiled	[CE]  	37	None	replace
92	[BUG]  [BUGGY]  token  =  builder.append( "n ",  option).append( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ",  option).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ",  option).append( "n ");	  token    =    builder.append(   "n   ".append(option).append(   "n   ");    	non-compiled	[CE]  	37	None	replace
93	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option).append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option).append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option).append('n');	  token    =    builder.append(   "n   ".append(option).append(   "n   ");    	non-compiled	[CE]  	37	None	replace
94	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option).append( ",n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option).append( ",n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option).append( ",n ");	  token    =    builder.append(   "n   ".append(option).append(   "n   ");    	non-compiled	[CE]  	37	None	replace
95	[BUG]  [BUGGY]  token  =  next(lineno())-  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(lineno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(lineno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
96	[BUG]  [BUGGY]  token  =  next(startCharno())-  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startCharno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startCharno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
97	[BUG]  [BUGGY]  token  =  next(endLineno())-  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endLineno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endLineno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
98	[BUG]  [BUGGY]  token  =  next(startLineno())-  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startLineno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startLineno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
99	[BUG]  [BUGGY]  token  =  next(endCharno())-  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endCharno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endCharno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
100	[BUG]  [BUGGY]  token  =  next(nextCharno())-  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextCharno())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextCharno())-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
101	[BUG]  [BUGGY]  token  =  nextIndividualBlock(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(token);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(token);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
102	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option,  ignoreStar);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option,  ignoreStar);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option,  ignoreStar);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
103	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option,  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option,  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option,  unreadToken);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
104	[BUG]  [BUGGY]  token  =  nextIndividualBlock(null);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(null);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
105	[BUG]  [BUGGY]  token  =  nextIndividualBlock(lineno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(lineno);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(lineno);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
106	[BUG]  [BUGGY]  token  =  next().next();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().next();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
107	[BUG]  [BUGGY]  token  =  nextState().getLineno();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().getLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().getLineno();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
108	[BUG]  [BUGGY]  token  =  nextState().nextToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().nextToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().nextToken();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
109	[BUG]  [BUGGY]  token  =  nextState().getStartLine();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().getStartLine();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().getStartLine();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
110	[BUG]  [BUGGY]  token  =  nextState().getNext();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().getNext();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().getNext();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
111	[BUG]  [BUGGY]  token  =  nextState().getValue();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().getValue();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
112	[BUG]  [BUGGY]  token  =  endLineno()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  endLineno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  endLineno()  -  1;	  token    =    endLineno();    	non-compiled	[CE]  	42	None	replace
113	[BUG]  [BUGGY]  token  =  endLineno()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  endLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  endLineno()  +  1;	  token    =    endLineno();    	non-compiled	[CE]  	42	None	replace
114	[BUG]  [BUGGY]  token  =  startCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  startCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  startCharno();	  token    =    endLineno();    	non-compiled	[CE]  	42	None	replace
115	[BUG]  [BUGGY]  token  =  endLineno()  -  startCharno;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  endLineno()  -  startCharno;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  endLineno()  -  startCharno;	  token    =    endLineno();    	non-compiled	[CE]  	42	None	replace
116	[BUG]  [BUGGY]  token  =  nextIndividualBlock(false,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(false,  true);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(false,  true);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
117	[BUG]  [BUGGY]  token  =  nextIndividualBlock(false,  false);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(false,  false);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(false,  false);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
118	[BUG]  [BUGGY]  token  =  nextIndividualBlock(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(0);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(0);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
119	[BUG]  [BUGGY]  token  =  nextIndividualBlock(false,  null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(false,  null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(false,  null);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
120	[BUG]  [BUGGY]  token  =  nextLineno(1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno(1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno(1);	  token    =    next(1);    	non-compiled	[CE]  	69	None	replace
121	[BUG]  [BUGGY]  token  =  nextToken().toString().append( "n ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString().append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString().append( "n ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
122	[BUG]  [BUGGY]  token  =  nextToken().toString().append( "no_unREAD_TOKEN ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString().append( "no_unREAD_TOKEN ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString().append( "no_unREAD_TOKEN ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
123	[BUG]  [BUGGY]  token  =  nextToken().toString().append( "null ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString().append( "null ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString().append( "null ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
124	[BUG]  [BUGGY]  token  =  next().append( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().append( "n ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
125	[BUG]  [BUGGY]  token  =  nextToken().toString().append( "no ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString().append( "no ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString().append( "no ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
126	[BUG]  [BUGGY]  token  =   "n "  +  nextToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =   "n "  +  nextToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =   "n "  +  nextToken();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
127	[BUG]  [BUGGY]  token  =  1  +  next();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  1  +  next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  1  +  next();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
128	[BUG]  [BUGGY]  token  =   "n "  +  nextCharno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =   "n "  +  nextCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =   "n "  +  nextCharno();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
129	[BUG]  [BUGGY]  token  =   "n "  +  nextLine();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =   "n "  +  nextLine();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =   "n "  +  nextLine();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
130	[BUG]  [BUGGY]  token  =  parser.replace('n',  'n');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.replace('n',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
131	[BUG]  [BUGGY]  token  =  builder.replace('',  '');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('',  '');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('',  '');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
132	[BUG]  [BUGGY]  token  =  builder.replace('0',  'n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('0',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('0',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
133	[BUG]  [BUGGY]  token  =  builder.replace(',',  'n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace(',',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace(',',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
134	[BUG]  [BUGGY]  token  =  builder.removeValue();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.removeValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.removeValue();	  token    =    builder.getValue();    	non-compiled	[CE]  	18	None	replace
135	[BUG]  [BUGGY]  token  =  parser.getValue();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.getValue();	  token    =    builder.getValue();    	non-compiled	[CE]  	18	None	replace
136	[BUG]  [BUGGY]  token  =  builder.getText();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.getText();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.getText();	  token    =    builder.getValue();    	non-compiled	[CE]  	18	None	replace
137	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State.SEARCHING_ANNOTATION  =  token;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State.SEARCHING_ANNOTATION  =  token;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
138	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION  +  1;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
139	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State.SEARCHING_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State.SEARCHING_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
140	[BUG]  [BUGGY]  token  =  nextToken().toLowerCase();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toLowerCase();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toLowerCase();	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
141	[BUG]  [BUGGY]  token  =  nextToken().toString()  + "n ";  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString()  + "n ";  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString()  + "n ";	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
142	[BUG]  [BUGGY]  token  =  next().toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().toString();	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
143	[BUG]  [BUGGY]  token  =  nextToken().append( "n ").toString();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ").toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ").toString();	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
144	[BUG]  [BUGGY]  token  =  nextToken().toString()  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toString()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toString()  +  1;	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
145	[BUG]  [BUGGY]  token  =  nextToken().replace('n',  'n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().replace('n',  'n');	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
146	[BUG]  [BUGGY]  token  =  builder.replace( "n ", "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace( "n ", "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace( "n ", "n ");	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
147	[BUG]  [BUGGY]  token  =  next(lineno());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(lineno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(lineno());	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
148	[BUG]  [BUGGY]  token  =  next(startCharno()  -  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startCharno()  -  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startCharno()  -  1);	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
149	[BUG]  [BUGGY]  token  =  next(startLineno());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startLineno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startLineno());	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
150	[BUG]  [BUGGY]  token  =  next(endLineno());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endLineno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endLineno());	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
151	[BUG]  [BUGGY]  token  =  next(nextCharno());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextCharno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextCharno());	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
152	[BUG]  [BUGGY]  token  =  next(endCharno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endCharno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endCharno());	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
153	[BUG]  [BUGGY]  token  =  nextIndividualBlock().replace('n',  'n');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().replace('n',  'n');	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
154	[BUG]  [BUGGY]  token  =  nextIndividualBlock().toString()  +  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().toString()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().toString()  +  1;	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
155	[BUG]  [BUGGY]  token  =  nextIndividualBlock().toString()  + "n ";  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().toString()  + "n ";  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().toString()  + "n ";	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
156	[BUG]  [BUGGY]  token  =  nextIndividualBlock().getValue();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().getValue();	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
157	[BUG]  [BUGGY]  token  =  nextToken().cloneTree();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().cloneTree();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().cloneTree();	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
158	[BUG]  [BUGGY]  token  =  nextToken(token)-  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(token)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(token)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
159	[BUG]  [BUGGY]  token  =  nextToken(token())-  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(token())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(token())-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
160	[BUG]  [BUGGY]  token  =  nextToken().nextToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().nextToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().nextToken();	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
161	[BUG]  [BUGGY]  token  =  nextToken().length  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().length  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().length  -  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
162	[BUG]  [BUGGY]  token  =  nextLocalState();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocalState();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocalState();	  token    =    nextState()    -    1;    	non-compiled	[CE]  	65	None	replace
163	[BUG]  [BUGGY]  token  =  nextLocation();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocation();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocation();	  token    =    nextState()    -    1;    	non-compiled	[CE]  	65	None	replace
164	[BUG]  [BUGGY]  token  =  parser.nextEOL();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextEOL();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextEOL();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
165	[BUG]  [BUGGY]  token  =  parser.nextStep();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextStep();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextStep();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
166	[BUG]  [BUGGY]  token  =  parser.nextDoc();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextDoc();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
167	[BUG]  [BUGGY]  token  =  nextLineno()  -  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno()  -  1;	  token    =    nextLineno();    	non-compiled	[CE]  	5	None	replace
168	[BUG]  [BUGGY]  token  =  this.endLineno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.endLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.endLineno();	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
169	[BUG]  [BUGGY]  token  =  this.startLineno()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startLineno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startLineno()  -  1;	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
170	[BUG]  [BUGGY]  token  =  this.startCharno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startCharno();	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
171	[BUG]  [BUGGY]  token  =  this.errorReporter.startLineno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.errorReporter.startLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.errorReporter.startLineno();	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
172	[BUG]  [BUGGY]  token  =  this.startLineno()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startLineno()  +  1;	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
173	[BUG]  [BUGGY]  token  =  next(unreadToken())-  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(unreadToken())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(unreadToken())-  1;	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
174	[BUG]  [BUGGY]  token  =  next(nextToken())/  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextToken())/  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextToken())/  1;	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
175	[BUG]  [BUGGY]  token  =  next(token())-  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(token())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(token())-  1;	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
176	[BUG]  [BUGGY]  token  =  next(nextToken()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextToken()  -  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextToken()  -  1);	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
177	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
178	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
179	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
180	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
181	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_BLOCK)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
182	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
183	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
184	[BUG]  [BUGGY]  ||!ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  ||!ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	||!ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
185	[BUG]  [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
186	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append( "no ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  builder.append( "no ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  builder.append( "no ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
187	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
188	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
189	[BUG]  [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
190	[BUG]  [BUGGY]  token  =  next(startCharno());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startCharno());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startCharno());	  token    =    next(nextLineno());    	non-compiled	[CE]  	62	None	replace
191	[BUG]  [BUGGY]  token  =  next(lineno(),  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(lineno(),  endCharno);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(lineno(),  endCharno);	  token    =    next(nextLineno());    	non-compiled	[CE]  	62	None	replace
192	[BUG]  [BUGGY]  token  =  next(endLineno(),  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endLineno(),  endCharno);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endLineno(),  endCharno);	  token    =    next(nextLineno());    	non-compiled	[CE]  	62	None	replace
193	[BUG]  [BUGGY]  token  =  nextToken().toLowerCase().trim();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().toLowerCase().trim();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().toLowerCase().trim();	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
194	[BUG]  [BUGGY]  token  =  next().trim();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().trim();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().trim();	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
195	[BUG]  [BUGGY]  token  =  nextToken().trim()  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().trim()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().trim()  +  1;	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
196	[BUG]  [BUGGY]  token  =  startLineno()  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  startLineno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  startLineno()  -  1;	  token    =    startLineno();    	non-compiled	[CE]  	32	None	replace
197	[BUG]  [BUGGY]  token  =  startLineno()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  startLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  startLineno()  +  1;	  token    =    startLineno();    	non-compiled	[CE]  	32	None	replace
198	[BUG]  [BUGGY]  token  =  endCharno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  endCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  endCharno();	  token    =    startLineno();    	non-compiled	[CE]  	32	None	replace
199	[BUG]  [BUGGY]  token  =  nextLocation()  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocation()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocation()  -  1;	  token    =    nextCharno()    -    1;    	non-compiled	[CE]  	43	None	replace
200	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true,  false);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true,  false);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true,  false);	  token    =    nextIndividualBlock(true);    	non-compiled	[CE]  	85	None	replace
201	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true,  true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true,  true);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true,  true);	  token    =    nextIndividualBlock(true);    	non-compiled	[CE]  	85	None	replace
202	[BUG]  [BUGGY]  token  =  this.getNext()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.getNext()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.getNext()  +  1;	  token    =    this.next()    +    1;    	non-compiled	[CE]  	54	None	replace
203	[BUG]  [BUGGY]  token  =  this.first()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.first()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.first()  +  1;	  token    =    this.next()    +    1;    	non-compiled	[CE]  	54	None	replace
204	[BUG]  [BUGGY]  token  =  parser.append( "t ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "t ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "t ");	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
205	[BUG]  [BUGGY]  token  =  parser.append( "n ".toString());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "n ".toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "n ".toString());	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
206	[BUG]  [BUGGY]  token  =  parser.append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append('n');	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
207	[BUG]  [BUGGY]  token  =  parser.append( "EOL ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "EOL ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "EOL ");	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
208	[BUG]  [BUGGY]  token  =  parser.append( "u ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "u ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "u ");	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
209	[BUG]  [BUGGY]  token  =  nextStandardBlock()  +  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextStandardBlock()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextStandardBlock()  +  1;	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
210	[BUG]  [BUGGY]  token  =  nextBlock();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextBlock();	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
211	[BUG]  [BUGGY]  token  =  nextIndividualBlock()  /  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock()  /  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock()  /  1;	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
212	[BUG]  [BUGGY]  token  =  nextIndividualBlock(state,  ignoreStar);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(state,  ignoreStar);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(state,  ignoreStar);	  token    =    nextIndividualBlock(state);    	non-compiled	[CE]  	86	None	replace
213	[BUG]  [BUGGY]  token  =  nextToken().getLineno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getLineno();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
214	[BUG]  [BUGGY]  token  =  nextToken().getLowerCase();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getLowerCase();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getLowerCase();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
215	[BUG]  [BUGGY]  token  =  nextToken().getCharno()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getCharno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getCharno()  +  1;	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
216	[BUG]  [BUGGY]  token  =  nextToken().getStartCharno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getStartCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getStartCharno();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
217	[BUG]  [BUGGY]  token  =  nextToken().getStartLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getStartLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getStartLineno();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
218	[BUG]  [BUGGY]  token  =  nextToken().getValue();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getValue();	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
219	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option)?  option  :  option;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option)?  option  :  option;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option)?  option  :  option;	  token    =    builder.append(   "n   ".equals(option)?    option    :    option;    	non-compiled	[CE]  	83	None	replace
220	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option)?  option  :  options;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option)?  option  :  options;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option)?  option  :  options;	  token    =    builder.append(   "n   ".equals(option)?    option    :    option;    	non-compiled	[CE]  	83	None	replace
221	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option);	  token    =    builder.append(   "n   ".equals(option));    	non-compiled	[CE]  	46	None	replace
222	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option));	  token    =    builder.append(   "n   ".equals(option));    	non-compiled	[CE]  	46	None	replace
223	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option);	  token    =    builder.append(   "n   ".equals(option));    	non-compiled	[CE]  	46	None	replace
224	[BUG]  [BUGGY]  token  =  this.getNext();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.getNext();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.getNext();	  token    =    this.next()    -    1;    	non-compiled	[CE]  	53	None	replace
225	[BUG]  [BUGGY]  token  =  this.previous();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.previous();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.previous();	  token    =    this.next()    -    1;    	non-compiled	[CE]  	53	None	replace
226	[BUG]  [BUGGY]  token  =  jsdocBuilder.append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.append('n');	  token    =    builder.append('n');    	non-compiled	[CE]  	39	None	replace
227	[BUG]  [BUGGY]  token  =  this.unreadToken();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.unreadToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.unreadToken();	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
228	[BUG]  [BUGGY]  token  =  this.currentToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.currentToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.currentToken();	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
229	[BUG]  [BUGGY]  token  =  builder.append( "n ").toString();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").toString();	  token    =    builder.append(   "n   ".toString());    	non-compiled	[CE]  	40	None	replace
230	[BUG]  [BUGGY]  token  =  builder.append( "n. ".toString());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n. ".toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n. ".toString());	  token    =    builder.append(   "n   ".toString());    	non-compiled	[CE]  	40	None	replace
231	[BUG]  [BUGGY]  token  =  builder.append( ".toString());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( ".toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( ".toString());	  token    =    builder.append(   "n   ".toString());    	non-compiled	[CE]  	40	None	replace
232	[BUG]  [BUGGY]  token  =  this.nextLocalBlock();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextLocalBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextLocalBlock();	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
233	[BUG]  [BUGGY]  token  =  this.nextBlock();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextBlock();	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
234	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOC)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
235	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
236	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOC)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOC)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
237	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOL)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
238	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  builder.append( "n ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State.SEARCHING_ANNOTATION  =  builder.append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State.SEARCHING_ANNOTATION  =  builder.append( "n ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
239	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getText();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	30	None	replace
240	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getText();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	30	None	replace
241	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getText();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	30	None	replace
242	[BUG]  [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
243	[BUG]  [BUGGY]  if(option!=  Option.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  Option.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  Option.SEARCHING_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
244	[BUG]  [BUGGY]  if(option!=  Option.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  Option.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  Option.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
245	[BUG]  [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  Option.NEXT_IS_ANNOTATION)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
246	[BUG]  [BUGGY]  token  =  builder.append( "n ".append(unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
247	[BUG]  [BUGGY]  token  =  builder.append( "n ".append(unreadToken).append('n');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append(unreadToken).append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append(unreadToken).append('n');	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
248	[BUG]  [BUGGY]  token  =  builder.append( "n ".append(unreadToken));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append(unreadToken));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append(unreadToken));	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
249	[BUG]  [BUGGY]  token  =  builder.append( "n ".append(unreadToken).append( "n ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append(unreadToken).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append(unreadToken).append( "n ");	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
250	[BUG]  [BUGGY]  token  =  builder.append('n').append(unreadToken);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append('n').append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append('n').append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
251	[BUG]  [BUGGY]  token  =  builder.append( "u ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "u ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "u ");	  token    =    builder.append(   "t   ");    	non-compiled	[CE]  	41	None	replace
252	[BUG]  [BUGGY]  token  =  builder.append( "r ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "r ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "r ");	  token    =    builder.append(   "t   ");    	non-compiled	[CE]  	41	None	replace
253	[BUG]  [BUGGY]  token  =  builder.append( "EOL ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "EOL ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "EOL ");	  token    =    builder.append(   "t   ");    	non-compiled	[CE]  	41	None	replace
254	[BUG]  [BUGGY]  token  =  next( "EOLn ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "EOLn ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "EOLn ");	  token    =    next(   "EOL   ");    	non-compiled	[CE]  	70	None	replace
255	[BUG]  [BUGGY]  token  =  next( "ERROR ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "ERROR ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "ERROR ");	  token    =    next(   "EOL   ");    	non-compiled	[CE]  	70	None	replace
256	[BUG]  [BUGGY]  token  =  next( "EOF ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "EOF ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "EOF ");	  token    =    next(   "EOL   ");    	non-compiled	[CE]  	70	None	replace
257	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	55	None	replace
258	[BUG]  [BUGGY]  token  =  this.last();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.last();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.last();	  token    =    last();    	non-compiled	[CE]  	22	None	replace
259	[BUG]  [BUGGY]  token  =  start();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  start();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  start();	  token    =    last();    	non-compiled	[CE]  	22	None	replace
260	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.toString();	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
261	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "t ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "t ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( "t ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
262	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append('n');	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
263	[BUG]  [BUGGY]  token  =  next(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(token);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(token);	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
264	[BUG]  [BUGGY]  token  =  next(option,  unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(option,  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(option,  unreadToken);	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
265	[BUG]  [BUGGY]  token  =  next(null);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(null);	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
266	[BUG]  [BUGGY]  token  =  next(option,  ignoreStar);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(option,  ignoreStar);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(option,  ignoreStar);	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
267	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
268	[BUG]  [BUGGY]  token  =  jsdocBuilder.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.toString();	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
269	[BUG]  [BUGGY]  token  =  jsdocBuilder.append( "EOL ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.append( "EOL ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.append( "EOL ");	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
270	[BUG]  [BUGGY]  token  =  jsdocBuilder.append( "t ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.append( "t ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.append( "t ");	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
271	[BUG]  [BUGGY]  token  =  builder.nextDoc();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.nextDoc();	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
272	[BUG]  [BUGGY]  token  =  n.nextDoc();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  n.nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  n.nextDoc();	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
273	[BUG]  [BUGGY]  token  =  builder.replace('0',  'r');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('0',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('0',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
274	[BUG]  [BUGGY]  token  =  parser.replace('n',  'r');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.replace('n',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
275	[BUG]  [BUGGY]  token  =  builder.replace('r',  'n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('r',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('r',  'n');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
276	[BUG]  [BUGGY]  token  =  builder.replace('',  'r');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
277	[BUG]  [BUGGY]  token  =  parser.nextToken()  +  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextToken()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextToken()  +  1;	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
278	[BUG]  [BUGGY]  token  =  parser.nextToken()  -  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextToken()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextToken()  -  1;	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
279	[BUG]  [BUGGY]  token  =  parser.getToken();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.getToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.getToken();	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
280	[BUG]  [BUGGY]  token  =  parser.nextToken(),  state);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextToken(),  state);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextToken(),  state);	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
281	[BUG]  [BUGGY]  token  =  parser.firstToken();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.firstToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.firstToken();	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
282	[BUG]  [BUGGY]  token  =  parser.parseToken();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseToken();	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
283	[BUG]  [BUGGY]  token  = "n "  +  this.next();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = "n "  +  this.next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = "n "  +  this.next();	  token    =    this.next()    +    1;    	non-compiled	[CE]  	54	None	replace
284	[BUG]  [BUGGY]  token  =  this.precedence();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.precedence();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.precedence();	  token    =    this.next()    +    1;    	non-compiled	[CE]  	54	None	replace
285	[BUG]  [BUGGY]  token  =  next(startLineno()  -  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(startLineno()  -  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(startLineno()  -  1);	  token    =    next(nextLineno()    -    1);    	non-compiled	[CE]  	61	None	replace
286	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
287	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
288	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
289	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.replace('n',  'r');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.replace('n',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
290	[BUG]  [BUGGY]  token  =  jsdocBuilder.replace('n',  'r');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.replace('n',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
291	[BUG]  [BUGGY]  token  =  jsdocBuilder.getJsDocToken();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.getJsDocToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.getJsDocToken();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
292	[BUG]  [BUGGY]  token  =  jsdocBuilder.getNext();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.getNext();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.getNext();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
293	[BUG]  [BUGGY]  token  =  nextIndividualBlock().append( "n ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().append( "n ");	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
294	[BUG]  [BUGGY]  token  =  nextBlock().toString();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextBlock().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextBlock().toString();	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
295	[BUG]  [BUGGY]  token  =  builder.append('n')+  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append('n')+  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append('n')+  1;	  token    =    builder.append('n');    	non-compiled	[CE]  	39	None	replace
296	[BUG]  [BUGGY]  token  =  next(option)+  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(option)+  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(option)+  1;	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
297	[BUG]  [BUGGY]  token  =  next(option  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(option  +  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(option  +  1);	  token    =    next(option);    	non-compiled	[CE]  	71	None	replace
298	[BUG]  [BUGGY]  token  =  nextLocalBlock()  +  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocalBlock()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocalBlock()  +  1;	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
299	[BUG]  [BUGGY]  token  =  nextLocalBlock()  -  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocalBlock()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocalBlock()  -  1;	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
300	[BUG]  [BUGGY]  token  =  nextSingleLocalBlock();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextSingleLocalBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextSingleLocalBlock();	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
301	[BUG]  [BUGGY]  token  =  nextSingleNode();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextSingleNode();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextSingleNode();	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
302	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
303	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
304	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
305	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
306	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
307	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
308	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
309	[BUG]  [BUGGY]  token  =  option.getText().equals(option.getText());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  option.getText().equals(option.getText());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  option.getText().equals(option.getText());	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
310	[BUG]  [BUGGY]  token  =  option.getValue()  + "n ";  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  option.getValue()  + "n ";  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  option.getValue()  + "n ";	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
311	[BUG]  [BUGGY]  token  =  option.getValue().toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  option.getValue().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  option.getValue().toString();	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
312	[BUG]  [BUGGY]  token  =  parser.append( ";n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( ";n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( ";n ");	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
313	[BUG]  [BUGGY]  token  =  parser.append( "n ".equals(option));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "n ".equals(option));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "n ".equals(option));	  token    =    parser.append(   "n   ");    	non-compiled	[CE]  	36	None	replace
314	[BUG]  [BUGGY]  token  =  nextIndividualBlock(1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(1);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
315	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ").append(unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ").append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( "n ").append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
316	[BUG]  [BUGGY]  token  =  builder.append( "no_UNREAD_TOKEN ").append(unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "no_UNREAD_TOKEN ").append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "no_UNREAD_TOKEN ").append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
317	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(option)?  options  :  option;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(option)?  options  :  option;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(option)?  options  :  option;	  token    =    builder.append(   "n   ".equals(option)?    option    :    option;    	non-compiled	[CE]  	83	None	replace
318	[BUG]  [BUGGY]  token  =  builder.append( "EOL   ".toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "EOL   ".toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "EOL   ".toString());	  token    =    builder.append(   "n   ".toString());    	non-compiled	[CE]  	40	None	replace
319	[BUG]  [BUGGY]  token  =  firstLine();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  firstLine();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  firstLine();	  token    =    nextLine()    -    1;    	non-compiled	[CE]  	31	None	replace
320	[BUG]  [BUGGY]  token  =  nextline();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextline();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextline();	  token    =    nextLine()    -    1;    	non-compiled	[CE]  	31	None	replace
321	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State  state  =  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
322	[BUG]  [BUGGY]  if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoredStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
323	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option)-  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option)-  1;	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
324	[BUG]  [BUGGY]  token  =  nextState().block();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().block();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().block();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
325	[BUG]  [BUGGY]  token  =  builder.append( "n ",  n);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ",  n);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ",  n);	  token    =    builder.append(   ",n   ");    	non-compiled	[CE]  	47	None	replace
326	[BUG]  [BUGGY]  token  =  getToken().next();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().next();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
327	[BUG]  [BUGGY]  token  =  getToken().getJsDocToken();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getToken().getJsDocToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getToken().getJsDocToken();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
328	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ").append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( "n ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
329	[BUG]  [BUGGY]  token  =  builder.append( "n ".append('n').append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".append('n').append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".append('n').append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
330	[BUG]  [BUGGY]  token  =  builder.append( ",n ").append('n');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( ",n ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( ",n ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
331	[BUG]  [BUGGY]  token  =  next( "n ".);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "n ".);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "n ".);	  token    =    next(   "n   ");    	non-compiled	[CE]  	34	None	replace
332	[BUG]  [BUGGY]  token  =  this.nextDoc()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextDoc()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextDoc()  -  1;	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
333	[BUG]  [BUGGY]  token  =  this.nextDoc()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextDoc()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextDoc()  +  1;	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
334	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
335	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
336	[BUG]  [BUGGY]  token  =  null;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  null;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  null;	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
337	[BUG]  [BUGGY]  token  =  n.getValue();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  n.getValue();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  n.getValue();	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
338	[BUG]  [BUGGY]  token  =  next(nextToken())-  2;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextToken())-  2;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextToken())-  2;	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
339	[BUG]  [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken).append( "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ").append(unreadToken).append( "n ");	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
340	[BUG]  [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ").append(unreadToken);	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
341	[BUG]  [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken).append('n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ").append(unreadToken).append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ").append(unreadToken).append('n');	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
342	[BUG]  [BUGGY]  token  =  nextToken().append( "n ").append(option).append( "n ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ").append(option).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ").append(option).append( "n ");	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
343	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	55	None	replace
344	[BUG]  [BUGGY]  token  =(option  ==  null)?  null  :  option.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =(option  ==  null)?  null  :  option.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =(option  ==  null)?  null  :  option.toString();	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
345	[BUG]  [BUGGY]  token  =  n.equals(option.toString());  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  n.equals(option.toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  n.equals(option.toString());	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
346	[BUG]  [BUGGY]  token  =  next(endLineno()  -  startCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(endLineno()  -  startCharno);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(endLineno()  -  startCharno);	  token    =    next(nextLineno());    	non-compiled	[CE]  	62	None	replace
347	[BUG]  [BUGGY]  token  =  NON_UNREAD_TOKEN;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_UNREAD_TOKEN;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_UNREAD_TOKEN;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
348	[BUG]  [BUGGY]  token  =  NON_GLOBAL_TOKEN;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_GLOBAL_TOKEN;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_GLOBAL_TOKEN;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
349	[BUG]  [BUGGY]  token  =  NON_GLOBAL_ANNOTATION;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_GLOBAL_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_GLOBAL_ANNOTATION;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
350	[BUG]  [BUGGY]  if(option!=  null)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  null)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  null)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getText();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	30	None	replace
351	[BUG]  [BUGGY]  token  =  nextToken(UNREAD_TOKEN);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(UNREAD_TOKEN);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(UNREAD_TOKEN);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
352	[BUG]  [BUGGY]  token  =  NON_UNREAD_TOKEN  +  next();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_UNREAD_TOKEN  +  next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_UNREAD_TOKEN  +  next();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
353	[BUG]  [BUGGY]  token  =  NON_SINGLE_LINE  +  next();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_SINGLE_LINE  +  next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_SINGLE_LINE  +  next();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
354	[BUG]  [BUGGY]  token  =  NON_GLOBAL_LINE  +  next();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  NON_GLOBAL_LINE  +  next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  NON_GLOBAL_LINE  +  next();	  token    =   "n   "    +    next();    	non-compiled	[CE]  	48	None	replace
355	[BUG]  [BUGGY]  token  =  parser.precedence();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.precedence();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.precedence();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
356	[BUG]  [BUGGY]  token  =  parser.parseNext();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseNext();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseNext();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
357	[BUG]  [BUGGY]  token  =  builder.append( "n. ".equals(option));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n. ".equals(option));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n. ".equals(option));	  token    =    builder.append(   "n   ".equals(option));    	non-compiled	[CE]  	46	None	replace
358	[BUG]  [BUGGY]  token  =  firstIndividualBlock();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  firstIndividualBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  firstIndividualBlock();	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
359	[BUG]  [BUGGY]  token  =  nextIndividualBlock().token;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().token;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().token;	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
360	[BUG]  [BUGGY]  token  =  nextIndividualBlock().next;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().next;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().next;	  token    =    nextIndividualBlock()    +    1;    	non-compiled	[CE]  	72	None	replace
361	[BUG]  [BUGGY]  token  =  nextState().unreadToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().unreadToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().unreadToken();	  token    =    nextState()    -    1;    	non-compiled	[CE]  	65	None	replace
362	[BUG]  [BUGGY]  token  =  nextState().token;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().token;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().token;	  token    =    nextState()    -    1;    	non-compiled	[CE]  	65	None	replace
363	[BUG]  [BUGGY]  token  =  this.nextDocument()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextDocument()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextDocument()  -  1;	  token    =    this.nextDocument();    	non-compiled	[CE]  	81	None	replace
364	[BUG]  [BUGGY]  token  =  this.nextDocument()  +  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextDocument()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextDocument()  +  1;	  token    =    this.nextDocument();    	non-compiled	[CE]  	81	None	replace
365	[BUG]  [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
366	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
367	[BUG]  [BUGGY]  token  =  nextToken().getJsDocToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getJsDocToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getJsDocToken();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
368	[BUG]  [BUGGY]  token  =  nextToken().getCharno()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getCharno()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getCharno()  -  1;	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
369	[BUG]  [BUGGY]  token  =  this.nextToken()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextToken()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextToken()  +  1;	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
370	[BUG]  [BUGGY]  token  =  this.nextDocToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextDocToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextDocToken();	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
371	[BUG]  [BUGGY]  token  =  this.nextToken()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextToken()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextToken()  -  1;	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
372	[BUG]  [BUGGY]  token  =  next(nextLineno()  -  startCharno)-  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextLineno()  -  startCharno)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextLineno()  -  startCharno)-  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
373	[BUG]  [BUGGY]  token  =  nextLine().next();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLine().next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLine().next();	  token    =    nextLine()    +    1;    	non-compiled	[CE]  	44	None	replace
374	[BUG]  [BUGGY]  token  =  nextLine().toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLine().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLine().toString();	  token    =    nextLine()    +    1;    	non-compiled	[CE]  	44	None	replace
375	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.replace('n',  'n');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.replace('n',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
376	[BUG]  [BUGGY]  token  =  jsdocBuilder.replace('n',  'n');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.replace('n',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
377	[BUG]  [BUGGY]  token  =  builder.replace('n',  'n')+  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('n',  'n')+  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('n',  'n')+  1;	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
378	[BUG]  [BUGGY]  token  =  sourceFile.replace('n',  'n');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.replace('n',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
379	[BUG]  [BUGGY]  token  =  next(2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(2);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(2);	  token    =    next(1);    	non-compiled	[CE]  	69	None	replace
380	[BUG]  [BUGGY]  token  =  builder.reset();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.reset();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.reset();	  token    =    builder.getValue();    	non-compiled	[CE]  	18	None	replace
381	[BUG]  [BUGGY]  token  =  nextToken(null)-  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(null)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(null)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
382	[BUG]  [BUGGY]  token  =  nextToken(nextToken())-  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(nextToken())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(nextToken())-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
383	[BUG]  [BUGGY]  token  =  nextToken(null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(null);	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
384	[BUG]  [BUGGY]  token  =  nextToken(nextToken());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(nextToken());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(nextToken());	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
385	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	State.SEARCHING_ANNOTATION  =  NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
386	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state  ==  NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
387	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state!=  NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
388	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option)+  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option)+  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option)+  1;	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
389	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option  +  1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option  +  1);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
390	[BUG]  [BUGGY]  token  =  nextIndividualBlock(option,  false);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(option,  false);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(option,  false);	  token    =    nextIndividualBlock(option);    	non-compiled	[CE]  	4	None	replace
391	[BUG]  [BUGGY]  token  =  last().nextCharno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  last().nextCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  last().nextCharno();	  token    =    nextCharno()    -    1;    	non-compiled	[CE]  	43	None	replace
392	[BUG]  [BUGGY]  token  =  next(nextLocal());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(nextLocal());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(nextLocal());	  token    =    nextLocal();    	non-compiled	[CE]  	73	None	replace
393	[BUG]  [BUGGY]  token  =  builder.append( "n ".equals(typeString));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".equals(typeString));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".equals(typeString));	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
394	[BUG]  [BUGGY]  token  =  builder.append( "n ").equals(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").equals(token);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").equals(token);	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
395	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_NEWLINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
396	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.toString();  builder.append( "n   ");  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.toString();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	29	None	replace
397	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
398	[BUG]  [BUGGY]  token  =  parser.nextDocToken();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.nextDocToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.nextDocToken();	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
399	[BUG]  [BUGGY]  token  =  parser.parseToken( "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseToken( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseToken( "n ");	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
400	[BUG]  [BUGGY]  token  =  builder.append( ";n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( ";n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( ";n ");	  token    =    builder.append(   "t   ");    	non-compiled	[CE]  	41	None	replace
401	[BUG]  [BUGGY]  token  =  nextLineno()  -  startCharno;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno()  -  startCharno;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno()  -  startCharno;	  token    =    nextLineno();    	non-compiled	[CE]  	5	None	replace
402	[BUG]  [BUGGY]  token  =  nextLineno()  +  charno;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLineno()  +  charno;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLineno()  +  charno;	  token    =    nextLineno();    	non-compiled	[CE]  	5	None	replace
403	[BUG]  [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
404	[BUG]  [BUGGY]  if(!ignoreStar  &&  fileLevelJsDocBuilder!=  null)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  fileLevelJsDocBuilder!=  null)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  fileLevelJsDocBuilder!=  null)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
405	[BUG]  [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
406	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
407	[BUG]  [BUGGY]  token  =  jsdocBuilder.append( ";n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.append( ";n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.append( ";n ");	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
408	[BUG]  [BUGGY]  token  =  jsdocBuilder.token();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.token();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.token();	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
409	[BUG]  [BUGGY]  token  =  stream.next();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  stream.next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  stream.next();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
410	[BUG]  [BUGGY]  token  =  sourceFile.getSourceFile();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  sourceFile.getSourceFile();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  sourceFile.getSourceFile();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
411	[BUG]  [BUGGY]  token  =  nextToken().append( "n ".append(option).append( "n ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "n ".append(option).append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "n ".append(option).append( "n ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
412	[BUG]  [BUGGY]  token  =  nextToken().append( "EOL ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append( "EOL ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append( "EOL ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
413	[BUG]  [BUGGY]  token  =  next( "NEXT_IS_ANNOTATION ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "NEXT_IS_ANNOTATION ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "NEXT_IS_ANNOTATION ");	  token    =    next(   "EOL   ");    	non-compiled	[CE]  	70	None	replace
414	[BUG]  [BUGGY]  token  =  builder.nextCharno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.nextCharno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.nextCharno();	  token    =    builder.nextLine();    	non-compiled	[CE]  	19	None	replace
415	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( ";n ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
416	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "EOL ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "EOL ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( "EOL ");	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
417	[BUG]  [BUGGY]  token  =  nextToken().next();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().next();	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
418	[BUG]  [BUGGY]  token  =  firstToken().trim();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  firstToken().trim();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  firstToken().trim();	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
419	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(option).append( "t ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(option).append( "t ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(option).append( "t ");	  token    =    builder.append(   "n   ".append(option).append(   "n   ");    	non-compiled	[CE]  	37	None	replace
420	[BUG]  [BUGGY]  token  =  builder.append( "u00 ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "u00 ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "u00 ");	  token    =    builder.append(   "t   ");    	non-compiled	[CE]  	41	None	replace
421	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(state  ==  State.SEARCHING_ANNOTATION)  {  String  annotationName  =  option.getText();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getText();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	30	None	replace
422	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
423	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
424	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ".);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ".);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ".);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	56	None	replace
425	[BUG]  [BUGGY]  token  =  this.startLineno;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startLineno;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startLineno;	  token    =    this.nextLine();    	non-compiled	[CE]  	13	None	replace
426	[BUG]  [BUGGY]  token  =  nextDoc();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextDoc();	  token    =    nextLocal();    	non-compiled	[CE]  	73	None	replace
427	[BUG]  [BUGGY]  token  =  nextLocalBlock().toString();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextLocalBlock().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextLocalBlock().toString();	  token    =    nextLocalBlock();    	non-compiled	[CE]  	3	None	replace
428	[BUG]  [BUGGY]  token  =  jsdocBuilder.replace( "n ", "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.replace( "n ", "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.replace( "n ", "n ");	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
429	[BUG]  [BUGGY]  token  =  jsdocBuilder.append( "n ".equals(option));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.append( "n ".equals(option));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.append( "n ".equals(option));	  token    =    jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	38	None	replace
430	[BUG]  [BUGGY]  token  =  parser.parseBlock();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseBlock();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseBlock();	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
431	[BUG]  [BUGGY]  token  =  parser.parseToken(token);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseToken(token);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseToken(token);	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
432	[BUG]  [BUGGY]  token  =  parser.parseToken(option);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parseToken(option);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parseToken(option);	  token    =    parser.nextToken();    	non-compiled	[CE]  	9	None	replace
433	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.STRING);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.STRING);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.STRING);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
434	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.START_TOKEN);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.START_TOKEN);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.START_TOKEN);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
435	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.NEW);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.NEW);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.NEW);	  token    =    nextToken(NO_UNREAD_TOKEN);    	non-compiled	[CE]  	66	None	replace
436	[BUG]  [BUGGY]  token  =  next( "u00 ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next( "u00 ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next( "u00 ");	  token    =    next(   "EOL   ");    	non-compiled	[CE]  	70	None	replace
437	[BUG]  [BUGGY]  token  =  next().replace('n',  'n');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().replace('n',  'n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().replace('n',  'n');	  token    =    builder.replace('n',    'n');    	non-compiled	[CE]  	74	None	replace
438	[BUG]  [BUGGY]  token  =  this.firstLineno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.firstLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.firstLineno();	  token    =    this.nextLineno();    	non-compiled	[CE]  	76	None	replace
439	[BUG]  [BUGGY]  token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.STRING;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.STRING;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.STRING;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
440	[BUG]  [BUGGY]  token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.EOL;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.EOL;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = "n ".equals(option.getValue())&&  token!=  JsDocToken.EOL;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
441	[BUG]  [BUGGY]  token  = "n ".equals(option.toString())?  null  :  token.toString();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = "n ".equals(option.toString())?  null  :  token.toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = "n ".equals(option.toString())?  null  :  token.toString();	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
442	[BUG]  [BUGGY]  token  = "n ".equals(option.getLongValue())&&  token!=  JsDocToken.STRING;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = "n ".equals(option.getLongValue())&&  token!=  JsDocToken.STRING;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = "n ".equals(option.getLongValue())&&  token!=  JsDocToken.STRING;	  token    =   "n   ";    	non-compiled	[CE]  	20	None	replace
443	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  builder.append( "no ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  builder.append( "no ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "no ");  }  else  {  builder.append( "no ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	26	None	replace
444	[BUG]  [BUGGY]  token  =  builder.append('n',  unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append('n',  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append('n',  unreadToken);	  token    =    builder.append('n');    	non-compiled	[CE]  	39	None	replace
445	[BUG]  [BUGGY]  token  =  nextToken( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken( "n ");	  token    =    next(   "n   ");    	non-compiled	[CE]  	34	None	replace
446	[BUG]  [BUGGY]  token  =  this.sourceFile.next();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.sourceFile.next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.sourceFile.next();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
447	[BUG]  [BUGGY]  token  =  stream.getSourceFile();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  stream.getSourceFile();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  stream.getSourceFile();	  token    =    sourceFile.next();    	non-compiled	[CE]  	52	None	replace
448	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION)  {  String  annotationName  =  option.getAnnotationName();  builder.append( "n   ");  }  else  {  builder.append( "n   ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    String    annotationName    =    option.getAnnotationName();    builder.append(   "n   ");    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	28	None	replace
449	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true,  unreadToken);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true,  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true,  unreadToken);	  token    =    nextIndividualBlock(true);    	non-compiled	[CE]  	85	None	replace
450	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true,  null);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true,  null);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true,  null);	  token    =    nextIndividualBlock(true);    	non-compiled	[CE]  	85	None	replace
451	[BUG]  [BUGGY]  token  =  jsdocBuilder.getParent();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  jsdocBuilder.getParent();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  jsdocBuilder.getParent();	  token    =    jsdocBuilder.next();    	non-compiled	[CE]  	51	None	replace
452	[BUG]  [BUGGY]  token  =  this.startLineno  +  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startLineno  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startLineno  +  1;	  token    =    this.startLineno();    	non-compiled	[CE]  	80	None	replace
453	[BUG]  [BUGGY]  token  =  builder.append( "u00 ").append(unreadToken);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "u00 ").append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "u00 ").append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
454	[BUG]  [BUGGY]  token  =  parser.append( "n ").append(unreadToken);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.append( "n ").append(unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.append( "n ").append(unreadToken);	  token    =    builder.append(   "n   ").append(unreadToken);    	non-compiled	[CE]  	35	None	replace
455	[BUG]  [BUGGY]  token  =  nextState().token();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextState().token();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextState().token();	  token    =    nextState().next();    	non-compiled	[CE]  	7	None	replace
456	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.next();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.fileLevelJsDocBuilder.next();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.fileLevelJsDocBuilder.next();	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
457	[BUG]  [BUGGY]  token  =  this.fileLevelJsDocBuilder.nextDoc();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.fileLevelJsDocBuilder.nextDoc();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.fileLevelJsDocBuilder.nextDoc();	  token    =    this.nextDoc();    	non-compiled	[CE]  	14	None	replace
458	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(token));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(token));	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
459	[BUG]  [BUGGY]  token  =  builder.append( "n ").append(unreadToken));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ").append(unreadToken));  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ").append(unreadToken));	  token    =    builder.append(   "n   ".equals(token));    	non-compiled	[CE]  	84	None	replace
460	[BUG]  [BUGGY]  token  =  getLineno();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getLineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getLineno();	  token    =    startLineno();    	non-compiled	[CE]  	32	None	replace
461	[BUG]  [BUGGY]  token  =  lineno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  lineno();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  lineno();	  token    =    startLineno();    	non-compiled	[CE]  	32	None	replace
462	[BUG]  [BUGGY]  token  =  this.firstToken();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.firstToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.firstToken();	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
463	[BUG]  [BUGGY]  token  =  this.nextToken(JsDocToken.STRING);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.nextToken(JsDocToken.STRING);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.nextToken(JsDocToken.STRING);	  token    =    this.nextToken();    	non-compiled	[CE]  	11	None	replace
464	[BUG]  [BUGGY]  token  = " " ";  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  = " " ";  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  = " " ";	  token    =   "   ";    	non-compiled	[CE]  	23	None	replace
465	[BUG]  [BUGGY]  token  =  getCurrentToken();  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getCurrentToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getCurrentToken();	  token    =    getToken();    	non-compiled	[CE]  	87	None	replace
466	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ".);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  fileLevelJsDocBuilder.append( "n ".);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  fileLevelJsDocBuilder.append( "n ".);	  token    =    fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	45	None	replace
467	[BUG]  [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  ignoreStar  =  false;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    ignoreStar    =    false;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	27	None	replace
468	[BUG]  [BUGGY]  token  =  nextToken().getLong();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getLong();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getLong();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
469	[BUG]  [BUGGY]  token  =  nextToken().getLocalName();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().getLocalName();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().getLocalName();	  token    =    nextToken().getCharno();    	non-compiled	[CE]  	12	None	replace
470	[BUG]  [BUGGY]  token  =  nextToken().replace('n',  'r');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().replace('n',  'r');	  token    =    nextToken().toString();    	non-compiled	[CE]  	8	None	replace
471	[BUG]  [BUGGY]  token  =  nextIndividualBlock(false,  unreadToken);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(false,  unreadToken);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(false,  unreadToken);	  token    =    nextIndividualBlock(false);    	non-compiled	[CE]  	2	None	replace
472	[BUG]  [BUGGY]  token  =  firstLineno()  +  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  firstLineno()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  firstLineno()  +  1;	  token    =    nextCharno()    +    1;    	non-compiled	[CE]  	59	None	replace
473	[BUG]  [BUGGY]  token  =  parser.parse();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.parse();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.parse();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
474	[BUG]  [BUGGY]  token  =  parser.previous();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  parser.previous();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  parser.previous();	  token    =    parser.next();    	non-compiled	[CE]  	17	None	replace
475	[BUG]  [BUGGY]  token  =  this.startLineno  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.startLineno  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.startLineno  -  1;	  token    =    this.next()    -    1;    	non-compiled	[CE]  	53	None	replace
476	[BUG]  [BUGGY]  token  =  this.appendToken()  -  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.appendToken()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.appendToken()  -  1;	  token    =    this.next()    -    1;    	non-compiled	[CE]  	53	None	replace
477	[BUG]  [BUGGY]  token  =  this.first()  -  1;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  this.first()  -  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  this.first()  -  1;	  token    =    this.next()    -    1;    	non-compiled	[CE]  	53	None	replace
478	[BUG]  [BUGGY]  token  =  nextIndividualBlock().replace('n',  'r');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().replace('n',  'r');	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
479	[BUG]  [BUGGY]  token  =  nextIndividualBlock().replace('n',  't');  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().replace('n',  't');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().replace('n',  't');	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
480	[BUG]  [BUGGY]  token  =  nextIndividualBlock().unreadToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock().unreadToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock().unreadToken();	  token    =    nextIndividualBlock().toString();    	non-compiled	[CE]  	82	None	replace
481	[BUG]  [BUGGY]  token  =  nextToken().replace('n',  't');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().replace('n',  't');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().replace('n',  't');	  token    =    nextToken().trim();    	non-compiled	[CE]  	10	None	replace
482	[BUG]  [BUGGY]  token  =  next(lenientToken())-  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(lenientToken())-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(lenientToken())-  1;	  token    =    next(nextToken())-    1;    	non-compiled	[CE]  	63	None	replace
483	[BUG]  [BUGGY]  token  =  nextToken().trim().toString();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().trim().toString();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().trim().toString();	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
484	[BUG]  [BUGGY]  token  =  firstToken().append( "n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  firstToken().append( "n ");  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  firstToken().append( "n ");	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
485	[BUG]  [BUGGY]  token  =  nextToken().append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().append('n');	  token    =    nextToken().append(   "n   ");    	non-compiled	[CE]  	67	None	replace
486	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	77	None	replace
487	[BUG]  [BUGGY]  token  =  next().replace('n',  'r');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next().replace('n',  'r');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next().replace('n',  'r');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
488	[BUG]  [BUGGY]  token  =  builder.replace('-',  '-');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.replace('-',  '-');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.replace('-',  '-');	  token    =    builder.replace('n',    'r');    	non-compiled	[CE]  	75	None	replace
489	[BUG]  [BUGGY]  token  =  next(lineno())/  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  next(lineno())/  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  next(lineno())/  1;	  token    =    next(nextLineno())-    1;    	non-compiled	[CE]  	60	None	replace
490	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  token  =  next();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
491	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextToken();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
492	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextLine();  continue;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextLine();  continue;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  token  =  nextLine();  continue;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    token    =    next();    continue;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	58	None	replace
493	[BUG]  [BUGGY]  token  =  startLine()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  startLine()  +  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  startLine()  +  1;	  token    =    nextLine()    +    1;    	non-compiled	[CE]  	44	None	replace
494	[BUG]  [BUGGY]  token  =  nextToken(1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(1);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(1);	  token    =    next(1);    	non-compiled	[CE]  	69	None	replace
495	[BUG]  [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
496	[BUG]  [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	57	None	replace
497	[BUG]  [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
498	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  }  else  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    }    else    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	24	None	replace
499	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
500	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.NEW)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
501	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.EOF  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
502	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.EOF    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	78	None	replace
503	[BUG]  [BUGGY]  token  =  builder.append('n'.toString());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append('n'.toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append('n'.toString());	  token    =    builder.append(   "n   ".toString());    	non-compiled	[CE]  	40	None	replace
504	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	55	None	replace
505	[BUG]  [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(!ignoreStar)  {  state  =  State.SEARCHING_ANNOTATION;  }	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
506	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  JsDocToken.NEXT_IS_ANNOTATION;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  state  =  State.SEARCHING_ANNOTATION  ||  state  ==  JsDocToken.NEXT_IS_ANNOTATION;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	state  =  State.SEARCHING_ANNOTATION  ||  state  ==  JsDocToken.NEXT_IS_ANNOTATION;	  state    =    State.SEARCHING_ANNOTATION;    	non-compiled	[CE]  	25	None	replace
507	[BUG]  [BUGGY]  if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.STRING)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
508	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
509	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.NAME)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
510	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  state  =  State.SEARCHING_ANNOTATION;  if(token  ==  JsDocToken.STRING  ||  token  ==  JsDocToken.STRING)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    state    =    State.SEARCHING_ANNOTATION;    if(token    ==    JsDocToken.STRING    ||    token    ==    JsDocToken.STRING)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
511	[BUG]  [BUGGY]  token  =  nextToken().unreadToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken().unreadToken();  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken().unreadToken();	  token    =    nextToken()    +    1;    	non-compiled	[CE]  	68	None	replace
512	[BUG]  [BUGGY]  token  =  builder.append( "u00 ").append('n');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "u00 ").append('n');  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "u00 ").append('n');	  token    =    builder.append(   "n   ").append('n');    	non-compiled	[CE]  	33	None	replace
513	[BUG]  [BUGGY]  token  =  getText().equals(option.getValue());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getText().equals(option.getValue());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getText().equals(option.getValue());	  token    =   "n   ".equals(option.getValue());    	non-compiled	[CE]  	49	None	replace
514	[BUG]  [BUGGY]  token  =  getText().equals(option.toString());  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  getText().equals(option.toString());  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  getText().equals(option.toString());	  token    =   "n   ".equals(option.toString());    	non-compiled	[CE]  	50	None	replace
515	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.NEW_TOKEN)-  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.NEW_TOKEN)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.NEW_TOKEN)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
516	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.START_TOKEN)-  1;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.START_TOKEN)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.START_TOKEN)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
517	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.NEW_TOKEN);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.NEW_TOKEN);  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.NEW_TOKEN);	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
518	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.STRING)-  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.STRING)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.STRING)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
519	[BUG]  [BUGGY]  token  =  nextToken(JsDocToken.START_ANNOTATION)-  1;  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextToken(JsDocToken.START_ANNOTATION)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextToken(JsDocToken.START_ANNOTATION)-  1;	  token    =    nextToken()    -    1;    	non-compiled	[CE]  	6	None	replace
520	[BUG]  [BUGGY]  token  =  builder.append( "n ".equals(option)?  options  :  option;  [CE]  [FE]                ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n ".equals(option)?  options  :  option;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n ".equals(option)?  options  :  option;	  token    =    builder.append(   "n   ".equals(option)?    option    :    option;    	non-compiled	[CE]  	83	None	replace
521	[BUG]  [BUGGY]  token  =  builder.append( "n "  +  option?  option  :  option;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  builder.append( "n "  +  option?  option  :  option;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  builder.append( "n "  +  option?  option  :  option;	  token    =    builder.append(   "n   ".equals(option)?    option    :    option;    	non-compiled	[CE]  	83	None	replace
522	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true)-  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true)-  1;	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
523	[BUG]  [BUGGY]  token  =  nextIndividualBlock(true,  false)-  1;  [CE]  [FE]              ComparisonFailure      [CONTEXT]      token  =  next();  continue;  case  EOL:  if  (option  !=  WhitespaceOption.SINGLE_LINE)  {  builder.append(     "\n     ");  }  ignoreStar  =  true;      [BUGGY]  token  =  nextIndividualBlock(true,  false)-  1;  [BUGGY]      continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;    if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOF  ||  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1382	1382	4	replace	token  =  nextIndividualBlock(true,  false)-  1;	  token    =    nextIndividualBlock()    -    1;    	non-compiled	[CE]  	1	None	replace
