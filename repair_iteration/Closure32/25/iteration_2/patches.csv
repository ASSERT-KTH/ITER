bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  endLineno  =  stream.getEndLineno()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  endLineno  =  stream.getEndLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  endLineno  =  stream.getEndLineno()  +  1;	  int    endLineno    =    stream.getEndLineno();    	non-compiled	[CE]  	18	None	replace
2	[BUG]  [BUGGY]  int  endLineno  =  stream.getEndLineno()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  endLineno  =  stream.getEndLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  endLineno  =  stream.getEndLineno()  -  1;	  int    endLineno    =    stream.getEndLineno();    	non-compiled	[CE]  	18	None	replace
3	[BUG]  [BUGGY]  int  endLineno  =  stream.getStartLineno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  endLineno  =  stream.getStartLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  endLineno  =  stream.getStartLineno();	  int    endLineno    =    stream.getEndLineno();    	non-compiled	[CE]  	18	None	replace
4	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  endLineno  =  stream.getEndLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getEndLineno();	  int    endLineno    =    stream.getEndLineno();    	non-compiled	[CE]  	18	None	replace
5	[BUG]  [BUGGY]  stream.removeChild(lineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(lineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(lineno);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  stream.removeChild(startCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(startCharno);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  stream.removeChild(endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(endCharno);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  stream.removeChild(line);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(line);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(line);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  stream.removeChild(endLineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(endLineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(endLineno);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
10	[BUG]  [BUGGY]  stream.removeChild(startLineno  +  1);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(startLineno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(startLineno  +  1);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
11	[BUG]  [BUGGY]  stream.addChildToBack(token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addChildToBack(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addChildToBack(token);	  stream.removeChild(startLineno);    	non-compiled	[CE]  	4	None	replace
12	[BUG]  [BUGGY]  stream.setEndCharno(endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setEndCharno(endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setEndCharno(endCharno);	  stream.setCharno(startCharno);    	non-compiled	[CE]  	30	None	replace
13	[BUG]  [BUGGY]  stream.setLineno(startCharno  +  1);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(startCharno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startCharno  +  1);	  stream.setLineno(lineno    +    1);    	non-compiled	[CE]  	27	None	replace
14	[BUG]  [BUGGY]  stream.setLineno(endCharno  +  1);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(endCharno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(endCharno  +  1);	  stream.setLineno(lineno    +    1);    	non-compiled	[CE]  	27	None	replace
15	[BUG]  [BUGGY]  stream.setCharno(startCharno  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(startCharno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(startCharno  +  1);	  stream.setLineno(lineno    +    1);    	non-compiled	[CE]  	27	None	replace
16	[BUG]  [BUGGY]  stream.setLineno(lineno  +  2);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(lineno  +  2);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(lineno  +  2);	  stream.setLineno(lineno    +    1);    	non-compiled	[CE]  	27	None	replace
17	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  endLineno  =  stream.getLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getLineno()  -  1;	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	22	None	replace
18	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  /  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  endLineno  =  stream.getLineno()  /  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getLineno()  /  1;	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	22	None	replace
19	[BUG]  [BUGGY]  Integer  startLineno  =  stream.getLineno();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  startLineno  =  stream.getLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  startLineno  =  stream.getLineno();	  Integer    endLineno    =    stream.getLineno()    +    1;    	non-compiled	[CE]  	22	None	replace
20	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  option);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  option);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token,  option);	  stream.addToDebugLog(   "Single    line:   "    +    token);    	non-compiled	[CE]  	48	None	replace
21	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token,  endCharno);	  stream.addToDebugLog(   "Single    line:   "    +    token);    	non-compiled	[CE]  	48	None	replace
22	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token  + "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token  + "n ");  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token  + "n ");	  stream.addToDebugLog(   "Single    line:   "    +    token);    	non-compiled	[CE]  	48	None	replace
23	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  charno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token,  charno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token,  charno);	  stream.addToDebugLog(   "Single    line:   "    +    token);    	non-compiled	[CE]  	48	None	replace
24	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token  + "  - ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token  + "  - ");  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token  + "  - ");	  stream.addToDebugLog(   "Single    line:   "    +    token);    	non-compiled	[CE]  	48	None	replace
25	[BUG]  [BUGGY]  stream.removeLineno()  +  1;  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeLineno()  +  1;	  stream.removeLineno();    	non-compiled	[CE]  	32	None	replace
26	[BUG]  [BUGGY]  stream.removeCharno();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeCharno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeCharno();	  stream.removeLineno();    	non-compiled	[CE]  	32	None	replace
27	[BUG]  [BUGGY]  stream.removeLineno(lineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeLineno(lineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeLineno(lineno);	  stream.removeLineno();    	non-compiled	[CE]  	32	None	replace
28	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  startLineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  startLineno  =  stream.getLineno()  +  1;	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	19	None	replace
29	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  startLineno  =  stream.getLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  startLineno  =  stream.getLineno()  -  1;	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	19	None	replace
30	[BUG]  [BUGGY]  int  startLineno  =  stream.getCharno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  startLineno  =  stream.getCharno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  startLineno  =  stream.getCharno();	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	19	None	replace
31	[BUG]  [BUGGY]  int  startLineno  =  stream.getEndLineno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  startLineno  =  stream.getEndLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  startLineno  =  stream.getEndLineno();	  int    startLineno    =    stream.getLineno();    	non-compiled	[CE]  	19	None	replace
32	[BUG]  [BUGGY]  stream.updateLineno(startCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(startCharno);	  stream.updateLineno(lineno);    	non-compiled	[CE]  	50	None	replace
33	[BUG]  [BUGGY]  stream.updateLineno(lineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(lineno,  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(lineno,  endCharno);	  stream.updateLineno(lineno);    	non-compiled	[CE]  	50	None	replace
34	[BUG]  [BUGGY]  stream.updateLineno(lineno,  startCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(lineno,  startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(lineno,  startCharno);	  stream.updateLineno(lineno);    	non-compiled	[CE]  	50	None	replace
35	[BUG]  [BUGGY]  stream.updateLineno(lineno  +  1);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(lineno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(lineno  +  1);	  stream.updateLineno(lineno);    	non-compiled	[CE]  	50	None	replace
36	[BUG]  [BUGGY]  stream.updateLineno(startLineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(startLineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(startLineno);	  stream.updateLineno(lineno);    	non-compiled	[CE]  	50	None	replace
37	[BUG]  [BUGGY]  stream.setCharno(line.trim()  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(line.trim()  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(line.trim()  +  1);	  stream.setCharno(line.trim());    	non-compiled	[CE]  	12	None	replace
38	[BUG]  [BUGGY]  stream.setCharno(line.trim(),  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(line.trim(),  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(line.trim(),  endCharno);	  stream.setCharno(line.trim());    	non-compiled	[CE]  	12	None	replace
39	[BUG]  [BUGGY]  stream.setCharno(line.trim()  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(line.trim()  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(line.trim()  -  1);	  stream.setCharno(line.trim());    	non-compiled	[CE]  	12	None	replace
40	[BUG]  [BUGGY]  stream.setCharno(line.charno());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(line.charno());  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(line.charno());	  stream.setCharno(line.trim());    	non-compiled	[CE]  	12	None	replace
41	[BUG]  [BUGGY]  stream.setCharno(token.trim());  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(token.trim());  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(token.trim());	  stream.setCharno(line.trim());    	non-compiled	[CE]  	12	None	replace
42	[BUG]  [BUGGY]  stream.setCharno(offset);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(offset);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(offset);	  stream.setLength(0);    	non-compiled	[CE]  	46	None	replace
43	[BUG]  [BUGGY]  stream.setCharno(0);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(0);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(0);	  stream.setLength(0);    	non-compiled	[CE]  	46	None	replace
44	[BUG]  [BUGGY]  n.setLineno(lineno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  n.setLineno(lineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	n.setLineno(lineno);	  stream.clearLineno();    	non-compiled	[CE]  	51	None	replace
45	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  option);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  option);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token,  option);	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
46	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  unreadToken);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  unreadToken);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token,  unreadToken);	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
47	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  ignoreStar);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  ignoreStar);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token,  ignoreStar);	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
48	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token,  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token,  endCharno);	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
49	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  option);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  option);	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
50	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token));  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token));	  stream.addToDebugLog(   "Unreachable:   "    +    token);    	non-compiled	[CE]  	37	None	replace
51	[BUG]  [BUGGY]  stream.setLineno(line.trim()  +  1);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(line.trim()  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim()  +  1);	  stream.setLineno(line.trim());    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  stream.setLineno(line.trim(),  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(line.trim(),  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim(),  endCharno);	  stream.setLineno(line.trim());    	non-compiled	[CE]  	6	None	replace
53	[BUG]  [BUGGY]  stream.setLineno(line.trim()  -  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(line.trim()  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim()  -  1);	  stream.setLineno(line.trim());    	non-compiled	[CE]  	6	None	replace
54	[BUG]  [BUGGY]  stream.setLineno(line.trim(),  startCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(line.trim(),  startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim(),  startCharno);	  stream.setLineno(line.trim());    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  stream.setLineno(line.trim(),  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(line.trim(),  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim(),  1);	  stream.setLineno(line.trim());    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  stream.setCharno(lineno  +  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(lineno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(lineno  +  1);	  stream.setCharno(lineno);    	non-compiled	[CE]  	24	None	replace
57	[BUG]  [BUGGY]  stream.setEndLineno(endLineno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setEndLineno(endLineno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setEndLineno(endLineno);	  stream.setCharno(lineno);    	non-compiled	[CE]  	24	None	replace
58	[BUG]  [BUGGY]  stream.remove(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.remove(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.remove(token);	  stream.update(token);    	non-compiled	[CE]  	7	None	replace
59	[BUG]  [BUGGY]  stream.setToken(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setToken(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setToken(token);	  stream.update(token);    	non-compiled	[CE]  	7	None	replace
60	[BUG]  [BUGGY]  stream.reset(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.reset(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.reset(token);	  stream.update(token);    	non-compiled	[CE]  	7	None	replace
61	[BUG]  [BUGGY]  int  lineno  =  stream.getLineno()  +  1;  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  lineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  lineno  =  stream.getLineno()  +  1;	  int    lineno    =    stream.getLineno();    	non-compiled	[CE]  	14	None	replace
62	[BUG]  [BUGGY]  int  lineno  =  stream.getLineno()  -  1;  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  lineno  =  stream.getLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  lineno  =  stream.getLineno()  -  1;	  int    lineno    =    stream.getLineno();    	non-compiled	[CE]  	14	None	replace
63	[BUG]  [BUGGY]  int  lineno  =  stream.getEndLineno();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  lineno  =  stream.getEndLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  lineno  =  stream.getEndLineno();	  int    lineno    =    stream.getLineno();    	non-compiled	[CE]  	14	None	replace
64	[BUG]  [BUGGY]  charno  =  stream.getLineno();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  charno  =  stream.getLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	charno  =  stream.getLineno();	  int    lineno    =    stream.getLineno();    	non-compiled	[CE]  	14	None	replace
65	[BUG]  [BUGGY]  stream.setCharno(endCharno  -  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(endCharno  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(endCharno  -  1);	  stream.setCharno(startLineno    -    1);    	non-compiled	[CE]  	54	None	replace
66	[BUG]  [BUGGY]  stream.setLineno(startCharno  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(startCharno  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startCharno  -  1);	  stream.setCharno(startLineno    -    1);    	non-compiled	[CE]  	54	None	replace
67	[BUG]  [BUGGY]  stream.setLineno(endCharno  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(endCharno  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(endCharno  -  1);	  stream.setCharno(startLineno    -    1);    	non-compiled	[CE]  	54	None	replace
68	[BUG]  [BUGGY]  stream.setLineno(startLineno  -  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(startLineno  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startLineno  -  1);	  stream.setCharno(startLineno    -    1);    	non-compiled	[CE]  	54	None	replace
69	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(builder);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(builder);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(builder);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
70	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(null);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(null);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(null);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
71	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(true);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(true);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(true);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
72	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(option);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(option);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(option);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
73	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(token);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
74	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(false);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(false);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
75	[BUG]  [BUGGY]  stream.setRemainingJSDocBuilder(n);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocBuilder(n);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocBuilder(n);	  stream.getRemainingJSDocBuilder();    	non-compiled	[CE]  	47	None	replace
76	[BUG]  [BUGGY]  stream.removeChild(stream.getCharno());  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(stream.getCharno());  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getCharno());	  stream.removeChild(stream.getRemainingJSDocLine());    	non-compiled	[CE]  	1	None	replace
77	[BUG]  [BUGGY]  stream.addChildToBack(stream.getRemainingJSDocLine());  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.addChildToBack(stream.getRemainingJSDocLine());  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addChildToBack(stream.getRemainingJSDocLine());	  stream.removeChild(stream.getRemainingJSDocLine());    	non-compiled	[CE]  	1	None	replace
78	[BUG]  [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine()  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine()  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getRemainingJSDocLine()  +  1);	  stream.removeChild(stream.getRemainingJSDocLine());    	non-compiled	[CE]  	1	None	replace
79	[BUG]  [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine(),  token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine(),  token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getRemainingJSDocLine(),  token);	  stream.removeChild(stream.getRemainingJSDocLine());    	non-compiled	[CE]  	1	None	replace
80	[BUG]  [BUGGY]  stream.replaceChild(stream.getLineno());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.replaceChild(stream.getLineno());  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.replaceChild(stream.getLineno());	  stream.removeChild(stream.getRemainingJSDocLine());    	non-compiled	[CE]  	1	None	replace
81	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  endLineno  =  stream.getCharno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getCharno();	  Integer    endLineno    =    stream.getLineno();    	non-compiled	[CE]  	20	None	replace
82	[BUG]  [BUGGY]  JsDocToken  stream  =  option.getJSDocToken();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  option.getJSDocToken();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  option.getJSDocToken();	  JSDocToken    stream    =    option.getJSDocToken();    	non-compiled	[CE]  	53	None	replace
83	[BUG]  [BUGGY]  JSDocToken  stream  =  option.getJSDocToken(token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JSDocToken  stream  =  option.getJSDocToken(token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JSDocToken  stream  =  option.getJSDocToken(token);	  JSDocToken    stream    =    option.getJSDocToken();    	non-compiled	[CE]  	53	None	replace
84	[BUG]  [BUGGY]  JSDocToken  stream  =  options.getJSDocToken();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JSDocToken  stream  =  options.getJSDocToken();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JSDocToken  stream  =  options.getJSDocToken();	  JSDocToken    stream    =    option.getJSDocToken();    	non-compiled	[CE]  	53	None	replace
85	[BUG]  [BUGGY]  JSDocToken  stream  =  option.getJsDocToken();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JSDocToken  stream  =  option.getJsDocToken();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JSDocToken  stream  =  option.getJsDocToken();	  JSDocToken    stream    =    option.getJSDocToken();    	non-compiled	[CE]  	53	None	replace
86	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getJSDocToken();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JSDocToken  stream  =  token.getJSDocToken();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JSDocToken  stream  =  token.getJSDocToken();	  JSDocToken    stream    =    option.getJSDocToken();    	non-compiled	[CE]  	53	None	replace
87	[BUG]  [BUGGY]  stream.setCharno(lineno  -  1);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(lineno  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(lineno  -  1);	  stream.setCharno(endLineno    -    1);    	non-compiled	[CE]  	34	None	replace
88	[BUG]  [BUGGY]  stream.setCharno(token  -  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(token  -  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(token  -  1);	  stream.setCharno(endLineno    -    1);    	non-compiled	[CE]  	34	None	replace
89	[BUG]  [BUGGY]  stream.setRemainingJSDocLine(true);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocLine(true);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocLine(true);	  stream.getRemainingJSDocLine();    	non-compiled	[CE]  	45	None	replace
90	[BUG]  [BUGGY]  stream.setRemainingJSDocLine(line);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocLine(line);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocLine(line);	  stream.getRemainingJSDocLine();    	non-compiled	[CE]  	45	None	replace
91	[BUG]  [BUGGY]  stream.setRemainingJSDocLine(null);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocLine(null);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocLine(null);	  stream.getRemainingJSDocLine();    	non-compiled	[CE]  	45	None	replace
92	[BUG]  [BUGGY]  stream.setRemainingJSDocLine(option);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setRemainingJSDocLine(option);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocLine(option);	  stream.getRemainingJSDocLine();    	non-compiled	[CE]  	45	None	replace
93	[BUG]  [BUGGY]  stream.updateLineno(line,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(line,  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(line,  endCharno);	  stream.updateLineno(line);    	non-compiled	[CE]  	8	None	replace
94	[BUG]  [BUGGY]  stream.updateLineno(line,  startCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(line,  startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(line,  startCharno);	  stream.updateLineno(line);    	non-compiled	[CE]  	8	None	replace
95	[BUG]  [BUGGY]  stream.updateLineno(line,  charno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.updateLineno(line,  charno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(line,  charno);	  stream.updateLineno(line);    	non-compiled	[CE]  	8	None	replace
96	[BUG]  [BUGGY]  stream.removeLineno(line);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeLineno(line);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeLineno(line);	  stream.updateLineno(line);    	non-compiled	[CE]  	8	None	replace
97	[BUG]  [BUGGY]  stream.setLineno(startLineno  +  1);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setLineno(startLineno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startLineno  +  1);	  stream.setCharno(endLineno    +    1);    	non-compiled	[CE]  	25	None	replace
98	[BUG]  [BUGGY]  stream.update(line,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  endCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  endCharno);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
99	[BUG]  [BUGGY]  stream.update(line,  startCharno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  startCharno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  startCharno);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
100	[BUG]  [BUGGY]  stream.update(line,  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  1);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
101	[BUG]  [BUGGY]  stream.update(line,  0);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  0);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  0);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
102	[BUG]  [BUGGY]  stream.update(token,  line);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(token,  line);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(token,  line);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
103	[BUG]  [BUGGY]  stream.update(line,  0,  token);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  0,  token);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  0,  token);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
104	[BUG]  [BUGGY]  stream.update(line,  token,  ignoreStar);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.update(line,  token,  ignoreStar);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  token,  ignoreStar);	  stream.update(line,    token);    	non-compiled	[CE]  	11	None	replace
105	[BUG]  [BUGGY]  stream.setCharno(endCharno  +  1);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.setCharno(endCharno  +  1);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(endCharno  +  1);	  stream.setCharno(startLineno    +    1);    	non-compiled	[CE]  	35	None	replace
106	[BUG]  [BUGGY]  JsDocToken  stream  =  token.trim()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.trim()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.trim()  +  1;	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  JsDocToken  stream  =  token.replace('',  '');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.replace('',  '');  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.replace('',  '');	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
108	[BUG]  [BUGGY]  JsDocToken  stream  =  token.removeFirst();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.removeFirst();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.removeFirst();	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
109	[BUG]  [BUGGY]  JsDocToken  stream  =  token.toString();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.toString();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.toString();	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
110	[BUG]  [BUGGY]  JsDocToken  stream  =  token.remove();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.remove();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.remove();	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
111	[BUG]  [BUGGY]  JsDocToken  stream  =  token.replace('n',  'r');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  JsDocToken  stream  =  token.replace('n',  'r');  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.replace('n',  'r');	  JsDocToken    stream    =    token.trim();    	non-compiled	[CE]  	39	None	replace
112	[BUG]  [BUGGY]  stream.removeChild(key);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(key);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(key);	  stream.removeChild(token);    	non-compiled	[CE]  	3	None	replace
113	[BUG]  [BUGGY]  stream.removeChild(charno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  stream.removeChild(charno);  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(charno);	  stream.removeChild(token);    	non-compiled	[CE]  	3	None	replace
114	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  streamLineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  streamLineno  =  stream.getLineno()  +  1;	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	38	None	replace
115	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  int  streamLineno  =  stream.getLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  streamLineno  =  stream.getLineno()  -  1;	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	38	None	replace
116	[BUG]  [BUGGY]  Integer  lineno  =  stream.getLineno()  +  1;  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  lineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  lineno  =  stream.getLineno()  +  1;	  Integer    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	52	None	replace
117	[BUG]  [BUGGY]  Integer  streamLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  streamLineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  streamLineno  =  stream.getLineno()  +  1;	  Integer    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	52	None	replace
118	[BUG]  [BUGGY]  Integer  lineno  =  stream.getLineno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  lineno  =  stream.getLineno();  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  lineno  =  stream.getLineno();	  Integer    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	52	None	replace
119	[BUG]  [BUGGY]  Integer  startLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  startLineno  =  stream.getLineno()  +  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  startLineno  =  stream.getLineno()  +  1;	  Integer    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	52	None	replace
120	[BUG]  [BUGGY]  Integer  lineno  =  stream.getLineno()  -  1;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(     "     ",  token);  }      [BUGGY]  Integer  lineno  =  stream.getLineno()  -  1;  [BUGGY]      int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  lineno  =  stream.getLineno()  -  1;	  Integer    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	52	None	replace
