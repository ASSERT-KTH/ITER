bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(stream.getRemainingJSDocLine());  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getRemainingJSDocLine());	  stream.remove();    	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  stream.removeChild(this);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(this);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(this);	  stream.remove();    	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  stream.removeChild(token);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(token);	  stream.remove();    	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]  stream.removeChild(startLineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(startLineno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(startLineno);	  stream.remove();    	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]  stream.removeChild(stream.getLineno());  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(stream.getLineno());  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getLineno());	  stream.remove();    	non-compiled	[CE]  	3	None	replace
6	[BUG]  [BUGGY]  stream.setLineno(line.trim());  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(line.trim());  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line.trim());	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  stream.update(token);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.update(token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(token);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  stream.updateLineno(line);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.updateLineno(line);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(line);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  stream.setLineno(line);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(line);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(line);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  stream.remove(line);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.remove(line);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.remove(line);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
11	[BUG]  [BUGGY]  stream.update(line,  token);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.update(line,  token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.update(line,  token);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
12	[BUG]  [BUGGY]  stream.setCharno(line.trim());  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(line.trim());  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(line.trim());	  stream.flush();    	non-compiled	[CE]  	5	None	replace
13	[BUG]  [BUGGY]  stream.setCharno(token);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(token);	  stream.flush();    	non-compiled	[CE]  	5	None	replace
14	[BUG]  [BUGGY]  int  lineno  =  stream.getLineno();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  int  lineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  lineno  =  stream.getLineno();	  stream.getLineno();    	non-compiled	[CE]  	4	None	replace
15	[BUG]  [BUGGY]  stream.getLineno()  +  1;  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.getLineno()  +  1;  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.getLineno()  +  1;	  stream.getLineno();    	non-compiled	[CE]  	4	None	replace
16	[BUG]  [BUGGY]  stream.setLineno(token);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(token);	  stream.getLineno();    	non-compiled	[CE]  	4	None	replace
17	[BUG]  [BUGGY]  stream.setCharno(endCharno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(endCharno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(endCharno);	  stream.getLineno();    	non-compiled	[CE]  	4	None	replace
18	[BUG]  [BUGGY]  int  endLineno  =  stream.getEndLineno();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  int  endLineno  =  stream.getEndLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  endLineno  =  stream.getEndLineno();	      	non-compiled	[CE]  	8	None	replace
19	[BUG]  [BUGGY]  int  startLineno  =  stream.getLineno();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  int  startLineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  startLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
20	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  Integer  endLineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
21	[BUG]  [BUGGY]  JsDocToken  stream  =  option.getJsDocToken();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  JsDocToken  stream  =  option.getJsDocToken();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  option.getJsDocToken();	      	non-compiled	[CE]  	8	None	replace
22	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  Integer  endLineno  =  stream.getLineno()  +  1;  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  endLineno  =  stream.getLineno()  +  1;	      	non-compiled	[CE]  	8	None	replace
23	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  int  endLineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
24	[BUG]  [BUGGY]  stream.setCharno(lineno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(lineno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(lineno);	  stream.setCharno(endLineno);    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  stream.setCharno(endLineno  +  1);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(endLineno  +  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(endLineno  +  1);	  stream.setCharno(endLineno);    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  stream.setLineno(startLineno);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(startLineno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startLineno);	  stream.setCharno(endLineno);    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  stream.setLineno(lineno  +  1);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(lineno  +  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(lineno  +  1);	  stream.setLineno(lineno);    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  stream.setLineno(startCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(startCharno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(startCharno);	  stream.setLineno(lineno);    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  stream.setLineno(lineno  -  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(lineno  -  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(lineno  -  1);	  stream.setLineno(lineno);    	non-compiled	[CE]  	1	None	replace
30	[BUG]  [BUGGY]  stream.setCharno(startCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(startCharno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(startCharno);	  stream.setLineno(lineno);    	non-compiled	[CE]  	1	None	replace
31	[BUG]  [BUGGY]  stream.setLineno(endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(endCharno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(endCharno);	  stream.setLineno(lineno);    	non-compiled	[CE]  	1	None	replace
32	[BUG]  [BUGGY]  stream.removeLineno();  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeLineno();	  stream.updateLineno();    	non-compiled	[CE]  	9	None	replace
33	[BUG]  [BUGGY]  stream.setLineno(endLineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLineno(endLineno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLineno(endLineno);	  stream.setCharno(startLineno);    	non-compiled	[CE]  	6	None	replace
34	[BUG]  [BUGGY]  stream.setCharno(endLineno  -  1);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(endLineno  -  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(endLineno  -  1);	  stream.setCharno(endLineno);    	non-compiled	[CE]  	7	None	replace
35	[BUG]  [BUGGY]  stream.setCharno(startLineno  +  1);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(startLineno  +  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(startLineno  +  1);	  stream.setCharno(startLineno);    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  stream.clear();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.clear();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.clear();	  stream.reset();    	non-compiled	[CE]  	2	None	replace
37	[BUG]  [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.addToDebugLog( "Unreachable: "  +  token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Unreachable: "  +  token);	  stream.reset();    	non-compiled	[CE]  	2	None	replace
38	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  int  streamLineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	int  streamLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
39	[BUG]  [BUGGY]  JsDocToken  stream  =  token.trim();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  JsDocToken  stream  =  token.trim();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.trim();	      	non-compiled	[CE]  	8	None	replace
40	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getJSDocToken();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  JsDocToken  stream  =  token.getJSDocToken();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.getJSDocToken();	      	non-compiled	[CE]  	8	None	replace
41	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getJSDoc();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  JsDocToken  stream  =  token.getJSDoc();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JsDocToken  stream  =  token.getJSDoc();	      	non-compiled	[CE]  	8	None	replace
42	[BUG]  [BUGGY]  stream.setRemainingJSDocLine(token);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setRemainingJSDocLine(token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setRemainingJSDocLine(token);	  stream.remove();    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  stream.removeChild(stream.getRemainingJSDoc());  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.removeChild(stream.getRemainingJSDoc());  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.removeChild(stream.getRemainingJSDoc());	  stream.remove();    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  stream.deleteLineno();  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.deleteLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.deleteLineno();	  stream.updateLineno();    	non-compiled	[CE]  	9	None	replace
45	[BUG]  [BUGGY]  stream.getRemainingJSDocLine();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.getRemainingJSDocLine();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.getRemainingJSDocLine();	  stream.close();    	non-compiled	[CE]  	10	None	replace
46	[BUG]  [BUGGY]  stream.setLength(0);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setLength(0);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setLength(0);	  stream.close();    	non-compiled	[CE]  	10	None	replace
47	[BUG]  [BUGGY]  stream.getRemainingJSDocBuilder();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.getRemainingJSDocBuilder();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.getRemainingJSDocBuilder();	  stream.close();    	non-compiled	[CE]  	10	None	replace
48	[BUG]  [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.addToDebugLog( "Single  line: "  +  token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "Single  line: "  +  token);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
49	[BUG]  [BUGGY]  stream.addToDebugLog( "SingLE_LINE: "  +  token);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.addToDebugLog( "SingLE_LINE: "  +  token);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.addToDebugLog( "SingLE_LINE: "  +  token);	  stream.update(line);    	non-compiled	[CE]  	11	None	replace
50	[BUG]  [BUGGY]  stream.updateLineno(lineno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.updateLineno(lineno);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.updateLineno(lineno);	  stream.updateLineno();    	non-compiled	[CE]  	9	None	replace
51	[BUG]  [BUGGY]  stream.clearLineno();  [CE]  [FE]          ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.clearLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.clearLineno();	  stream.updateLineno();    	non-compiled	[CE]  	9	None	replace
52	[BUG]  [BUGGY]  Integer  streamLineno  =  stream.getLineno();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  Integer  streamLineno  =  stream.getLineno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	Integer  streamLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
53	[BUG]  [BUGGY]  JSDocToken  stream  =  option.getJSDocToken();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  JSDocToken  stream  =  option.getJSDocToken();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	JSDocToken  stream  =  option.getJSDocToken();	      	non-compiled	[CE]  	8	None	replace
54	[BUG]  [BUGGY]  stream.setCharno(startLineno  -  1);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.setCharno(startLineno  -  1);  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.setCharno(startLineno  -  1);	  stream.setCharno(startLineno);    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  stream.getCharno();  [CE]  [FE]              ComparisonFailure    [CONTEXT]    WhitespaceOption  option)  {  if  (token  ==  JsDocToken.EOC  ||  token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOF)  {  return  new  ExtractionInfo(   "   ",  token);  }    [BUGGY]  stream.getCharno();  [BUGGY]    int  startLineno  =  stream.getLineno();  int  startCharno  =  stream.getCharno()  +  1;  String  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  line.trim();  }  StringBuilder  builder  =  new  StringBuilder();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2279211529192759	1337	1337	4	replace	stream.getCharno();	  stream.getLineno();    	non-compiled	[CE]  	4	None	replace
