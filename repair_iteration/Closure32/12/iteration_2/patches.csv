bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(t));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(t));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(t));	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append( "] ");  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
6	[BUG]  [BUGGY]  jsdocBuilder.append( "] ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( "] ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( "] ");	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
7	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.build();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.build();	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
8	[BUG]  [BUGGY]  JSDocToken  stream  =  builder.build();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  builder.build();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  builder.build();	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
9	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.start();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.start();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.start();	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
10	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.build(token);  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.build(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.build(token);	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
11	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharno()  -  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharno()  -  1;  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharno()  -  1;	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
12	[BUG]  [BUGGY]  int  streamCharno  =  stream.getLineno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getLineno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getLineno();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
13	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharno()  +  1;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharno()  +  1;  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharno()  +  1;	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
14	[BUG]  [BUGGY]  int  streamCharno  =  jsdocBuilder.getCharno();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  jsdocBuilder.getCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  jsdocBuilder.getCharno();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
15	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharnoIndex();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharnoIndex();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharnoIndex();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
16	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharnoInstantiator();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharnoInstantiator();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharnoInstantiator();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
17	[BUG]  [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
18	[BUG]  [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
19	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
20	[BUG]  [BUGGY]  Integer  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Integer  line  =  stream.getRemainingJSDocLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Integer  line  =  stream.getRemainingJSDocLine();	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
21	[BUG]  [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(stream!=  null)  {  builder.append( ", ");  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
22	[BUG]  [BUGGY]  if(line!=  null)  {  if(stream  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(stream  ==  null)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(stream  ==  null)  {  builder.append('  ');  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
23	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
24	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
25	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
26	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
27	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	63	None	replace
28	[BUG]  [BUGGY]  if(token!=  JsDocToken.END  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	63	None	replace
29	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	63	None	replace
30	[BUG]  [BUGGY]  jsdocBuilder.append( ",n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( ",n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( ",n ");	  jsdocBuilder.append(   ",   ");    	non-compiled	[CE]  	50	None	replace
31	[BUG]  [BUGGY]  jsdocBuilder.append( "n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( "n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( "n ");	  jsdocBuilder.append(   ",   ");    	non-compiled	[CE]  	50	None	replace
32	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	94	None	replace
33	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	94	None	replace
34	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	94	None	replace
35	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	94	None	replace
36	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
37	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
38	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
39	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
40	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
41	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	1	None	replace
42	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	1	None	replace
43	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	1	None	replace
44	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	1	None	replace
45	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
46	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
47	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
48	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
49	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
50	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
51	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
52	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
53	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endCharno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
54	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
55	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
56	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endCharno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
57	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endCharno,  endLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  endCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
58	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
59	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
60	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
61	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
64	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
65	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
66	[BUG]  [BUGGY]  Builder.append(toString(line));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(line));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
67	[BUG]  [BUGGY]  builder.append(toString(line));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append(toString(line));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
68	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
69	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
70	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
71	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
72	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
73	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
74	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  startLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  startLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endCharno,  startLineno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
75	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  linen  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  linen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endCharno,  linen	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
76	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  line  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endCharno,  line	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
77	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  line  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endLineno,  line	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
78	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	126	None	replace
79	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	126	None	replace
80	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
81	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
82	[BUG]  [BUGGY]  ||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
83	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
84	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
85	[BUG]  [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
86	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
87	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
88	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
89	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(line,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	6	None	replace
90	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
91	[BUG]  [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
92	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
93	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
94	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
95	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
96	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
97	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendText(token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.appendText(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.appendText(token);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
98	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(unreadToken);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(unreadToken);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(unreadToken);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
99	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(this.unreadToken);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(this.unreadToken);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(this.unreadToken);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
100	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  token);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  token);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
101	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	7	None	replace
102	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	7	None	replace
103	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	7	None	replace
104	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	60	None	replace
105	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	60	None	replace
106	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
107	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
108	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
109	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_VALUE  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_VALUE  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_VALUE  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
110	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
111	[BUG]  [BUGGY]  Builder.append('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append('  ');	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
112	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
113	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
114	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
115	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
116	[BUG]  [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
117	[BUG]  [BUGGY]  ||  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
118	[BUG]  [BUGGY]  &&  stream.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
119	[BUG]  [BUGGY]  &&  token.equals(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token.equals(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token.equals(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
120	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
121	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
122	[BUG]  [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
123	[BUG]  [BUGGY]  if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
124	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN  ||  line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_TOKEN  ||  line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN  ||  line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
125	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN  ||  line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_TOKEN  ||  line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN  ||  line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
126	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
127	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
128	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
129	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
130	[BUG]  [BUGGY]  int  lineno  =  stream.getLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  lineno  =  stream.getLineno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  lineno  =  stream.getLineno();	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
131	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno()  -  1;  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamLineno  =  stream.getLineno()  -  1;  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamLineno  =  stream.getLineno()  -  1;	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
132	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno()  +  1;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamLineno  =  stream.getLineno()  +  1;  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamLineno  =  stream.getLineno()  +  1;	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
133	[BUG]  [BUGGY]  int  lineno  =  stream.getCharno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  lineno  =  stream.getCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  lineno  =  stream.getCharno();	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
134	[BUG]  [BUGGY]  int  streamLineno  =  stream.getCharno();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamLineno  =  stream.getCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamLineno  =  stream.getCharno();	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
135	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(line,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	24	None	replace
136	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno);	  jsdocBuilder.markText(line,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	24	None	replace
137	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
138	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
139	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
140	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
141	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
142	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
143	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(text,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(text,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(text,  lineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
144	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
145	[BUG]  [BUGGY]  jsdocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
146	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(text,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(text,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(text,  endLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
147	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  startLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  startLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endCharno,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    line,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	73	None	replace
148	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    line,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	73	None	replace
149	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    line,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	73	None	replace
150	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  sourceFile,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  sourceFile,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  sourceFile,  startCharno,  endLineno,  endCharno);	  builder.append(   "n   ");    	non-compiled	[CE]  	51	None	replace
151	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
152	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
153	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
154	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
155	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
156	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
157	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
158	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
159	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
160	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
161	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
162	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
163	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  token!=  null)  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
164	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  token.endsWith( "n "))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
165	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {  builder.append(toString(token));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_NOT_FOUND))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
166	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	104	None	replace
167	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	104	None	replace
168	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	104	None	replace
169	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	104	None	replace
170	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
171	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
172	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
173	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
174	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
175	[BUG]  [BUGGY]  builder.append( ",null ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ",null ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ",null ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
176	[BUG]  [BUGGY]  jsdocBuilder.append( ",null ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( ",null ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( ",null ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
177	[BUG]  [BUGGY]  builder.append( ",no ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ",no ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ",no ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
178	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
179	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
180	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
181	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
182	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
183	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
184	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
185	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
186	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  token,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  token,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  token,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
187	[BUG]  [BUGGY]  Builder.append(token).append('  ');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(token).append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(token).append('  ');	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
188	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getJSDocToken();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getJSDocToken();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getJSDocToken();	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
189	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
190	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
191	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
192	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
193	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
194	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	78	None	replace
195	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
196	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
197	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
198	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
199	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
200	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  lineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	59	None	replace
201	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  endCharno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	59	None	replace
202	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endLineno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	59	None	replace
203	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
204	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
205	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
206	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
207	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
208	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
209	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
210	[BUG]  [BUGGY]  &&  endCharn!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharn!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharn!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
211	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
212	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
213	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	26	None	replace
214	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	26	None	replace
215	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  charno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  charno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  charno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
216	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
217	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(stream,  charno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(stream,  charno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(stream,  charno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
218	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  charno,  endCharno,  startLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  charno,  endCharno,  startLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  charno,  endCharno,  startLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
219	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  startLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  startLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  startLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
220	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
221	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
222	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
223	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
224	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
225	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	36	None	replace
226	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	36	None	replace
227	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
228	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(builder,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(builder,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(builder,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
229	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(stream,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
230	[BUG]  [BUGGY]  line  =  stream.getLineno();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getLineno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getLineno();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
231	[BUG]  [BUGGY]  line  =  stream.getLength();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getLength();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getLength();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
232	[BUG]  [BUGGY]  line  =  stream.getLineNumber();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getLineNumber();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getLineNumber();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
233	[BUG]  [BUGGY]  line  =  stream.getCharno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getCharno();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
234	[BUG]  [BUGGY]  line  =  stream.getLowerBound();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getLowerBound();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getLowerBound();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
235	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	88	None	replace
236	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	88	None	replace
237	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
238	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
239	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
240	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
241	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
242	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
243	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	93	None	replace
244	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	93	None	replace
245	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(builder);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(builder);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(builder);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
246	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(false);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(false);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(false);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
247	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(lineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(lineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(lineno);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
248	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(startLineno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(startLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(startLineno);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
249	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(token);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
250	[BUG]  [BUGGY]  JsDocToken  stream  =  getStreamType();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStreamType();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStreamType();	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
251	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
252	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
253	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer,  token));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer,  token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer,  token));	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
254	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(subline,  startLineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(subline,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(subline,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	12	None	replace
255	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	12	None	replace
256	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	12	None	replace
257	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getRemainingJSDocLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getRemainingJSDocLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getRemainingJSDocLine();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
258	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getNext();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getNext();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getNext();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
259	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getFirstChild();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getFirstChild();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getFirstChild();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
260	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getRemainingJSDoc();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getRemainingJSDoc();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getRemainingJSDoc();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
261	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getCurrentToken();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getCurrentToken();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getCurrentToken();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
262	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getSingleJSDocLine();  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getSingleJSDocLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getSingleJSDocLine();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
263	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endLineno);    	non-compiled	[CE]  	70	None	replace
264	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endLineno);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endLineno);    	non-compiled	[CE]  	70	None	replace
265	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endLineno);    	non-compiled	[CE]  	70	None	replace
266	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endLineno);    	non-compiled	[CE]  	70	None	replace
267	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	38	None	replace
268	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	38	None	replace
269	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
270	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "n ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "n ");  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
271	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
272	[BUG]  [BUGGY]  ||  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
273	[BUG]  [BUGGY]  &&  stream.getLineno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getLineno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getLineno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
274	[BUG]  [BUGGY]  &&  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
275	[BUG]  [BUGGY]  &&  stream.getCharno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getCharno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getCharno()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
276	[BUG]  [BUGGY]  &&  stream.getRemainingJSDocLine()  ==  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getRemainingJSDocLine()  ==  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getRemainingJSDocLine()  ==  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
277	[BUG]  [BUGGY]  JSDocToken  stream  =  builder.getState();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  builder.getState();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  builder.getState();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
278	[BUG]  [BUGGY]  JSDocToken  stream  =  jsdocBuilder.getState();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  jsdocBuilder.getState();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  jsdocBuilder.getState();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
279	[BUG]  [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  fileLevelJsDocBuilder.getState();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  fileLevelJsDocBuilder.getState();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
280	[BUG]  [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getState();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.getState();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  this.fileLevelJsDocBuilder.getState();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
281	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
282	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
283	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
284	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.VALUE_STRING  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
285	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token  ==  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
286	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
287	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
288	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
289	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(lineno,  startLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
290	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
291	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
292	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
293	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
294	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
295	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
296	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
297	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
298	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
299	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
300	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  line  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  line	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
301	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
302	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
303	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
304	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
305	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
306	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
307	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.equals( " "))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
308	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "n "))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
309	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "- "))  {  builder.append(toString(token));  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "- "))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.endsWith( "- "))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
310	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    	non-compiled	[CE]  	119	None	replace
311	[BUG]  [BUGGY]  &&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    	non-compiled	[CE]  	119	None	replace
312	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_FALSE)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_FALSE)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_FALSE)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    	non-compiled	[CE]  	119	None	replace
313	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  endCharno,  startCharno,  endLineno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(lineno,  endCharno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(lineno,  endCharno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
314	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(lineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
315	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endCharno,  startLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endCharno,  startLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endCharno,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
316	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "n ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "n ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "n ");  }	  if(stream!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	136	None	replace
317	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( ", ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( ", ");  }	  if(stream!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	136	None	replace
318	[BUG]  [BUGGY]  jsdocBuilder.appendText(token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.appendText(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.appendText(token);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
319	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
320	[BUG]  [BUGGY]  jsdocBuilder.appendText( "n ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.appendText( "n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.appendText( "n ");	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
321	[BUG]  [BUGGY]  jsdocBuilder.appendText( ", ");  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.appendText( ", ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.appendText( ", ");	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
322	[BUG]  [BUGGY]  jsdocBuilder.appendText('  ');  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.appendText('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.appendText('  ');	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
323	[BUG]  [BUGGY]  jsdocBuilder.appendText('n');  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.appendText('n');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.appendText('n');	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
324	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
325	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
326	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
327	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
328	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
329	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	127	None	replace
330	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	127	None	replace
331	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
332	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
333	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
334	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
335	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
336	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT)  {  builder.append(token);  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
337	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append( ", ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
338	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(line));	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
339	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
340	[BUG]  [BUGGY]  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
341	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(line,    endLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	47	None	replace
342	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
343	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
344	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
345	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >>  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >>  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  >>  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
346	[BUG]  [BUGGY]  if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	65	None	replace
347	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
348	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
349	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(toString(token));  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
350	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
351	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token);  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
352	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token).append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token).append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append(token).append('  ');  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
353	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	80	None	replace
354	[BUG]  [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	80	None	replace
355	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	80	None	replace
356	[BUG]  [BUGGY]  mockToken(JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  mockToken(JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	mockToken(JsDocToken.START_TOKEN)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
357	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_TOKEN)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_TOKEN)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
358	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append( "  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append( "  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TOKEN)  {  builder.append( "  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
359	[BUG]  [BUGGY]  if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
360	[BUG]  [BUGGY]  if(line!=  null)  {  if(!ignoreStar)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(!ignoreStar)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(!ignoreStar)  {  builder.append(token);  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
361	[BUG]  [BUGGY]  if(line!=  null)  {  if(ignoreStar)  {  builder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(ignoreStar)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(ignoreStar)  {  builder.append(token);  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
362	[BUG]  [BUGGY]  InvalidJsDocToken(token)  {  if(ignoreStar)  {  builder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  InvalidJsDocToken(token)  {  if(ignoreStar)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	InvalidJsDocToken(token)  {  if(ignoreStar)  {  builder.append(token);  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
363	[BUG]  [BUGGY]  if(line!=  null)  {  if(!ignoreStar)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(!ignoreStar)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(!ignoreStar)  {  builder.append(toString(token));  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
364	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	58	None	replace
365	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	58	None	replace
366	[BUG]  [BUGGY]  if(token!=  JsDocToken.END)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	58	None	replace
367	[BUG]  [BUGGY]  Builder.append( ", ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append( ", ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append( ", ");	  if(token!=    JsDocToken.STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	112	None	replace
368	[BUG]  [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	112	None	replace
369	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
370	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
371	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
372	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
373	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
374	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	90	None	replace
375	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.END_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	128	None	replace
376	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.END_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	128	None	replace
377	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token  ==  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.END_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	128	None	replace
378	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
379	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
380	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
381	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
382	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(builder,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	23	None	replace
383	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	25	None	replace
384	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_GLOBAL)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_GLOBAL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_GLOBAL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_GLOBAL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	138	None	replace
385	[BUG]  [BUGGY]  builder.append( "  }  n ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }  n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }  n ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
386	[BUG]  [BUGGY]  jsdocBuilder.append( "  }   ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( "  }   ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( "  }   ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
387	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLineno,  endCharno);	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
388	[BUG]  [BUGGY]  Builder.append(toString(buffer));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(buffer));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(buffer));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
389	[BUG]  [BUGGY]  builder.append(toString(buffer));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append(toString(buffer));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append(toString(buffer));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
390	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(buffer));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
391	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
392	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(buffer));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
393	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
394	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  line,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  line,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  line,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
395	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
396	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
397	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
398	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
399	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  endLineno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
400	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
401	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  null)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
402	[BUG]  [BUGGY]  ||  token!=  null)  {  builder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  null)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
403	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  null)  {  builder.append('  ');  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
404	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ", ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append( ", ");  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
405	[BUG]  [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
406	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
407	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
408	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	141	None	replace
409	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
410	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
411	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
412	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
413	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
414	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
415	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
416	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
417	[BUG]  [BUGGY]  &&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
418	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
419	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
420	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
421	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
422	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
423	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
424	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
425	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharn  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
426	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TRUE)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_TRUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TRUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TAKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	54	None	replace
427	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(lineno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(lineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(lineno);	  JSDocToken    stream    =    getStream();    	non-compiled	[CE]  	122	None	replace
428	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(false);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(false);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(false);	  JSDocToken    stream    =    getStream();    	non-compiled	[CE]  	122	None	replace
429	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(builder);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(builder);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(builder);	  JSDocToken    stream    =    getStream();    	non-compiled	[CE]  	122	None	replace
430	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(startLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(startLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(startLineno);	  JSDocToken    stream    =    getStream();    	non-compiled	[CE]  	122	None	replace
431	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
432	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
433	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	105	None	replace
434	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	105	None	replace
435	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	105	None	replace
436	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token  ==  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	37	None	replace
437	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    line,    endLineno,    endCharno);    	non-compiled	[CE]  	48	None	replace
438	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
439	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
440	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
441	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
442	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
443	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
444	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
445	[BUG]  [BUGGY]  &&  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
446	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
447	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
448	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
449	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
450	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  line,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(builder,  line,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(builder,  line,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
451	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endCharno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  endCharno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endCharno,  startCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
452	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
453	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token.equals( "   "))  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token.equals( "   "))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token.equals( "   "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    &&    token.equals(   "   "))    {    builder.append(toString(token));    }    	non-compiled	[CE]  	107	None	replace
454	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "* "))  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "* "))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "* "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    &&    token.equals(   "   "))    {    builder.append(toString(token));    }    	non-compiled	[CE]  	107	None	replace
455	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "- "))  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "- "))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "- "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    &&    token.equals(   "   "))    {    builder.append(toString(token));    }    	non-compiled	[CE]  	107	None	replace
456	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "n "))  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "n "))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( "n "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    &&    token.equals(   "   "))    {    builder.append(toString(token));    }    	non-compiled	[CE]  	107	None	replace
457	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_BLOCK)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
458	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_BLOCK)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
459	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_BLOCK)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
460	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_BLOCK)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
461	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_BLOCK)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
462	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  >=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
463	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
464	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
465	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
466	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
467	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
468	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
469	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
470	[BUG]  [BUGGY]  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token  ==  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
471	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
472	[BUG]  [BUGGY]  &&  token!=  null)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  null)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  null)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
473	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
474	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
475	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
476	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
477	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
478	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
479	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	67	None	replace
480	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	67	None	replace
481	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  startLineno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  startLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  endCharno,  startLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno);    	non-compiled	[CE]  	67	None	replace
482	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
483	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
484	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
485	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
486	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
487	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getRemainingJSDocLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getRemainingJSDocLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getRemainingJSDocLine();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
488	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getNext();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getNext();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getNext();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
489	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
490	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
491	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(stream,  startLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
492	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
493	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
494	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
495	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
496	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
497	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_FLOAT)  {  builder.append(toString(token));	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
498	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
499	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
500	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
501	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
502	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
503	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( ",  null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( ",  null ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( ",  null ");  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	115	None	replace
504	[BUG]  [BUGGY]  mockToken(JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  mockToken(JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	mockToken(JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	115	None	replace
505	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(startLineno,  endLineno,  startCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	41	None	replace
506	[BUG]  [BUGGY]  &&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
507	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
508	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
509	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
510	[BUG]  [BUGGY]  &&  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
511	[BUG]  [BUGGY]  Builder.append(toString(value));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(value));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(value));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
512	[BUG]  [BUGGY]  if(value!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(value!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(value!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
513	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
514	[BUG]  [BUGGY]  builder.append(toString(value));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append(toString(value));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append(toString(value));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
515	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(value));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
516	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(value));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
517	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
518	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
519	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
520	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharn  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  endCharno,  startLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
521	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
522	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
523	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_EOF)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_EOF)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_EOF)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
524	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
525	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append(token);  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
526	[BUG]  [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
527	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.END)  {  builder.append(token);  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
528	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(token);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(token);	  JSDocToken    stream    =    getStream(line);    	non-compiled	[CE]  	123	None	replace
529	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(line,  builder);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(line,  builder);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(line,  builder);	  JSDocToken    stream    =    getStream(line);    	non-compiled	[CE]  	123	None	replace
530	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(line);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(line);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(line);	  JSDocToken    stream    =    getStream(line);    	non-compiled	[CE]  	123	None	replace
531	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  endCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(builder,  startLineno,  endCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
532	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
533	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(builder,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(builder,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
534	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
535	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
536	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
537	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
538	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
539	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
540	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
541	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
542	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  line  =  stream.getRemainingJSDo  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  line  =  stream.getRemainingJSDo  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  line  =  stream.getRemainingJSDo	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
543	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  continue;  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  continue;  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  continue;  }	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
544	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getRemainingJSDoc();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getRemainingJSDoc();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getRemainingJSDoc();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
545	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getSingleNode();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getSingleNode();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getSingleNode();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
546	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getSingleNode();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getSingleNode();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getSingleNode();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
547	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  lineno,  startCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  lineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endCharno,  lineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLineno    	non-compiled	[CE]  	43	None	replace
548	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  startCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(lineno,  endCharno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(lineno,  endCharno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLineno    	non-compiled	[CE]  	43	None	replace
549	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	142	None	replace
550	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(buffer));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
551	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMPTY)  {  builder.append(toString(buffer));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_EMPTY)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMPTY)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
552	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
553	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "  - ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "  - ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "  - ");  }	  if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	145	None	replace
554	[BUG]  [BUGGY]  line  =  stream.getSingleLine();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getSingleLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getSingleLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
555	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno()  -  startCharno;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamLineno  =  stream.getLineno()  -  startCharno;  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamLineno  =  stream.getLineno()  -  startCharno;	  int    streamLineno    =    stream.getLineno();    	non-compiled	[CE]  	45	None	replace
556	[BUG]  [BUGGY]  Builder.append(unreadToken);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(unreadToken);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(unreadToken);	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
557	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getJSDocToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getJSDocToken();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getJSDocToken();	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
558	[BUG]  [BUGGY]  Builder.append( "n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append( "n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append( "n ");	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
559	[BUG]  [BUGGY]  Builder.append(line);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(line);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(line);	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
560	[BUG]  [BUGGY]  if(line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
561	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  line!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
562	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  line  ==  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
563	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
564	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
565	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NUMBER_INT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_NUMBER_INT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NUMBER_INT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
566	[BUG]  [BUGGY]  &&  endCharn!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharn!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharn!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_NULL)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	99	None	replace
567	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
568	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
569	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
570	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(fileLevelJsDocBuilder!=  null)  {  if(stream!=  null)  {  builder.append('  ');  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
571	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	59	None	replace
572	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	59	None	replace
573	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLinen  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLinen	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
574	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
575	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
576	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
577	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	130	None	replace
578	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
579	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
580	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
581	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharn	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
582	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
583	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  end  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  end  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  end	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
584	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	64	None	replace
585	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
586	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
587	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
588	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append( "n ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append( "n ");  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
589	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TAKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	54	None	replace
590	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	41	None	replace
591	[BUG]  [BUGGY]  Builder.append(stream.getRemainingJSDocLine());  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(stream.getRemainingJSDocLine());  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(stream.getRemainingJSDocLine());	  if(stream!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	136	None	replace
592	[BUG]  [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START)  {  builder.append(token);  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
593	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.START)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
594	[BUG]  [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START)    {    builder.append(token);    }    	non-compiled	[CE]  	111	None	replace
595	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
596	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
597	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	31	None	replace
598	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  +  1);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  +  1);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  +  1);	  jsdocBuilder.markText(token,    endLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	26	None	replace
599	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.END_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	52	None	replace
600	[BUG]  [BUGGY]  builder.append( ",no-line ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ",no-line ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ",no-line ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
601	[BUG]  [BUGGY]  builder.append( ";n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ";n ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ";n ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
602	[BUG]  [BUGGY]  builder.append( ",none ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ",none ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ",none ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	49	None	replace
603	[BUG]  [BUGGY]  ||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
604	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
605	[BUG]  [BUGGY]  ||  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
606	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	80	None	replace
607	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	80	None	replace
608	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getParent();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.getParent();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
609	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.startState();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.startState();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.startState();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
610	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.reset();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.reset();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.reset();	  JSDocToken    stream    =    fileLevelJsDocBuilder.getState();    	non-compiled	[CE]  	71	None	replace
611	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
612	[BUG]  [BUGGY]  if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
613	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
614	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString());  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString());  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString());  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
615	[BUG]  [BUGGY]  if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(JsDocToken.FIELD_NAME));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(JsDocToken.FIELD_NAME));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(JsDocToken.FIELD_NAME));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
616	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
617	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
618	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(line,  endLineno,  startCharno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
619	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
620	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
621	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
622	[BUG]  [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
623	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	37	None	replace
624	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
625	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(value));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(value));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(value));    }    	non-compiled	[CE]  	89	None	replace
626	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    ||    token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	105	None	replace
627	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
628	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startCharno,  endLineno,  endCharno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	66	None	replace
629	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
630	[BUG]  [BUGGY]  ||  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	39	None	replace
631	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
632	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharn  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
633	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharn  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(line,  startLineno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
634	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_ARRAY  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_ARRAY  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_ARRAY  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	94	None	replace
635	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
636	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
637	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLinen  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(line,  startLineno,  startCharno,  endLinen	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
638	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
639	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
640	[BUG]  [BUGGY]  &&  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endCharno!=  stream.getRemainingJSDocLine())  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
641	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_OBJECT)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
642	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	40	None	replace
643	[BUG]  [BUGGY]  &&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
644	[BUG]  [BUGGY]  &&  stream.getDescription()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getDescription()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getDescription()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
645	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.buildFromParent();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.buildFromParent();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.buildFromParent();	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
646	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	38	None	replace
647	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
648	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
649	[BUG]  [BUGGY]  jsdocBuilder.append( ", ",  stream);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( ", ",  stream);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( ", ",  stream);	  jsdocBuilder.append(   ",   ");    	non-compiled	[CE]  	50	None	replace
650	[BUG]  [BUGGY]  jsdocBuilder.append(',');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append(',');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append(',');	  jsdocBuilder.append(   ",   ");    	non-compiled	[CE]  	50	None	replace
651	[BUG]  [BUGGY]  jsdocBuilder.append( "; ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.append( "; ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( "; ");	  jsdocBuilder.append(   ",   ");    	non-compiled	[CE]  	50	None	replace
652	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
653	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_THRESHOLD)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	97	None	replace
654	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
655	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
656	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    line,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	73	None	replace
657	[BUG]  [BUGGY]  Builder.append(toString(sourceFile));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(sourceFile));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(sourceFile));	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
658	[BUG]  [BUGGY]  Builder.append(toString(startLineno,  endLineno));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(startLineno,  endLineno));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(startLineno,  endLineno));	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
659	[BUG]  [BUGGY]  Builder.append(toString(startLineno,  startCharno));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.append(toString(startLineno,  startCharno));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(startLineno,  startCharno));	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
660	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
661	[BUG]  [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	58	None	replace
662	[BUG]  [BUGGY]  if(!ignoreStart)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(!ignoreStart)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(!ignoreStart)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	58	None	replace
663	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startLineno,  endCharno);	  jsdocBuilder.markText(line,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	24	None	replace
664	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
665	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
666	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
667	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
668	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
669	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharn	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	20	None	replace
670	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
671	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
672	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
673	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
674	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(line));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
675	[BUG]  [BUGGY]  builder.append('  }  ');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append('  }  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append('  }  ');	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
676	[BUG]  [BUGGY]  builder.append( "  }. ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }. ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }. ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
677	[BUG]  [BUGGY]  builder.append( "  }   ").append(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }   ").append(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }   ").append(token);	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
678	[BUG]  [BUGGY]  builder.append( "  }? ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }? ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }? ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
679	[BUG]  [BUGGY]  builder.append( "  }  : ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }  : ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }  : ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
680	[BUG]  [BUGGY]  JsDocToken  stream  =  token.next();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.next();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.next();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
681	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getSingleJSDoc();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getSingleJSDoc();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getSingleJSDoc();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
682	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
683	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
684	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
685	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	98	None	replace
686	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
687	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
688	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token!=  null)  {  builder.append(toString(token));  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
689	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  else  {  token  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  else  {  token  =  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  else  {  token  =  stream.getRemainingJSDocLine();  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
690	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
691	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
692	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
693	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);	  fileLevelJsDocBuilder.markText(token,    startLineno,    endLineno,    endLineno);    	non-compiled	[CE]  	70	None	replace
694	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
695	[BUG]  [BUGGY]  jsdocBuilder.markText(unreadToken);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(unreadToken);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(unreadToken);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
696	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
697	[BUG]  [BUGGY]  jsdocBuilder.markText(line);  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
698	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(buffer,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
699	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( ", ");  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( ", ");  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( ", ");  }  else  {  stream.getRemainingJSDocLine();  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
700	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.STRING  ||  token!=  JsDocToken.START)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	63	None	replace
701	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endChar  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endChar  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endChar	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
702	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
703	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append('  ');	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
704	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(line));  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(line));	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
705	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
706	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
707	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLinen  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  beginLineno,  startCharno,  endLinen	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	91	None	replace
708	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.END_ARRAY)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	128	None	replace
709	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
710	[BUG]  [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  startCharno,  endCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(lineno,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(lineno,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
711	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
712	[BUG]  [BUGGY]  JsDocToken  stream  =  getJsDocToken();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getJsDocToken();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getJsDocToken();	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
713	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream(0);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStream(0);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream(0);	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
714	[BUG]  [BUGGY]  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
715	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(buffer));	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
716	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  line,  startLineno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	9	None	replace
717	[BUG]  [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token  ==  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
718	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_EMPTY)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
719	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_EMBEDDED)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
720	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append('  ');  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
721	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( ", ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( ", ");  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
722	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( "] ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( "] ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  stream.getRemainingJSDocLine())  {  builder.append( "] ");  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
723	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startLineno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startLineno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startLineno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
724	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  startCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  endLineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
725	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(builder,  charno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(builder,  charno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(builder,  charno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
726	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  charno,  endLineno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  charno,  endLineno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  charno,  endLineno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
727	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
728	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
729	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
730	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
731	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
732	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
733	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
734	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  ||  token!=  JsDocToken.END_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
735	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_GLOBAL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	138	None	replace
736	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_GLOBAL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	138	None	replace
737	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ELEMENT)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ELEMENT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL  ||  token!=  JsDocToken.START_ELEMENT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_GLOBAL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	138	None	replace
738	[BUG]  [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	65	None	replace
739	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	65	None	replace
740	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLinen  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  lineno,  startCharno,  endLinen	  fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
741	[BUG]  [BUGGY]  &  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    	non-compiled	[CE]  	119	None	replace
742	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(line,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	6	None	replace
743	[BUG]  [BUGGY]  mockToken(JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  mockToken(JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	mockToken(JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
744	[BUG]  [BUGGY]  if(!ignoreStar  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(!ignoreStar  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(!ignoreStar  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
745	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token);  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
746	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
747	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
748	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
749	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
750	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
751	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(unreadToken,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	61	None	replace
752	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token!=  null)  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
753	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append('  ');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append('  ');	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
754	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token  ==  null)  {  builder.append(toString(token));  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token  ==  null)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME)||  token  ==  null)  {  builder.append(toString(token));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
755	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
756	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  builder.append(token);  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
757	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "] ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "] ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "] ");  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
758	[BUG]  [BUGGY]  ||  token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
759	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLine  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLine  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLine	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
760	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
761	[BUG]  [BUGGY]  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
762	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  line	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	81	None	replace
763	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
764	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
765	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  line);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  line);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  line);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
766	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
767	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
768	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
769	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
770	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
771	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
772	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
773	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
774	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.END_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.START_ASCII)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	96	None	replace
775	[BUG]  [BUGGY]  builder.append( ": ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( ": ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ": ");	  builder.append(   "n   ");    	non-compiled	[CE]  	51	None	replace
776	[BUG]  [BUGGY]  builder.append( "  - ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  - ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  - ");	  builder.append(   "n   ");    	non-compiled	[CE]  	51	None	replace
777	[BUG]  [BUGGY]  builder.append( "[ ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "[ ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "[ ");	  builder.append(   "n   ");    	non-compiled	[CE]  	51	None	replace
778	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
779	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
780	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
781	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startCharno,  endCharno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startCharno,  endCharno);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
782	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  startCharno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  startCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  startCharno);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
783	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  endLineno);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
784	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	38	None	replace
785	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
786	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT)  {  builder.append('  ');  }	  if(line!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	95	None	replace
787	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  line  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  line  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  endCharno,  line	  fileLevelJsDocBuilder.markText(multilineText,    charno,    startCharno,    endLineno    	non-compiled	[CE]  	55	None	replace
788	[BUG]  [BUGGY]  line  =  stream.getRemainingLine();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  line  =  stream.getRemainingLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getRemainingLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	44	None	replace
789	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.START_VALUE)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	129	None	replace
790	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
791	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
792	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	30	None	replace
793	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
794	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  }	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	133	None	replace
795	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  sourceName,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  sourceName,  startLineno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  sourceName,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    endLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	26	None	replace
796	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLineno    	non-compiled	[CE]  	83	None	replace
797	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLineno    	non-compiled	[CE]  	83	None	replace
798	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.END_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	2	None	replace
799	[BUG]  [BUGGY]  &&  stream.getRemainingJSDocLine()!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream.getRemainingJSDocLine()!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getRemainingJSDocLine()!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream.getRemainingJSDocLine()!=    endLineno)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	82	None	replace
800	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	18	None	replace
801	[BUG]  [BUGGY]  if(line!=  null)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(ignoreStar)  {  builder.append(token).append('  ');  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
802	[BUG]  [BUGGY]  if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(!ignoreStart)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  if(!ignoreStar)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	135	None	replace
803	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( ", ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( ", ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( ", ");	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
804	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    builder.append(toString(token));    	non-compiled	[CE]  	118	None	replace
805	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	126	None	replace
806	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.START_OBJECT    &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	126	None	replace
807	[BUG]  [BUGGY]  JsDocToken  stream  =  getStreamInfo();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStreamInfo();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStreamInfo();	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
808	[BUG]  [BUGGY]  JsDocToken  stream  =  getStreamForPosition();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  getStreamForPosition();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStreamForPosition();	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
809	[BUG]  [BUGGY]  JsDocToken  stream  =  createStream();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  createStream();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  createStream();	  JsDocToken    stream    =    getStream();    	non-compiled	[CE]  	121	None	replace
810	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(line,  endLineno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(line,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(line,  endLineno);	  JSDocToken    stream    =    getStream(line);    	non-compiled	[CE]  	123	None	replace
811	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(line,  endCharno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  getStream(line,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(line,  endCharno);	  JSDocToken    stream    =    getStream(line);    	non-compiled	[CE]  	123	None	replace
812	[BUG]  [BUGGY]  if(line  ==  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line  ==  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line  ==  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }	  if(line!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	141	None	replace
813	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharno	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	102	None	replace
814	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
815	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }	  if(line!=    stream.getRemainingJSDocLine())    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	134	None	replace
816	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  charno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  charno,  endCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  charno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	93	None	replace
817	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
818	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(buffer));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(buffer));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(buffer));    }    	non-compiled	[CE]  	116	None	replace
819	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  sourceName,  line,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  sourceName,  line,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  sourceName,  line,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    line,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	73	None	replace
820	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
821	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharn	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	16	None	replace
822	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
823	[BUG]  [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
824	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  endCharno,  endLineno,  endCharno);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  endCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(text,  startLineno,  endCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(text,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	87	None	replace
825	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	36	None	replace
826	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
827	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());	  ||    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	11	None	replace
828	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(toString(line));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append(toString(line));  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	139	None	replace
829	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  lineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
830	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  startCharno,  endLineno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
831	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  null,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  null,  startLineno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  null,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
832	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
833	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  null,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  null,  startLineno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  null,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	74	None	replace
834	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharnoInOperator();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharnoInOperator();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharnoInOperator();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
835	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharnoInput();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  int  streamCharno  =  stream.getCharnoInput();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharnoInput();	  int    streamCharno    =    stream.getCharno();    	non-compiled	[CE]  	69	None	replace
836	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.STRING  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.STRING  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	62	None	replace
837	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(token,  line,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	41	None	replace
838	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  stream,  startLineno,  endCharno	  &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	41	None	replace
839	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());	  ||    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	19	None	replace
840	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	81	None	replace
841	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(token,  stream,  startLineno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	81	None	replace
842	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.START_GLOBAL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	138	None	replace
843	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
844	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  FileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	76	None	replace
845	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
846	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
847	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLON)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLON)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLON)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
848	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLLECTION)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLLECTION)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF  &&  token!=  JsDocToken.START_COLLECTION)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_EOF)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	57	None	replace
849	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharn	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	17	None	replace
850	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
851	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_DOCUMENT)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append('    ');    }    	non-compiled	[CE]  	140	None	replace
852	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1);  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1);	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
853	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  +  1	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	21	None	replace
854	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  endLineno,  startCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  endLineno,  startCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  endLineno,  startCharno	  fileLevelJsDocBuilder.markText(multilineText,    line,    startCharno,    endLineno    	non-compiled	[CE]  	42	None	replace
855	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append('    ');    }    	non-compiled	[CE]  	114	None	replace
856	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	28	None	replace
857	[BUG]  [BUGGY]  if(line!=  JsDocToken.STRING)  {  builder.append( ", ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.STRING)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.STRING)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	112	None	replace
858	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
859	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno,  endCharno	  ||    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	29	None	replace
860	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  builder.append('n');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	143	None	replace
861	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  +  1);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  +  1);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  +  1);	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
862	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
863	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno	  fileLevelJsDocBuilder.markText(multilineText,    endLineno,    startCharno,    endLinen    	non-compiled	[CE]  	14	None	replace
864	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(buffer,  endLineno,  startCharno,  endCharno);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
865	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(startLineno,  startCharno,  endLineno,  endCharno);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
866	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(buffer,  token);  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(buffer,  token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(buffer,  token);	  fileLevelJsDocBuilder.markText(token);    	non-compiled	[CE]  	68	None	replace
867	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME)&&  token.length()  >  0)  {  builder.append(toString(token));  }	  &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	131	None	replace
868	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    token!=    JsDocToken.VALUE_STRING)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	117	None	replace
869	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  unreadToken);  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  unreadToken);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  unreadToken);	  jsdocBuilder.markText(token);    	non-compiled	[CE]  	46	None	replace
870	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
871	[BUG]  [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLinen  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLinen	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	84	None	replace
872	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    lineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	32	None	replace
873	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
874	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( "  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( "  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( "  }	  if(line!=    null)    {    if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	146	None	replace
875	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getSingleCharno();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getSingleCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getSingleCharno();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
876	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getFirstChild();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  token.getFirstChild();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getFirstChild();	  JSDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	124	None	replace
877	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	147	None	replace
878	[BUG]  [BUGGY]  builder.append( "[] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "[] ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "[] ");	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
879	[BUG]  [BUGGY]  builder.append(']');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append(']');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append(']');	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
880	[BUG]  [BUGGY]  builder.append('[');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append('[');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append('[');	  builder.append(   "]   ");    	non-compiled	[CE]  	109	None	replace
881	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
882	[BUG]  [BUGGY]  &&  stream!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    fileLevelJsDocBuilder!=    null    &&    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	79	None	replace
883	[BUG]  [BUGGY]  builder.append( "  => ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  => ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  => ");	  builder.append(   "n   ");    	non-compiled	[CE]  	51	None	replace
884	[BUG]  [BUGGY]  builder.append( "  }, ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  builder.append( "  }, ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }, ");	  builder.append(   "    }       ");    	non-compiled	[CE]  	103	None	replace
885	[BUG]  [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocLine();  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocLine();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  token  =  stream.getRemainingJSDocLine();	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
886	[BUG]  [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocToken();  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  token  =  stream.getRemainingJSDocToken();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  token  =  stream.getRemainingJSDocToken();	  Builder.append(token);    	non-compiled	[CE]  	53	None	replace
887	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.startsWith( "- "))  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.startsWith( "- "))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token.startsWith( "- "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME    &&    token.equals(   "   "))    {    builder.append(toString(token));    }    	non-compiled	[CE]  	107	None	replace
888	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	115	None	replace
889	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	115	None	replace
890	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');	  &&    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    	non-compiled	[CE]  	119	None	replace
891	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN)  {  builder.append( ", ");  }	  if(line!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	65	None	replace
892	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getSingleCharno();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.getSingleCharno();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getSingleCharno();	  JsDocToken    stream    =    token.getSingleLine();    	non-compiled	[CE]  	125	None	replace
893	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_FLOAT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	37	None	replace
894	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
895	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    	non-compiled	[CE]  	22	None	replace
896	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append('n');  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
897	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
898	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(getText());  }	  &&    token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	120	None	replace
899	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
900	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharn	  &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	100	None	replace
901	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
902	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    lineno,    startCharno,    endLinen    	non-compiled	[CE]  	15	None	replace
903	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
904	[BUG]  [BUGGY]  FileLevelJsDocBuilder  stream  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  FileLevelJsDocBuilder  stream  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder  stream  =  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
905	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
906	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.appendText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.appendText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.appendText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    }    	non-compiled	[CE]  	85	None	replace
907	[BUG]  [BUGGY]  if(startLineno!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(startLineno!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(startLineno!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
908	[BUG]  [BUGGY]  if(startLineno!=  endLineno)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(startLineno!=  endLineno)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(startLineno!=  endLineno)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	137	None	replace
909	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TAKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	54	None	replace
910	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TAKEN)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.START_TAKEN)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TAKEN)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.START_TAKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	54	None	replace
911	[BUG]  [BUGGY]  &&  endLineno!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  endLineno!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  endLineno!=  line)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	75	None	replace
912	[BUG]  [BUGGY]  Builder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  Builder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);	  if(stream!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	136	None	replace
913	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append( "  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append( "  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append( "  }	  if(stream!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	136	None	replace
914	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endCharno,  startLineno,  endCharno);  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(line,  endCharno,  startLineno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endCharno,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    line,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
915	[BUG]  [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.build();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  this.fileLevelJsDocBuilder.build();  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  this.fileLevelJsDocBuilder.build();	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
916	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.buildFor(token);  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.buildFor(token);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.buildFor(token);	  JSDocToken    stream    =    fileLevelJsDocBuilder.build();    	non-compiled	[CE]  	72	None	replace
917	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
918	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_TOKEN)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.FIELD_TOKEN)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.FIELD_TOKEN)  {  builder.append(token);  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
919	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
920	[BUG]  [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(token);    }    	non-compiled	[CE]  	110	None	replace
921	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endCharno);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  line,  endCharno,  endCharno);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endCharno);    	non-compiled	[CE]  	8	None	replace
922	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  charno,  startCharno,  endLineno,  endCharno	  fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	27	None	replace
923	[BUG]  [BUGGY]  JsDocToken  stream  =  token.replace('n',  'r');  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.replace('n',  'r');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.replace('n',  'r');	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
924	[BUG]  [BUGGY]  JsDocToken  stream  =  token.replace('n',  't');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  JsDocToken  stream  =  token.replace('n',  't');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.replace('n',  't');	  Builder.append(toString(token));    	non-compiled	[CE]  	56	None	replace
925	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
926	[BUG]  [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
927	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo	  if(stream!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    return    new    ExtractionInfo(token);    }    	non-compiled	[CE]  	86	None	replace
928	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
929	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(getText());  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(getText());  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(getText());  }	  if(token!=    JsDocToken.VALUE_NULL    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	35	None	replace
930	[BUG]  [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  }	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
931	[BUG]  [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(line));	  &&    fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))    {    builder.append(toString(token));    	non-compiled	[CE]  	77	None	replace
932	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(token);  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
933	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
934	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(token);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(token);  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(token);    }    	non-compiled	[CE]  	108	None	replace
935	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append('n');    	non-compiled	[CE]  	144	None	replace
936	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append('n');    	non-compiled	[CE]  	144	None	replace
937	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  stream,  startCharno,  endLineno,  endCharno);  }	  builder.append('n');    	non-compiled	[CE]  	144	None	replace
938	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('n');  }	  builder.append('n');    	non-compiled	[CE]  	144	None	replace
939	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);  }	  builder.append('n');    	non-compiled	[CE]  	144	None	replace
940	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.START  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  &&  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START    ||    token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	63	None	replace
941	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	106	None	replace
942	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(line));    }    	non-compiled	[CE]  	113	None	replace
943	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NUMBER_INT    ||    token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	34	None	replace
944	[BUG]  [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLine  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  ||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLine  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  endLineno!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLine	  ||    token!=    JsDocToken.FIELD_NAME)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	10	None	replace
945	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  ignoreStar);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  ignoreStar);  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  stream,  startLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(unreadToken,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	61	None	replace
946	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno,  endCharno	  &&    stream!=    null)    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	101	None	replace
947	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append( ", ");	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
948	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(getText());	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
949	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }      [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');  [BUGGY]        line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append('n');	  &&    token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    	non-compiled	[CE]  	132	None	replace
