bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.END_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_BLOCK)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno);	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
6	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  startCharno,  endLineno,  endCharno);	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
7	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno);	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endCharno);	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
9	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
11	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
12	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
13	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
14	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
15	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
16	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
17	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
18	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
19	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
20	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
21	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
22	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
23	[BUG]  [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(builder,  startLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
24	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
27	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
28	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
29	[BUG]  [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
30	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
31	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
32	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  lineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	1	None	replace
33	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	1	None	replace
34	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
35	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NULL  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
36	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
37	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER_INT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
38	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  ||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	||  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
40	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
41	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
42	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  line,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
43	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  lineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
44	[BUG]  [BUGGY]  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  line  =  stream.getRemainingJSDocLine();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	line  =  stream.getRemainingJSDocLine();	      	non-compiled	[CE]  	8	None	replace
45	[BUG]  [BUGGY]  int  streamLineno  =  stream.getLineno();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  int  streamLineno  =  stream.getLineno();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamLineno  =  stream.getLineno();	      	non-compiled	[CE]  	8	None	replace
46	[BUG]  [BUGGY]  jsdocBuilder.markText(token);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token);	      	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno);  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno);	      	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  endLineno,  endCharno);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  line,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  endLineno,  endCharno);	      	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  builder.append( ",n ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  builder.append( ",n ");  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( ",n ");	  builder.append(   ",   ");    	non-compiled	[CE]  	16	None	replace
50	[BUG]  [BUGGY]  jsdocBuilder.append( ", ");  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.append( ", ");  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.append( ", ");	  builder.append(   ",   ");    	non-compiled	[CE]  	16	None	replace
51	[BUG]  [BUGGY]  builder.append( "n ");  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  builder.append( "n ");  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "n ");	  builder.append(   ",   ");    	non-compiled	[CE]  	16	None	replace
52	[BUG]  [BUGGY]  if(token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.END_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
53	[BUG]  [BUGGY]  Builder.append(token);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  Builder.append(token);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(token);	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
54	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TAKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
55	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(multilineText,  charno,  startCharno,  endLineno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
56	[BUG]  [BUGGY]  Builder.append(toString(token));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  Builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	Builder.append(toString(token));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
57	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_EOF)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
58	[BUG]  [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
59	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endCharno);	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
60	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  startCharno,  endLineno);	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
61	[BUG]  [BUGGY]  jsdocBuilder.markText(unreadToken,  startLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(unreadToken,  startLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(unreadToken,  startLineno,  startCharno,  endLineno,  endCharno);	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
62	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
63	[BUG]  [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START  ||  token!=  JsDocToken.STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
64	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
65	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
66	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endCharno);	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno);	      	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(token);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token);	      	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  int  streamCharno  =  stream.getCharno();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  int  streamCharno  =  stream.getCharno();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	int  streamCharno  =  stream.getCharno();	      	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endLineno);  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endLineno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	fileLevelJsDocBuilder.markText(token,  startLineno,  endLineno,  endLineno);	      	non-compiled	[CE]  	8	None	replace
71	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getState();  [CE]  [FE]                                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.getState();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.getState();	      	non-compiled	[CE]  	8	None	replace
72	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.build();  [CE]  [FE]                                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilder.build();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilder.build();	      	non-compiled	[CE]  	8	None	replace
73	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  line,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
74	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	2	None	replace
75	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
76	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
77	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
78	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
79	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder!=  null  &&  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
80	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
81	[BUG]  [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	FileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  &&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream.getRemainingJSDocLine()!=  endLineno)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  fileLevelJsDocBuilder.markText(multilineText,  endLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	9	None	replace
84	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
85	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(token,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
86	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  return  new  ExtractionInfo(token);  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
87	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.markText(text,  startLineno,  startCharno,  endLineno,  endCharno);  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
88	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
89	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(value));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
90	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
91	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
92	[BUG]  [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(line,  endLineno,  startCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	1	None	replace
93	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    startCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	1	None	replace
94	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
95	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
96	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_ASCII)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
97	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  ||  token!=  JsDocToken.START_THRESHOLD)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
98	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
99	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NULL)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
100	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharn	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
101	[BUG]  [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  stream!=  null)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
102	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
103	[BUG]  [BUGGY]  builder.append( "  }   ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  builder.append( "  }   ");  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "  }   ");	  builder.append(   ",   ");    	non-compiled	[CE]  	16	None	replace
104	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_TOKEN)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
105	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  ||  token!=  JsDocToken.START_OBJECT)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
106	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING  ||  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
107	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( " "))  {  builder.append(toString(token));  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( " "))  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME  &&  token.equals( " "))  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
108	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT)  {  builder.append(token);  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	3	None	replace
109	[BUG]  [BUGGY]  builder.append( "] ");  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  builder.append( "] ");  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append( "] ");	  builder.append(   ",   ");    	non-compiled	[CE]  	16	None	replace
110	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append(token);  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
111	[BUG]  [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append(token);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START)  {  builder.append(token);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START)  {  builder.append(token);  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
112	[BUG]  [BUGGY]  if(token!=  JsDocToken.STRING)  {  builder.append( ", ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.STRING)  {  builder.append( ", ");  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.STRING)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	17	None	replace
113	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
114	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  builder.append('  ');  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
115	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  builder.append( ", ");  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
116	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(buffer));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	4	None	replace
117	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
118	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append(toString(token));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
119	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
120	[BUG]  [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno    	non-compiled	[CE]  	11	None	replace
121	[BUG]  [BUGGY]  JsDocToken  stream  =  getStream();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JsDocToken  stream  =  getStream();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  getStream();	      	non-compiled	[CE]  	8	None	replace
122	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JSDocToken  stream  =  getStream();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream();	      	non-compiled	[CE]  	8	None	replace
123	[BUG]  [BUGGY]  JSDocToken  stream  =  getStream(line);  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JSDocToken  stream  =  getStream(line);  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  getStream(line);	      	non-compiled	[CE]  	8	None	replace
124	[BUG]  [BUGGY]  JSDocToken  stream  =  token.getSingleLine();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JSDocToken  stream  =  token.getSingleLine();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JSDocToken  stream  =  token.getSingleLine();	      	non-compiled	[CE]  	8	None	replace
125	[BUG]  [BUGGY]  JsDocToken  stream  =  token.getSingleLine();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  JsDocToken  stream  =  token.getSingleLine();  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	JsDocToken  stream  =  token.getSingleLine();	      	non-compiled	[CE]  	8	None	replace
126	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
127	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
128	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.END_ARRAY)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
129	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_OBJECT  &&  token!=  JsDocToken.START_VALUE)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_OBJECT)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	7	None	replace
130	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.markText(multilineText,  startLineno,  startCharno,  endLinen	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
131	[BUG]  [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  builder.append(toString(token));	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
132	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
133	[BUG]  [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  &&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	&&  token!=  JsDocToken.FIELD_NAME)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.FIELD_NAME)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLinen    	non-compiled	[CE]  	13	None	replace
134	[BUG]  [BUGGY]  if(line!=  stream.getRemainingJSDocLine())  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]              ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  stream.getRemainingJSDocLine())  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  stream.getRemainingJSDocLine())  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
135	[BUG]  [BUGGY]  if(!ignoreStar)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(!ignoreStar)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(!ignoreStar)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharn    	non-compiled	[CE]  	12	None	replace
136	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
137	[BUG]  [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(stream!=  null)  {  builder.append('  ');  }  else  {  stream.getRemainingJSDocLine();  }	  builder.append('    ');    	non-compiled	[CE]  	15	None	replace
138	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [CE]  [FE]        ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_GLOBAL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
139	[BUG]  [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.START_TOKEN)  {  builder.append(toString(line));  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
140	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }	  if(token!=    JsDocToken.START_TOKEN)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	14	None	replace
141	[BUG]  [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  JsDocToken.VALUE_NULL)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
142	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(token!=  JsDocToken.VALUE_NUMBER)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_NULL)    {    builder.append(toString(token));    }    	non-compiled	[CE]  	6	None	replace
143	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append(token);  }	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
144	[BUG]  [BUGGY]  builder.append('n');  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  builder.append('n');  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	builder.append('n');	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
145	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  builder.append('  ');  }	  builder.append(token);    	non-compiled	[CE]  	5	None	replace
146	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [CE]  [FE]          ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_STRING)  {  builder.append(toString(token));  }	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
147	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [CE]  [FE]            ComparisonFailure    [CONTEXT]    jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  if  (builder.length()  >  0)  {  builder.append('  ');  }    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno  [BUGGY]      line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }  builder.append(line);  token  =  next();  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1417	1417	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,  endLineno,  endCharno	  if(token!=    JsDocToken.VALUE_STRING)    {    builder.append(toString(token));    }    else    {    fileLevelJsDocBuilder.markText(multilineText,    startLineno,    startCharno,    endLineno,    endCharno    	non-compiled	[CE]  	10	None	replace
