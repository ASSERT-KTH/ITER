bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
2	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
3	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
4	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
5	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
6	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "# ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "# ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
7	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "] ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "] ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "] ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
8	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( ": ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( ": ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
9	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( ";n ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( ";n ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
10	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "  - ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "  - ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "  - ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
11	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
12	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
13	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
14	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
15	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('n');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
17	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('n');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
18	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
19	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('n');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
20	[BUG]  [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('n');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(line  ==  null)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
21	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(line);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(line);	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	23	None	replace
22	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	23	None	replace
23	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token).append('  ');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(token).append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(token).append('  ');	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	23	None	replace
24	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('n');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('n');	  fileLevelJsDocBuilder.append(token);    	non-compiled	[CE]  	23	None	replace
25	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
26	[BUG]  [BUGGY]  if(line!=  null)  {  if(token  ==  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token  ==  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token  ==  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
27	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.EXTENDS)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
28	[BUG]  [BUGGY]  if(line!=  null)  {  if(token  ==  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token  ==  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token  ==  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
29	[BUG]  [BUGGY]  Builder.append( "  - ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "  - ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "  - ");	  if(line    ==    null)    {    builder.append(   "    -   ");    }    	non-compiled	[CE]  	86	None	replace
30	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  - ");  }	  if(line    ==    null)    {    builder.append(   "    -   ");    }    	non-compiled	[CE]  	86	None	replace
31	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "  - ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "  - ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "  - ");  }	  if(line    ==    null)    {    builder.append(   "    -   ");    }    	non-compiled	[CE]  	86	None	replace
32	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "  - ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "  - ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "  - ");  }	  if(line    ==    null)    {    builder.append(   "    -   ");    }    	non-compiled	[CE]  	86	None	replace
33	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "  ');  }	  if(token    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	56	None	replace
34	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "  n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "  n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "  n ");  }	  if(token    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	56	None	replace
35	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
36	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
39	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  lines.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  lines.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  lines.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
40	[BUG]  [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	83	None	replace
41	[BUG]  [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	83	None	replace
42	[BUG]  [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	83	None	replace
43	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  => ");  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
44	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "  => ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "  => ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "  => ");  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
45	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
46	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
47	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  => ");  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
48	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  token  =  next();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  => ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  => ");  }  else  {  token  =  next();  }	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
49	[BUG]  [BUGGY]  Builder.append( "  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "  ');	  if(line!=    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	67	None	replace
50	[BUG]  [BUGGY]  ||(line!=  null  &&  token.equals( " ")))  {  builder.append( "  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||(line!=  null  &&  token.equals( " ")))  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||(line!=  null  &&  token.equals( " ")))  {  builder.append( "  ');  }	  if(line!=    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	67	None	replace
51	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "  ');  }	  if(line!=    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	67	None	replace
52	[BUG]  [BUGGY]  ||  token!=  null)  {  builder.append( "  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||  token!=  null)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||  token!=  null)  {  builder.append( "  ');  }	  if(line!=    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	67	None	replace
53	[BUG]  [BUGGY]  Builder.append('n');  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append('n');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append('n');	  if(line!=    null)    {    builder.append('n');    }    	non-compiled	[CE]  	31	None	replace
54	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append('n');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    	non-compiled	[CE]  	31	None	replace
55	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    	non-compiled	[CE]  	31	None	replace
56	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineno();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineno();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineno();	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
57	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
58	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineNumber();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineNumber();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getLineNumber();	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
59	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
60	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
61	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(line);    }    	non-compiled	[CE]  	97	None	replace
62	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(line);    }    	non-compiled	[CE]  	97	None	replace
63	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
64	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
65	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
66	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
67	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append(')');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
68	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append(')');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
69	[BUG]  [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append(')');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line  ==  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
70	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
71	[BUG]  [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append(')');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(line  ==  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(line  ==  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
72	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
73	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
74	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
75	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
76	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
77	[BUG]  [BUGGY]  builder.append( "; ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "; ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "; ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
78	[BUG]  [BUGGY]  builder.append( ";null ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ";null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ";null ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
79	[BUG]  [BUGGY]  builder.append( ";negative ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ";negative ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ";negative ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
80	[BUG]  [BUGGY]  if(token  ==  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
81	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  stream.length();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
83	[BUG]  [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
84	[BUG]  [BUGGY]  while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
85	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
86	[BUG]  [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
87	[BUG]  [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
88	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
89	[BUG]  [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
90	[BUG]  [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
91	[BUG]  [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
92	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
93	[BUG]  [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&!line.isEmpty())  {	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
94	[BUG]  [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
95	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
96	[BUG]  [BUGGY]  while(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ",   ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
97	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
98	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
99	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append('  ');  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	60	None	replace
100	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	60	None	replace
101	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.IMPLEMENTS)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.IMPLEMENTS)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.IMPLEMENTS)  {  if(line!=  null)  {  builder.append('  ');  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	60	None	replace
102	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(''+  token);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(''+  token);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	22	None	replace
103	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ').append(line);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ').append(line);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ').append(line);	  fileLevelJsDocBuilder.append('    ');    	non-compiled	[CE]  	22	None	replace
104	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
105	[BUG]  [BUGGY]  Builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
106	[BUG]  [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append( "] ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line  ==  null)  {  builder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
107	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
108	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
109	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
110	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
111	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
112	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
113	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
114	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
115	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  - ");  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
116	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  token  =  next();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  - ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  - ");  }  else  {  token  =  next();  }	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
117	[BUG]  [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
118	[BUG]  [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
119	[BUG]  [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
120	[BUG]  [BUGGY]  ||!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
121	[BUG]  [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
122	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
123	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
124	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
125	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
126	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
127	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
128	[BUG]  [BUGGY]  Builder.append( "null ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "null ");	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
129	[BUG]  [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append( "null ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line  ==  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
130	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
131	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
132	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
133	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
134	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
135	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('n');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
136	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "  ');  }	  if(line    ==    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	66	None	replace
137	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
138	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(']');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(']');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(']');  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
139	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
140	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(']');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
141	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
142	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
143	[BUG]  [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
144	[BUG]  [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
145	[BUG]  [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
146	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
147	[BUG]  [BUGGY]  ||!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
148	[BUG]  [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
149	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
150	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
151	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "n ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
152	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "null ");	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
153	[BUG]  [BUGGY]  builder.append( ",null ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ",null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ",null ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
154	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
155	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ",null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
156	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ",null ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ",null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ",null ");  }	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
157	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ",null ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ",null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ",null ");  }	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
158	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( ", ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( ", ");	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
159	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
160	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
161	[BUG]  [BUGGY]  Builder.append( "] ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "] ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "] ");	  if(line    ==    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	38	None	replace
162	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "] ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "] ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	38	None	replace
163	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "] ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	38	None	replace
164	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "] ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	38	None	replace
165	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
166	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
167	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
168	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   ",   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	94	None	replace
169	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   ",   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	94	None	replace
170	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.TOP)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.TOP)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.TOP)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
171	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
172	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
173	[BUG]  [BUGGY]  line  =  stream.getLineno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLineno();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLineno();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
174	[BUG]  [BUGGY]  line  =  stream.getLength();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLength();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLength();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
175	[BUG]  [BUGGY]  line  =  stream.getLowerBound();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLowerBound();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLowerBound();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
176	[BUG]  [BUGGY]  line  =  stream.getRawLine();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getRawLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getRawLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
177	[BUG]  [BUGGY]  line  =  stream.getLowerCaseLine();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLowerCaseLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLowerCaseLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
178	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	35	None	replace
179	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	35	None	replace
180	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append( "] ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  ==  null)  {  builder.append( "] ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
181	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
182	[BUG]  [BUGGY]  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
183	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
184	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
185	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
186	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
187	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  token.getNext();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  token.getNext();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
188	[BUG]  [BUGGY]  JsDocToken  next  =  line.getNext();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  line.getNext();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  line.getNext();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
189	[BUG]  [BUGGY]  JsDocToken  next  =  jsdocBuilder.getNext();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  jsdocBuilder.getNext();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  jsdocBuilder.getNext();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
190	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNext()  -  1;  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.getNext()  -  1;  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.getNext()  -  1;	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
191	[BUG]  [BUGGY]  JsDocToken  next  =  sourceFile.getNext();  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  sourceFile.getNext();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  sourceFile.getNext();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
192	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	59	None	replace
193	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	59	None	replace
194	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "n ");  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
195	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append(token);  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
196	[BUG]  [BUGGY]  while(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(token!=  null)  {  builder.append('  ');  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
197	[BUG]  [BUGGY]  while(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line  ==  null)  {  builder.append('  ');  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
198	[BUG]  [BUGGY]  Builder.append(')');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append(')');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append(')');	  if(line    ==    null)    {    builder.append(')');    }    	non-compiled	[CE]  	49	None	replace
199	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append(')');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    	non-compiled	[CE]  	49	None	replace
200	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append(')');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append(')');  }	  if(line    ==    null)    {    builder.append(')');    }    	non-compiled	[CE]  	49	None	replace
201	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
202	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
203	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
204	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
205	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
206	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "null ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
207	[BUG]  [BUGGY]  ||  token!=  null)  {  builder.append( "null ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||  token!=  null)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||  token!=  null)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
208	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
209	[BUG]  [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
210	[BUG]  [BUGGY]  ||  token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||  token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||  token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
211	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
212	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
213	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
214	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(')');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	50	None	replace
215	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	78	None	replace
216	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	78	None	replace
217	[BUG]  [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	78	None	replace
218	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( ", ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( ", ");  }	  if(line    ==    null)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	14	None	replace
219	[BUG]  [BUGGY]  Builder.append( ", ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( ", ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( ", ");	  if(line    ==    null)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	14	None	replace
220	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(token);  line  =  stream.getRemainingJSDocLine();	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
221	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
222	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
223	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  line  =  stream.getLineno();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(line);  line  =  stream.getLineno();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(line);  line  =  stream.getLineno();	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
224	[BUG]  [BUGGY]  ||  token!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  ||  token!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	||  token!=  null)  {  builder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	37	None	replace
225	[BUG]  [BUGGY]  if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
226	[BUG]  [BUGGY]  if(line  ==  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
227	[BUG]  [BUGGY]  if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  JsDocToken  next  =  stream.getNext();  if(next  ==  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
228	[BUG]  [BUGGY]  JsDocToken  next  =  token.getNext();  if(next!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  token.getNext();  if(next!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  token.getNext();  if(next!=  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
229	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	77	None	replace
230	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	77	None	replace
231	[BUG]  [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
232	[BUG]  [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
233	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.START_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
234	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.TOP)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.TOP)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.TOP)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
235	[BUG]  [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	21	None	replace
236	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	6	None	replace
237	[BUG]  [BUGGY]  while(line!=  null  &&  token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&  token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&  token!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	6	None	replace
238	[BUG]  [BUGGY]  while(line!=  null  &&  line.size()  >  0)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&  line.size()  >  0)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&  line.size()  >  0)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	6	None	replace
239	[BUG]  [BUGGY]  while(line!=  null  &&  token!=  null  &&  token.equals( " "))  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&  token!=  null  &&  token.equals( " "))  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&  token!=  null  &&  token.equals( " "))  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	6	None	replace
240	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
241	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(',');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(',');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(',');  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
242	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
243	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(',');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
244	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
245	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
246	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  ' ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
247	[BUG]  [BUGGY]  Builder.append( "  ' ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "  ' ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "  ' ");	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
248	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "  ' ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
249	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "  ' ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
250	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "  ' ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
251	[BUG]  [BUGGY]  builder.append( "  ' ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  ' ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  ' ");	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
252	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(')');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	53	None	replace
253	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(')');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(')');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(')');	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	53	None	replace
254	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	53	None	replace
255	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	80	None	replace
256	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append(')');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
257	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
258	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
259	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('[');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('[');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('[');  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
260	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
261	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('[');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
262	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
263	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
264	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
265	[BUG]  [BUGGY]  if(token!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
266	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder.append( "null ");	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
267	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
268	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
269	[BUG]  [BUGGY]  Builder.append(token);  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append(token);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append(token);	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
270	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
271	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( ", ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( ", ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
272	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
273	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "   ");  }	  if(line!=    null)    {    builder.append(   "       ");    }    	non-compiled	[CE]  	68	None	replace
274	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "   ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "   ");  }	  if(line!=    null)    {    builder.append(   "       ");    }    	non-compiled	[CE]  	68	None	replace
275	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "   ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "   ");  }	  if(line!=    null)    {    builder.append(   "       ");    }    	non-compiled	[CE]  	68	None	replace
276	[BUG]  [BUGGY]  Builder.append( "   ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "   ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "   ");	  if(line!=    null)    {    builder.append(   "       ");    }    	non-compiled	[CE]  	68	None	replace
277	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
278	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
279	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
280	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno  +  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno  +  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno  +  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
281	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  1;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
282	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
283	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
284	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.EXTENDS)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
285	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.FOR)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.FOR)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.FOR)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
286	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	17	None	replace
287	[BUG]  [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  Builder.append('  ');  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
288	[BUG]  [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  Builder.append('  ');  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
289	[BUG]  [BUGGY]  if(token!=  null)  {  Builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  Builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  Builder.append('  ');  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
290	[BUG]  [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
291	[BUG]  [BUGGY]  if(token  ==  null)  {  Builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  Builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  Builder.append('  ');  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
292	[BUG]  [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  token  =  next();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  Builder.append('  ');  }  else  {  token  =  next();  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
293	[BUG]  [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append(token);  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
294	[BUG]  [BUGGY]  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
295	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append('  ');  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder.append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder.append('  ');	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
296	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append( "  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
297	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
298	[BUG]  [BUGGY]  Builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
299	[BUG]  [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
300	[BUG]  [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
301	[BUG]  [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
302	[BUG]  [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  n ");  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
303	[BUG]  [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
304	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append('n');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    	non-compiled	[CE]  	32	None	replace
305	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "[] ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
306	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "[] ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "[] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "[] ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
307	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
308	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
309	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "[] ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "[] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "[] ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
310	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "[] ");  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
311	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ": ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
312	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ": ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ": ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ": ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
313	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
314	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
315	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ": ");  }  else  {  throw  new  IllegalStateException( " ");  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
316	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  token  =  next();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( ": ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( ": ");  }  else  {  token  =  next();  }	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
317	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append(')');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    	non-compiled	[CE]  	48	None	replace
318	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append(')');  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append(')');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append(')');	  if(line!=    null)    {    builder.append(')');    }    	non-compiled	[CE]  	48	None	replace
319	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	45	None	replace
320	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    	non-compiled	[CE]  	45	None	replace
321	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
322	[BUG]  [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
323	[BUG]  [BUGGY]  while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null  &&  sourceFile.size()  >  0)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
324	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('N');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('N');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('N');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
325	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  stream.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
326	[BUG]  [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
327	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }  [CE]  [FE]                                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append('n');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
328	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( ", ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( ", ");  }	  if(line!=    null)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	13	None	replace
329	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( ",   ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( ",   ");  }	  if(line!=    null)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	13	None	replace
330	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	50	None	replace
331	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
332	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
333	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
334	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
335	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
336	[BUG]  [BUGGY]  builder.append( "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "null ");	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
337	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ".null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ".null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ".null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
338	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
339	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "] ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
340	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
341	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
342	[BUG]  [BUGGY]  if(token  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  null)  {  builder.append( "null ");  }  else  {  token  =  next();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
343	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "n ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
344	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.BLOCK)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.BLOCK)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.BLOCK)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
345	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.NONE)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	24	None	replace
346	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('#');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('#');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('#');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
347	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('r');  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('r');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('r');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
348	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('-');  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('-');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('-');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
349	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('m');  }  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('m');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('m');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('n');    }    	non-compiled	[CE]  	11	None	replace
350	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
351	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
352	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
353	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextSibling();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.getNextSibling();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.getNextSibling();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
354	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.getCurrentToken();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
355	[BUG]  [BUGGY]  JsDocToken  next  =  stream.next();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.next();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.next();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
356	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getNextJsDoc();  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.getNextJsDoc();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.getNextJsDoc();	  JsDocToken    next    =    stream.getNext();    	non-compiled	[CE]  	64	None	replace
357	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
358	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
359	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
360	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_LINE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	16	None	replace
361	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
362	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
363	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	70	None	replace
364	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "  : ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "  : ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "  : ");  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
365	[BUG]  [BUGGY]  if(line  >=  null)  {  builder.append(')');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  >=  null)  {  builder.append(')');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  >=  null)  {  builder.append(')');  }	  if(line!=    null)    {    builder.append(')');    }    	non-compiled	[CE]  	48	None	replace
366	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
367	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
368	[BUG]  [BUGGY]  builder.append( "  =>n ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  =>n ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  =>n ");	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
369	[BUG]  [BUGGY]  builder.append( "  }   ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  }   ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  }   ");	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
370	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
371	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
372	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
373	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
374	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	21	None	replace
375	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	21	None	replace
376	[BUG]  [BUGGY]  builder.append( "  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  ');	  if(line!=    null)    {    builder.append(   "    ');    }    	non-compiled	[CE]  	67	None	replace
377	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
378	[BUG]  [BUGGY]  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
379	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
380	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(',');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }	  builder.append(',');    	non-compiled	[CE]  	87	None	replace
381	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "  [null] ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "  [null] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "  [null] ");  }	  if(line!=    null)    {    builder.append(   "       ");    }    	non-compiled	[CE]  	68	None	replace
382	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	77	None	replace
383	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	77	None	replace
384	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLength();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getLength();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getLength();	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
385	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getSingleLine();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getSingleLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getSingleLine();	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
386	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "n ");	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	82	None	replace
387	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "negative ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "negative ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "negative ");	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	82	None	replace
388	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  fileLevelJsDocBuilder.append( "] ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "[] ");  }  else  {  fileLevelJsDocBuilder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "[] ");  }  else  {  fileLevelJsDocBuilder.append( "] ");  }	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
389	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.NONE)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
390	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
391	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( ", ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append( ", ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
392	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
393	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option!=  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option!=  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	46	None	replace
394	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append( "  ' ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  if(token!=  null)  {  builder.append( "  ' ");  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
395	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  JsDocToken  next  =  stream.getNext();  if(next!=  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
396	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( ", ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  builder.append( ", ");  }	  if(line!=    null)    {    builder.append(   ",   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	94	None	replace
397	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	20	None	replace
398	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	39	None	replace
399	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
400	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
401	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
402	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append('  ');	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
403	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
404	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
405	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append('  ');	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
406	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.toString();	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
407	[BUG]  [BUGGY]  builder.append( ",negative ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ",negative ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ",negative ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
408	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append( "null ");	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
409	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.size();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
410	[BUG]  [BUGGY]  builder.append( "  - ").append(line);  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  - ").append(line);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  - ").append(line);	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
411	[BUG]  [BUGGY]  builder.append( "  - ").append(token);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  - ").append(token);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  - ").append(token);	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
412	[BUG]  [BUGGY]  builder.append( "  - "  +  token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  - "  +  token);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  - "  +  token);	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
413	[BUG]  [BUGGY]  builder.append( "  - ").append('  ');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  - ").append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  - ").append('  ');	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
414	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	35	None	replace
415	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('n');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	35	None	replace
416	[BUG]  [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
417	[BUG]  [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( "n ");  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
418	[BUG]  [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
419	[BUG]  [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  Builder.append('  ');  }  else  {  builder.append( ", ");  }	  Builder.append('    ');    	non-compiled	[CE]  	55	None	replace
420	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
421	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
422	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
423	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
424	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	89	None	replace
425	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( "n ");  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
426	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(']');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  builder.append(']');    	non-compiled	[CE]  	76	None	replace
427	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
428	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
429	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('n');  }	  if(line    ==    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	34	None	replace
430	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append( "null ");	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	80	None	replace
431	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	59	None	replace
432	[BUG]  [BUGGY]  builder.append( ":n ");  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ":n ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ":n ");	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
433	[BUG]  [BUGGY]  builder.append(':');  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append(':');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append(':');	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
434	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( "null ");  }  else  {  line  =  stream.getRemainingJSDocLine();  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	28	None	replace
435	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "n   ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "n   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append( "n   ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
436	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	53	None	replace
437	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(')');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	53	None	replace
438	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "n ");  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "n ");  line  =  stream.getRemainingJSDocLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "n ");  line  =  stream.getRemainingJSDocLine();	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
439	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n');  line  =  stream.getRemainingJSDocLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('n');  line  =  stream.getRemainingJSDocLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('n');  line  =  stream.getRemainingJSDocLine();	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
440	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
441	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  fileLevelJsDocBuilder.length();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
442	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.length();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
443	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  lines.length();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  lines.length();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  lines.length();  ++i)  {  builder.append('  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
444	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.START)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
445	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  >=  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  >=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line  >=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
446	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE)  {  if(line!=  null)  {  builder.append( "  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
447	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	27	None	replace
448	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(line!=  null)  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
449	[BUG]  [BUGGY]  line  =  stream.getPreservingJSDocLine();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getPreservingJSDocLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getPreservingJSDocLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
450	[BUG]  [BUGGY]  line  =  stream.getNext();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getNext();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getNext();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
451	[BUG]  [BUGGY]  line  =  stream.getLineNumber();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLineNumber();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLineNumber();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
452	[BUG]  [BUGGY]  line  =  stream.getSingleLine();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getSingleLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getSingleLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
453	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "  n ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "  n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "  n ");  }	  if(line    ==    null)    {    builder.append(   "    '   ");    }    	non-compiled	[CE]  	85	None	replace
454	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  fileLevelJsDocBuilder.append( "null ");  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	5	None	replace
455	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
456	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
457	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "[ ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "[ ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
458	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(line);    }    	non-compiled	[CE]  	97	None	replace
459	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(line);  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(line);    }    	non-compiled	[CE]  	97	None	replace
460	[BUG]  [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
461	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
462	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	78	None	replace
463	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( ",   ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   ",   ");    }    	non-compiled	[CE]  	78	None	replace
464	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( "] ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( "] ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( "] ");  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
465	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('[');  }  else  {  fileLevelJsDocBuilder.append( ", ");  }	  builder.append('[');    	non-compiled	[CE]  	93	None	replace
466	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	17	None	replace
467	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  builder.append('  ');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	17	None	replace
468	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
469	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
470	[BUG]  [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  for(int  i  =  startCharno;  i  <  endCharno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
471	[BUG]  [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
472	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sources.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sources.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sources.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
473	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
474	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  rawSourceFile.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  rawSourceFile.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  rawSourceFile.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
475	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFiles.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFiles.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFiles.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
476	[BUG]  [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(sourceFile!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
477	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(fileLevelJsDocBuilder!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
478	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(fileLevelJsDocBuilder!=  null)  {  builder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
479	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ' ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
480	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  - ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  - ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  - ");  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
481	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.size();  ++i)  {  builder.append( "  ');  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	7	None	replace
482	[BUG]  [BUGGY]  builder.append( "  -> ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  -> ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  -> ");	  builder.append(   "    =>   ");    	non-compiled	[CE]  	95	None	replace
483	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "') ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "') ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "') ");  }	  if(line    ==    null)    {    builder.append(')');    }    	non-compiled	[CE]  	49	None	replace
484	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder();	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
485	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  new  FileLevelJsDocBuilder(token);	  if(line!=    null)    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	84	None	replace
486	[BUG]  [BUGGY]  mockBuilder.append( "null ");  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  mockBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	mockBuilder.append( "null ");	  if(line!=    null)    {    builder.append(   "null   ");    }    	non-compiled	[CE]  	25	None	replace
487	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(token);  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append(token);  }	  if(line!=    null)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	44	None	replace
488	[BUG]  [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
489	[BUG]  [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
490	[BUG]  [BUGGY]  if(line!=  null  &&  line.length()  >  0)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null  &&  line.length()  >  0)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null  &&  line.length()  >  0)  {  if(!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
491	[BUG]  [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	90	None	replace
492	[BUG]  [BUGGY]  mockBuilder.append( "] ");  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  mockBuilder.append( "] ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	mockBuilder.append( "] ");	  if(line!=    null)    {    builder.append(   "]   ");    }    	non-compiled	[CE]  	37	None	replace
493	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append( ", ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	17	None	replace
494	[BUG]  [BUGGY]  if(line  >=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  >=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  >=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
495	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(')');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	69	None	replace
496	[BUG]  [BUGGY]  if(line  >=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  >=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  >=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
497	[BUG]  [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  fileLevelJsDocBuilder.append( "  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  fileLevelJsDocBuilder.append( "  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	75	None	replace
498	[BUG]  [BUGGY]  if(!ignoreStart)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!ignoreStart)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!ignoreStart)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	73	None	replace
499	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!ignoreStar)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!ignoreStar)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	73	None	replace
500	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
501	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_STRING)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  JsDocToken.VALUE_STRING)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
502	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
503	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.PRESERVE)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	15	None	replace
504	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	36	None	replace
505	[BUG]  [BUGGY]  while(line!=  null  &&  token!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&  token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&  token!=  null)  {  builder.append('  ');  }	  while(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	57	None	replace
506	[BUG]  [BUGGY]  builder.append( ": ").append(line);  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ": ").append(line);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ": ").append(line);	  builder.append(   ":   ");    	non-compiled	[CE]  	96	None	replace
507	[BUG]  [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  while(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
508	[BUG]  [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
509	[BUG]  [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null  &&!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
510	[BUG]  [BUGGY]  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!line.isEmpty())  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    if(!line.isEmpty())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	88	None	replace
511	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRenderingJSDocLine();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append('  ');  line  =  stream.getRenderingJSDocLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append('  ');  line  =  stream.getRenderingJSDocLine();	  fileLevelJsDocBuilder.append('    ');    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	61	None	replace
512	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	26	None	replace
513	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	21	None	replace
514	[BUG]  [BUGGY]  if(token  ==  JsDocToken.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token  ==  JsDocToken.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token  ==  JsDocToken.SINGLE_TOKEN)  {  if(line!=  null)  {  builder.append('  ');  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	21	None	replace
515	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
516	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	72	None	replace
517	[BUG]  [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append(token);  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
518	[BUG]  [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(!ignoreStar)  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(token);    }    	non-compiled	[CE]  	74	None	replace
519	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
520	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	2	None	replace
521	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ' ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  ' ");  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
522	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  - ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  - ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  - ");  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
523	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  n ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  n ");  }	  if(line    ==    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	9	None	replace
524	[BUG]  [BUGGY]  Builder.append(line);  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  Builder.append(line);  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	Builder.append(line);	  if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	19	None	replace
525	[BUG]  [BUGGY]  builder.append(';');  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append(';');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append(';');	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
526	[BUG]  [BUGGY]  builder.append( ";] ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ";] ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ";] ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
527	[BUG]  [BUGGY]  builder.append( ";-- ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ";-- ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ";-- ");	  builder.append(   ";n   ");    	non-compiled	[CE]  	30	None	replace
528	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "native ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "native ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append( "] ");  }  else  {  fileLevelJsDocBuilder.append( "native ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	77	None	replace
529	[BUG]  [BUGGY]  builder.append( "[] ").append(line).append('  ');  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "[] ").append(line).append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "[] ").append(line).append('  ');	  builder.append(   "[]   ");    	non-compiled	[CE]  	42	None	replace
530	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  startLineno;  i  <  endLineno;  ++i)  {  builder.append( ", ");  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
531	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append(',');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append(',');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  startCharno;  i  <  endLineno;  ++i)  {  builder.append(',');  }	  if(line!=    null)    {    for(int    i    =    startLineno;    i    <    endLineno;    ++i)    {    builder.append(   ",   ");    }    	non-compiled	[CE]  	92	None	replace
532	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('  ');  }  else  {  line  =  stream.getRemainingJSDocLine();  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('  ');  }  else  {  line  =  stream.getRemainingJSDocLine();  }	  if(line!=    null)    {    builder.append('    ');    }    else    {    line    =    stream.getRemainingJSDocLine();    }    	non-compiled	[CE]  	60	None	replace
533	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	52	None	replace
534	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line    ==    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	40	None	replace
535	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "; ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "; ");	  fileLevelJsDocBuilder.append(   "n   ");    	non-compiled	[CE]  	3	None	replace
536	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append( "] ");  }  else  {  throw  new  IllegalStateException( " ");  }	  if(line!=    null)    {    builder.append(   "]   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	41	None	replace
537	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  null)  {  builder.append('  ');  }  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
538	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  JsDocToken.START_TOKEN)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
539	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  builder.append('  ');  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(line!=  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
540	[BUG]  [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	1	None	replace
541	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  : ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  : ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  line.length();  ++i)  {  builder.append( "  : ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    line.length();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	10	None	replace
542	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  WhitespaceOption.SINGLE_TOKEN)  {  builder.append(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	43	None	replace
543	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	33	None	replace
544	[BUG]  [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no-line ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no-line ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  builder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no-line ");  }	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	83	None	replace
545	[BUG]  [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append('  ');  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
546	[BUG]  [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  for(int  i  =  0;  i  <  sourceFile.size();  ++i)  {  builder.append( "  ' ");  }	  if(line!=    null)    {    for(int    i    =    0;    i    <    sourceFile.size();    ++i)    {    builder.append('    ');    }    	non-compiled	[CE]  	8	None	replace
547	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.SINGLE_TOKEN  ||  option  ==  WhitespaceOption.PRESERVE)  {  builder.append(token);  }	  if(option    ==    WhitespaceOption.SINGLE_TOKEN)    {    builder.append(token);    }    	non-compiled	[CE]  	47	None	replace
548	[BUG]  [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  if(next!=  null)  {  builder.append('  ');  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  JsDocToken  next  =  stream.getCurrentToken();  if(next!=  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	JsDocToken  next  =  stream.getCurrentToken();  if(next!=  null)  {  builder.append('  ');  }	  JsDocToken    next    =    stream.getNext();    if(next!=    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	65	None	replace
549	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(line);  line  =  stream.getLineNumber();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append(line);  line  =  stream.getLineNumber();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append(line);  line  =  stream.getLineNumber();	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
550	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append(line);  line  =  stream.getRemainingJSDocLine();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  fileLevelJsDocBuilder.append(line);    line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	63	None	replace
551	[BUG]  [BUGGY]  builder.append( "  - ").append(line).append('  ');  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( "  - ").append(line).append('  ');  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( "  - ").append(line).append('  ');	  builder.append(   "    -   ");    	non-compiled	[CE]  	58	None	replace
552	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
553	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
554	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  if(line  ==  null)  {  builder.append('  ');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_STRING)  {  if(line  ==  null)  {  builder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_STRING)  {  if(line  ==  null)  {  builder.append('  ');  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
555	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append( ", ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append( ", ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(option  ==  WhitespaceOption.PRESERVE)  {  if(token!=  null)  {  builder.append( ", ");  }	  if(token!=    null)    {    if(line    ==    null)    {    builder.append('    ');    }    	non-compiled	[CE]  	18	None	replace
556	[BUG]  [BUGGY]  frame  =  fileLevelJsDocBuilder.append( "null ");  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  frame  =  fileLevelJsDocBuilder.append( "null ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	frame  =  fileLevelJsDocBuilder.append( "null ");	  if(line    ==    null)    {    builder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "null   ");    }    	non-compiled	[CE]  	80	None	replace
557	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append('n');  }  else  {  fileLevelJsDocBuilder.append( "null ");  }	  if(line!=    null)    {    builder.append('n');    }    else    {    fileLevelJsDocBuilder.append(   "n   ");    }    	non-compiled	[CE]  	79	None	replace
558	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append( "no-line ");  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  fileLevelJsDocBuilder.append( "no-line ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	fileLevelJsDocBuilder.append( "no-line ");	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	82	None	replace
559	[BUG]  [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no   ");  }  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no   ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  fileLevelJsDocBuilder.append('  ');  }  else  {  fileLevelJsDocBuilder.append( "no   ");  }	  if(line!=    null)    {    fileLevelJsDocBuilder.append('    ');    }    else    {    fileLevelJsDocBuilder.append(   "n       ");    }    	non-compiled	[CE]  	82	None	replace
560	[BUG]  [BUGGY]  while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	while(line!=  null)  {  builder.append(')');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(line!=    null)    {    builder.append(')');    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	50	None	replace
561	[BUG]  [BUGGY]  builder.append( ",no ");  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  builder.append( ",no ");  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	builder.append( ",no ");	  builder.append(   ",n   ");    	non-compiled	[CE]  	12	None	replace
562	[BUG]  [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  ==  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  ==  null)  {  builder.append(token);  }  else  {  fileLevelJsDocBuilder.append('  ');  }	  if(line!=    null)    {    builder.append(token);    }    else    {    fileLevelJsDocBuilder.append('    ');    }    	non-compiled	[CE]  	71	None	replace
563	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "null ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
564	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( "null ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( "null ");  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(token!=  JsDocToken.VALUE_NULL)  {  builder.append( "null ");  }	  if(line!=    null)    {    builder.append(   "null   ");    }    else    {    token    =    next();    }    	non-compiled	[CE]  	29	None	replace
565	[BUG]  [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  break;  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null  &&!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null  &&!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
566	[BUG]  [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  break;  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null)  {  while(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null)  {  while(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
567	[BUG]  [BUGGY]  if(line  >=  null)  {  if(!line.isEmpty())  {  break;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line  >=  null)  {  if(!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line  >=  null)  {  if(!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
568	[BUG]  [BUGGY]  if(line!=  null  ||!line.isEmpty())  {  break;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  if(line!=  null  ||!line.isEmpty())  {  break;  }  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	if(line!=  null  ||!line.isEmpty())  {  break;  }	  if(line!=    null)    {    if(!line.isEmpty())    {    break;    }    	non-compiled	[CE]  	91	None	replace
569	[BUG]  [BUGGY]  line  =  stream.getCharno();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getCharno();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getCharno();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
570	[BUG]  [BUGGY]  line  =  stream.getLastChar();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getLastChar();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getLastChar();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
571	[BUG]  [BUGGY]  line  =  stream.getRemainingLine();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append(toString(token));  line  =  stream.getRemainingJSDocLine();  if  (option  !=  WhitespaceOption.PRESERVE)  {  line  =  trimEnd(line);  }      [BUGGY]  line  =  stream.getRemainingLine();  [BUGGY]      token  =  next();  }  }  while  (true);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.4364357804719848	1425	1425	4	replace	line  =  stream.getRemainingLine();	  line    =    stream.getRemainingJSDocLine();    	non-compiled	[CE]  	62	None	replace
