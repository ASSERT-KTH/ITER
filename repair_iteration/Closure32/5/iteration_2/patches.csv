bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(reserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(reserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(reserve);	  fileLevelJsDocBuilder.setPath(preserve);    	non-compiled	[CE]  orphaned  case	29	None	replace
2	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLineno(lineno);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setLineno(lineno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setLineno(lineno);	  fileLevelJsDocBuilder.setPath(preserve);    	non-compiled	[CE]  orphaned  case	29	None	replace
3	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(remainder);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(remainder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(remainder);	  fileLevelJsDocBuilder.setPath(preserve);    	non-compiled	[CE]  orphaned  case	29	None	replace
4	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(true);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(true);	  fileLevelJsDocBuilder.setPath(preserve);    	non-compiled	[CE]  orphaned  case	29	None	replace
5	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(path);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(path);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(path);	  fileLevelJsDocBuilder.setPath(preserve);    	non-compiled	[CE]  orphaned  case	29	None	replace
6	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
7	[BUG]  [BUGGY]  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
8	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
9	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
10	[BUG]  [BUGGY]  JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders.get(preserve);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders.get(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders.get(preserve);	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
11	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
12	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(reserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(reserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(reserve);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
13	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(remainder);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(remainder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(remainder);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
14	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(preserve,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(preserve,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(preserve,  preserve);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
15	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(true);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(true);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
16	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(lineno);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(lineno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(lineno);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
17	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N').append(preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('N').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('N').append(preserve);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
18	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n').append(remainder);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('n').append(remainder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('n').append(remainder);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
19	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n').append(preserve  +  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('n').append(preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('n').append(preserve  +  1);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
20	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('#').append(preserve);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('#').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('#').append(preserve);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
21	[BUG]  [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
22	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	55	None	replace
23	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	55	None	replace
24	[BUG]  [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
25	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.keySet();  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.keySet();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilders.keySet();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
26	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserve.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserve.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserve.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
27	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.length()  -  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.length()  -  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setCharno(preserve.length()  -  1);	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
28	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setString(preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setString(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setString(preserve);	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
29	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.charno());  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.charno());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setCharno(preserve.charno());	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
30	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.length());  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setCharno(preserve.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setCharno(preserve.length());	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
31	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  null,  preserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  null,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  null,  preserve);	  fileLevelJsDocBuilder.append(preserve,    null);    	non-compiled	[CE]  orphaned  case	22	None	replace
32	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  null);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  null);	  fileLevelJsDocBuilder.append(preserve,    null);    	non-compiled	[CE]  orphaned  case	22	None	replace
33	[BUG]  [BUGGY]  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
34	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
35	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
36	[BUG]  [BUGGY]  JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.keySet();  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.keySet();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.keySet();	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
37	[BUG]  [BUGGY]  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
38	[BUG]  [BUGGY]  for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
39	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
40	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
41	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
42	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
43	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
44	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
45	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
46	[BUG]  [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
47	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  [CE]  ')'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  ')'  expected	56	None	replace
48	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  re  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  re  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  re	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  	56	None	replace
49	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasMoreElements())  {  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  	56	None	replace
50	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.values();  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.values();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilders.values();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
51	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
52	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  unreadToken);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  unreadToken);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  unreadToken);	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
53	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  false));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  false));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  false));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
54	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('n',  preserve  +  1);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('n',  preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('n',  preserve  +  1);	  fileLevelJsDocBuilder.append('n',    preserve);    	non-compiled	[CE]  orphaned  case	26	None	replace
55	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('  ',  preserve  +  1);	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
56	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve.toString());  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('  ',  preserve.toString());	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
57	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserveInfo.preserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserveInfo.preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('  ',  preserveInfo.preserve);	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
58	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/',  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/',  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('/',  preserve);	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
59	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('/').append(preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('/').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('/').append(preserve);	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
60	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "/ ");  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "/ ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "/ ");	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
61	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/'  +  preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/'  +  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('/'  +  preserve);	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
62	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  true);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  true);	  fileLevelJsDocBuilder.delete(preserve,    false);    	non-compiled	[CE]  orphaned  case	35	None	replace
63	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  false,  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  false,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  false,  preserve);	  fileLevelJsDocBuilder.delete(preserve,    false);    	non-compiled	[CE]  orphaned  case	35	None	replace
64	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(token,  false);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(token,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(token,  false);	  fileLevelJsDocBuilder.delete(preserve,    false);    	non-compiled	[CE]  orphaned  case	35	None	replace
65	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(precedence,  false);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(precedence,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(precedence,  false);	  fileLevelJsDocBuilder.delete(preserve,    false);    	non-compiled	[CE]  orphaned  case	35	None	replace
66	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
67	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
68	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
69	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
70	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  continue  retry;  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
71	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  else  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuild  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  else  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuild  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  else  {  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuild	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  	40	None	replace
72	[BUG]  [BUGGY]  preserveInfo  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractFileLevelJsDocBuilder(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
73	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
74	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
75	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
76	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
77	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
78	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve  ==  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
79	[BUG]  [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
80	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(sourceFile,  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(sourceFile,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(sourceFile,  preserve);	  fileLevelJsDocBuilder.append(preserve,    sourceFile);    	non-compiled	[CE]  orphaned  case	46	None	replace
81	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  sourceFile);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  sourceFile);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  sourceFile);	  fileLevelJsDocBuilder.append(preserve,    sourceFile);    	non-compiled	[CE]  orphaned  case	46	None	replace
82	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(parse,  sourceFile);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(parse,  sourceFile);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(parse,  sourceFile);	  fileLevelJsDocBuilder.append(preserve,    sourceFile);    	non-compiled	[CE]  orphaned  case	46	None	replace
83	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
84	[BUG]  [BUGGY]  if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
85	[BUG]  [BUGGY]  if(preserve.length()  >=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
86	[BUG]  [BUGGY]  if(preserve!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve!=  null)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
87	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
88	[BUG]  [BUGGY]  if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()!=  0)  {  if(fileLevelJsDocBuilder  ==  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
89	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
90	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE),  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE),  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE),  preserve);	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
91	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
92	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
93	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractNullTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractNullTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractNullTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
94	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(LICENSE,  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(LICENSE,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(LICENSE,  preserve);	  fileLevelJsDocBuilder.append(preserve,    LICENSE);    	non-compiled	[CE]  orphaned  case	18	None	replace
95	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  buffer,  preserve);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
96	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  buffer);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  buffer);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  buffer);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
97	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  0);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  0);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  buffer,  0);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
98	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  offset);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  offset);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  buffer,  offset);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
99	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  charno);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  charno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  buffer,  charno);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
100	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(token,  preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(token,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(token,  preserve);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
101	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  false);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  preserve,  false);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
102	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  null);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  preserve,  null);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
103	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  0);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  0);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  preserve,  0);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
104	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  true);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  preserve,  true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  preserve,  true);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
105	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  buffer);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  buffer);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  buffer);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
106	[BUG]  [BUGGY]  fileLevelJsDocBuilder.remove(preserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.remove(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.remove(preserve);	  fileLevelJsDocBuilder.delete(preserve);    	non-compiled	[CE]  orphaned  case	8	None	replace
107	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  0);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  0);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  0);	  fileLevelJsDocBuilder.delete(preserve);    	non-compiled	[CE]  orphaned  case	8	None	replace
108	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  1);	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
109	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  'n',  '-');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  'n',  '-');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  'n',  '-');	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
110	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  'n'  +  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  'n'  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  'n'  +  1);	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
111	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
112	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
113	[BUG]  [BUGGY]  JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.values();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.values();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  jsdocBuilder  =  fileLevelJsDocBuilders.values();	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
114	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserve.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserve.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  preserve.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
115	[BUG]  [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
116	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  line);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  line);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  line);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
117	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  buffer);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  buffer);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  buffer);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
118	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  preserve  +  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  preserve  +  1);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
119	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  1);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
120	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPaint(p);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPaint(p);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPaint(p);	  fileLevelJsDocBuilder.setPaint(preserve);    	non-compiled	[CE]  orphaned  case	44	None	replace
121	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPaint(precedence);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPaint(precedence);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPaint(precedence);	  fileLevelJsDocBuilder.setPaint(preserve);    	non-compiled	[CE]  orphaned  case	44	None	replace
122	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPaint(true);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPaint(true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPaint(true);	  fileLevelJsDocBuilder.setPaint(preserve);    	non-compiled	[CE]  orphaned  case	44	None	replace
123	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setStroke(preserve);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setStroke(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setStroke(preserve);	  fileLevelJsDocBuilder.setPaint(preserve);    	non-compiled	[CE]  orphaned  case	44	None	replace
124	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
125	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
126	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.token;  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  token  =  fileLevelJsDocBuilder.token;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	token  =  fileLevelJsDocBuilder.token;	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
127	[BUG]  [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
128	[BUG]  [BUGGY]  if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
129	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [CE]  orphaned  case  [FE]                                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
130	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [CE]  orphaned  case  [FE]                                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
131	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#',  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#',  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('#',  preserve);	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  orphaned  case	43	None	replace
132	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "# ");  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "# ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "# ");	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  orphaned  case	43	None	replace
133	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno).append('#');  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(lineno).append('#');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(lineno).append('#');	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  orphaned  case	43	None	replace
134	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(UNREAD_TOKEN);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(UNREAD_TOKEN);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append(UNREAD_TOKEN);	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
135	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('-');  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('-');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('-');	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
136	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('_');  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('_');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('_');	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
137	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
138	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
139	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
140	[BUG]  [BUGGY]  token  =  fileLevelJsDocBuilder.toString();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  token  =  fileLevelJsDocBuilder.toString();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	token  =  fileLevelJsDocBuilder.toString();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
141	[BUG]  [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
142	[BUG]  [BUGGY]  if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
143	[BUG]  [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
144	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
145	[BUG]  [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
146	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
147	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserve.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
148	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  false);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  preserve,  false);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
149	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  null,  false);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  null,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  preserve,  null,  false);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
150	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  this);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preserve,  this);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  preserve,  this);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
151	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  preserve,  null);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  preserve,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  preserve,  null);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
152	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve.toString());  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve.toString());	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  orphaned  case	52	None	replace
153	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  ')'  expected	52	None	replace
154	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  orphaned  case	52	None	replace
155	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve.toString());  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve.toString());	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
156	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  orphaned  case	52	None	replace
157	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
158	[BUG]  [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
159	[BUG]  [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
160	[BUG]  [BUGGY]  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
161	[BUG]  [BUGGY]  preserveInfo  =  extractLeastTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLeastTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLeastTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
162	[BUG]  [BUGGY]  preserveInfo  =  extractLimitsBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLimitsBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLimitsBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
163	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
164	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
165	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
166	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
167	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.getType()  ==  Token.STRING)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.getType()  ==  Token.STRING)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.getType()  ==  Token.STRING)  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
168	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.getType()  ==  Token.NAME)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.getType()  ==  Token.NAME)  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.getType()  ==  Token.NAME)  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
169	[BUG]  [BUGGY]  if(!fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(!fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(!fileLevelJsDocBuilder.isEmpty())  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
170	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(precedence,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(precedence,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(precedence,  preserve);	  fileLevelJsDocBuilder.setPath(precedence);    	non-compiled	[CE]  orphaned  case	57	None	replace
171	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPath(precedence  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPath(precedence  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPath(precedence  +  1);	  fileLevelJsDocBuilder.setPath(precedence);    	non-compiled	[CE]  orphaned  case	57	None	replace
172	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N',  preserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N',  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('N',  preserve);	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
173	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N',  preserve).append('N');  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('N',  preserve).append('N');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('N',  preserve).append('N');	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
174	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(lineno).append('N');  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(lineno).append('N');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(lineno).append('N');	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
175	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildToBack(preserve,  preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildToBack(preserve,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildToBack(preserve,  preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
176	[BUG]  [BUGGY]  fileLevelJsDocBuilder.removeChild(preserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.removeChild(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.removeChild(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
177	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildToBack(reserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildToBack(reserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildToBack(reserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
178	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildToFront(preserve);  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildToFront(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildToFront(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
179	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildToBack(remainder);  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildToBack(remainder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildToBack(remainder);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
180	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  messageId,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  messageId,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  messageId,  preserve);	  fileLevelJsDocBuilder.append(preserve,    messageId);    	non-compiled	[CE]  orphaned  case	24	None	replace
181	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve  +  1);	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
182	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(precedence  +  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(precedence  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append(precedence  +  1);	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
183	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  prev  +  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  prev  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  prev  +  1);	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
184	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve  +  1);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(preserve  +  1);	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
185	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  true);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  true);	  fileLevelJsDocBuilder.append(preserve,    false);    	non-compiled	[CE]  orphaned  case	33	None	replace
186	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  false);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  false);	  fileLevelJsDocBuilder.append(preserve,    false);    	non-compiled	[CE]  orphaned  case	33	None	replace
187	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  false,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  false,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  false,  preserve);	  fileLevelJsDocBuilder.append(preserve,    false);    	non-compiled	[CE]  orphaned  case	33	None	replace
188	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length());  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(preserve.length());	  fileLevelJsDocBuilder.setPosition(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
189	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length()  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length()  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(preserve.length()  +  1);	  fileLevelJsDocBuilder.setPosition(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
190	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length()  *  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve.length()  *  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(preserve.length()  *  1);	  fileLevelJsDocBuilder.setPosition(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
191	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(remainder.length());  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(remainder.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(remainder.length());	  fileLevelJsDocBuilder.setPosition(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
192	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  preserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(preserve,  preserve);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
193	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(token);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(token);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
194	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(reserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(reserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(reserve);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
195	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(remainder);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(remainder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(remainder);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
196	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  true);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  true);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(preserve,  true);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
197	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ').append(preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('  ').append(preserve);	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  orphaned  case	19	None	replace
198	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('  ',  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('  ',  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('  ',  preserve);	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  orphaned  case	19	None	replace
199	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve).append('  ');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('  ',  preserve).append('  ');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('  ',  preserve).append('  ');	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  orphaned  case	19	None	replace
200	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  precedence);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  precedence);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  precedence);	  fileLevelJsDocBuilder.append(precedence,    preserve);    	non-compiled	[CE]  orphaned  case	11	None	replace
201	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preservation);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  preservation);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  preservation);	  fileLevelJsDocBuilder.append(precedence,    preserve);    	non-compiled	[CE]  orphaned  case	11	None	replace
202	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
203	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
204	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
205	[BUG]  [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLocalBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
206	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
207	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder  ==  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  whitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
208	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
209	[BUG]  [BUGGY]  fileLevelJsDocBuilder.add(preserve,  preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.add(preserve,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.add(preserve,  preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
210	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addLast(preserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addLast(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addLast(preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
211	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addValue(preserve);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addValue(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addValue(preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
212	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addElement(preserve);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addElement(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addElement(preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
213	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserve);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
214	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve,  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(preserve,  preserve);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
215	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
216	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(fileLevelJsDocBuilder);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
217	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '-');  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '-');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  '-');	  fileLevelJsDocBuilder.append(preserve,'');    	non-compiled	[CE]  orphaned  case	20	None	replace
218	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [CE]  ')'  expected  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
219	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
220	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve.toString());  continue  retry;  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve.toString());  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve.toString());  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
221	[BUG]  [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	For(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  ')'  expected	53	None	replace
222	[BUG]  [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
223	[BUG]  [BUGGY]  ||  preserveInfo.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  ||  preserveInfo.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	||  preserveInfo.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
224	[BUG]  [BUGGY]  ||  preserveInfo.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  ||  preserveInfo.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	||  preserveInfo.length()  <  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
225	[BUG]  [BUGGY]  Thread.currentThread().interrupt();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().interrupt();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().interrupt();	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
226	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	throw  new  IllegalArgumentException( " ");	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
227	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
228	[BUG]  [BUGGY]  Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder,  preserveInfo.token);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder,  preserveInfo.token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().setContextClassLoader(fileLevelJsDocBuilder,  preserveInfo.token);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
229	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().addToFront(fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().addToFront(fileLevelJsDocBuilder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().getContextClassLoader().addToFront(fileLevelJsDocBuilder);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
230	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length());  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setLength(preserve.length());	  fileLevelJsDocBuilder.setLength(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	31	None	replace
231	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length()  +  1);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length()  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setLength(preserve.length()  +  1);	  fileLevelJsDocBuilder.setLength(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	31	None	replace
232	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(remainder.length());  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setLength(remainder.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setLength(remainder.length());	  fileLevelJsDocBuilder.setLength(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	31	None	replace
233	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length()  *  1);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setLength(preserve.length()  *  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setLength(preserve.length()  *  1);	  fileLevelJsDocBuilder.setLength(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	31	None	replace
234	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( ": ");  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( ": ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( ": ");	  fileLevelJsDocBuilder.append(preserve).append(   "n   ");    	non-compiled	[CE]  orphaned  case	9	None	replace
235	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "   ");  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "   ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "   ");	  fileLevelJsDocBuilder.append(preserve).append(   "n   ");    	non-compiled	[CE]  orphaned  case	9	None	replace
236	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "- ");  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "- ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "- ");	  fileLevelJsDocBuilder.append(preserve).append(   "n   ");    	non-compiled	[CE]  orphaned  case	9	None	replace
237	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( ",   ");  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( ",   ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( ",   ");	  fileLevelJsDocBuilder.append(preserve).append(   "n   ");    	non-compiled	[CE]  orphaned  case	9	None	replace
238	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(lineno);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(lineno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(lineno);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
239	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(lineno,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(lineno,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(lineno,  preserve);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
240	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteLineno(preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteLineno(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteLineno(preserve);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
241	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  lineno);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  lineno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(preserve,  lineno);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
242	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(token);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(token);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
243	[BUG]  [BUGGY]  fileLevelJsDocBuilder  =  preserveInfo.next();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder  =  preserveInfo.next();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder  =  preserveInfo.next();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
244	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
245	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
246	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
247	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
248	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();  [CE]  orphaned  case  [FE]                                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  preserveInfo.next();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
249	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(preserve,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
250	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setEnd(preserve.length());  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setEnd(preserve.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setEnd(preserve.length());	  fileLevelJsDocBuilder.setLength(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	31	None	replace
251	[BUG]  [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
252	[BUG]  [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(fileLevelJsDocBuilder.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
253	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve, "  ' "  +  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve, "  ' "  +  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve, "  ' "  +  preserve);	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
254	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve, "  ' ");  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve, "  ' ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve, "  ' ");	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
255	[BUG]  [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
256	[BUG]  [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
257	[BUG]  [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	mockingRc  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
258	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().process(fileLevelJsDocBuilder,  preserveInfo.token);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().process(fileLevelJsDocBuilder,  preserveInfo.token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().getContextClassLoader().process(fileLevelJsDocBuilder,  preserveInfo.token);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
259	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo.toString());  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserveInfo.toString());	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  orphaned  case	52	None	replace
260	[BUG]  [BUGGY]  fileLevelJsDocBuilder.add(preserve,  false);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.add(preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.add(preserve,  false);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
261	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addPath(preserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addPath(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addPath(preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
262	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
263	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
264	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  prefix);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  prefix);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  prefix);	  fileLevelJsDocBuilder.append(precedence,    preserve);    	non-compiled	[CE]  orphaned  case	11	None	replace
265	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPaint(reserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPaint(reserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPaint(reserve);	  fileLevelJsDocBuilder.setPaint(preserve);    	non-compiled	[CE]  orphaned  case	44	None	replace
266	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('/');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('/');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('/');	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
267	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/')+  1;  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('/')+  1;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('/')+  1;	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  not  a  statement	50	None	replace
268	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  null);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  null);	  fileLevelJsDocBuilder.delete(preserve,    false);    	non-compiled	[CE]  orphaned  case	35	None	replace
269	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.getParent();	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
270	[BUG]  [BUGGY]  JosDocToken  next  =  fileLevelJsDocBuilder.next();  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JosDocToken  next  =  fileLevelJsDocBuilder.next();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JosDocToken  next  =  fileLevelJsDocBuilder.next();	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
271	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
272	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#'  +  preserve);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#'  +  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('#'  +  preserve);	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  orphaned  case	43	None	replace
273	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('#');  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('#');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('#');	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  orphaned  case	43	None	replace
274	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#')+  1;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('#')+  1;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('#')+  1;	  fileLevelJsDocBuilder.append(preserve).append('#');    	non-compiled	[CE]  not  a  statement	43	None	replace
275	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractLocalBlock(token));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
276	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractRcTextualBlock(token));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractRcTextualBlock(token));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractRcTextualBlock(token));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
277	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.NONE));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.NONE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractMultilineTextualBlock(token,  WhitespaceOption.NONE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
278	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  prefix);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  prefix);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  prefix);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
279	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
280	[BUG]  [BUGGY]  saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
281	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
282	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
283	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0)  {  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ';'  expected	51	None	replace
284	[BUG]  [BUGGY]  saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	saveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
285	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
286	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  message);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  message);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  message);	  fileLevelJsDocBuilder.append(preserve,    messageId);    	non-compiled	[CE]  orphaned  case	24	None	replace
287	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.length()  >  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.length()  >  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
288	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAME))  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
289	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(preserve.length()  >  0)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
290	[BUG]  [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
291	[BUG]  [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	for(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  preserveInfo.text  =  stream.getText();  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
292	[BUG]  [BUGGY]  preserve  =  fileLevelJsDocBuilders.values();  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserve  =  fileLevelJsDocBuilders.values();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserve  =  fileLevelJsDocBuilders.values();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
293	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(property);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(property);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(property);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
294	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendPath(precedence);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendPath(precedence);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendPath(precedence);	  fileLevelJsDocBuilder.appendPath(preserve);    	non-compiled	[CE]  orphaned  case	34	None	replace
295	[BUG]  [BUGGY]  fileLevelJsDocBuilder.removeChildToBack(preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.removeChildToBack(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.removeChildToBack(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
296	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildToBack(preserve,  false);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildToBack(preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildToBack(preserve,  false);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
299	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  charno);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  charno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(preserve,  charno);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
300	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  false);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(preserve,  false);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
303	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
304	[BUG]  [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
305	[BUG]  [BUGGY]  preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
306	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLargerTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLargerTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractLargerTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
307	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token,    WhitespaceOption.PRESERVE));    	non-compiled	[CE]  orphaned  case	45	None	replace
308	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(PREPARED_TOKEN).append(preserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(PREPARED_TOKEN).append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(PREPARED_TOKEN).append(preserve);	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
309	[BUG]  [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  stream  =  preserveInfo.fileLevelJsDocBuilders();  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  orphaned  case	53	None	replace
310	[BUG]  [BUGGY]  preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractFieldTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
311	[BUG]  [BUGGY]  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractWhitespaceTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
312	[BUG]  [BUGGY]  preserveInfo  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLocalFileTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
313	[BUG]  [BUGGY]  preserveInfo  =  extractLimitTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLimitTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLimitTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
314	[BUG]  [BUGGY]  fileLevelJsDocBuilder.reset();  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.reset();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.reset();	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
315	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(1);	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
316	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N')+  1;  [CE]  not  a  statement  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N')+  1;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('N')+  1;	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  not  a  statement	16	None	replace
317	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('N');  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('N');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('N');	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
318	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N'  +  1);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N'  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('N'  +  1);	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
319	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
320	[BUG]  [BUGGY]  JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders;  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  jsdocBuilder  =  preserveInfo.fileLevelJsDocBuilders;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	4	None	replace
321	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(''+  preserve);  [CE]  empty  character  literal  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append(''+  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append(''+  preserve);	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  empty  character  literal	19	None	replace
322	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('  ')+  1;  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('  ')+  1;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('  ')+  1;	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  not  a  statement	19	None	replace
323	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  false);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(preserve,  false);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(preserve,  false);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
324	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToString(property);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToString(property);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToString(property);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
325	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
326	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.length());  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.length());	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
327	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.toString());  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.toString());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(preserve,  fileLevelJsDocBuilder.toString());	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
328	[BUG]  [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLicenseTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
329	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  sourceFile);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  sourceFile);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  sourceFile);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
330	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  messageId);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  messageId);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  messageId);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
331	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  message);  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  message);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  message);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
332	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  null);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  buffer,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  buffer,  null);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
333	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  sourceFile,  null);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  sourceFile,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  sourceFile,  null);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()  ==  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Preconditions.checkState(preserve.length()!=  0);  for(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
336	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,  'n');  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,  'n');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,  'n');	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
337	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '0');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '0');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  '0');	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
338	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '/');  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '/');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  '/');	  fileLevelJsDocBuilder.append(preserve,'');    	non-compiled	[CE]  orphaned  case	20	None	replace
339	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(precedence,'');  [CE]  empty  character  literal  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(precedence,'');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(precedence,'');	  fileLevelJsDocBuilder.append(preserve,'');    	non-compiled	[CE]  empty  character  literal	20	None	replace
340	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('-').append(preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('-').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('-').append(preserve);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
341	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append('[').append(preserve);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append('[').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append('[').append(preserve);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
342	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
343	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder  [CE]  not  a  statement  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  not  a  statement	41	None	replace
344	[BUG]  [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder  [CE]  not  a  statement  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  ==  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  FileLevelJsDocBuilder	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  not  a  statement	41	None	replace
345	[BUG]  [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
346	[BUG]  [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	tryFor(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	6	None	replace
347	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.length()  >  0)  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
348	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasChildren())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasChildren())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasChildren())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	6	None	replace
349	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  unreadToken);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  unreadToken);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  unreadToken);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
350	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  endpoint);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  endpoint);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  endpoint);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
351	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  paramDescription);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('n',  paramDescription);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('n',  paramDescription);	  fileLevelJsDocBuilder.append(preserve).append('n',    preserve);    	non-compiled	[CE]  orphaned  case	14	None	replace
352	[BUG]  [BUGGY]  fileLevelJsDocBuilder.appendToBlock(preserve);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.appendToBlock(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.appendToBlock(preserve);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
353	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addToString(preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addToString(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addToString(preserve);	  fileLevelJsDocBuilder.appendToString(preserve);    	non-compiled	[CE]  orphaned  case	48	None	replace
354	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addToken(preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addToken(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addToken(preserve);	  fileLevelJsDocBuilder.add(preserve);    	non-compiled	[CE]  orphaned  case	13	None	replace
355	[BUG]  [BUGGY]  if(preserve.length()  <=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  <=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  <=  0)  {  if(fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
356	[BUG]  [BUGGY]  if(preserve.length()  >  0  ||  fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0  ||  fileLevelJsDocBuilder!=  null)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0  ||  fileLevelJsDocBuilder!=  null)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(fileLevelJsDocBuilder!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	2	None	replace
357	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '#');  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  '#');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  '#');	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
358	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  ':');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  ':');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  ':');	  fileLevelJsDocBuilder.append(preserve,    'n');    	non-compiled	[CE]  orphaned  case	27	None	replace
359	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  fileLevelJsDocBuilder  [CE]  not  a  statement  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  fileLevelJsDocBuilder  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  fileLevelJsDocBuilder	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  not  a  statement	41	None	replace
360	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
361	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  buffered  =  true;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  buffered  =  true;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  fileLevelJsDocBuilder  =  preserveInfo.next();  }  else  {  buffered  =  true;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    fileLevelJsDocBuilder    =    preserveInfo.next();    	non-compiled	[CE]  orphaned  case	41	None	replace
362	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  paramDescription,  null);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  paramDescription,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  paramDescription,  null);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
363	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  message,  null);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  message,  null);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  message,  null);	  fileLevelJsDocBuilder.append(preserve,    preserve,    null);    	non-compiled	[CE]  orphaned  case	25	None	replace
364	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
365	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  next  =  fileLevelJsDocBuilders.values();	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
366	[BUG]  [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  continue  retry;  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	JSDocToken  next  =  fileLevelJsDocBuilders.values();  preserveInfo.text  =  stream.getText();  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    preserveInfo.text    =    stream.getText();    continue    retry;    }    	non-compiled	[CE]  orphaned  case	56	None	replace
367	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "] ");  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "] ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "] ");	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
368	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "| ");  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "| ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "| ");	  fileLevelJsDocBuilder.append(preserve).append(PREPARED_TOKEN);    	non-compiled	[CE]  orphaned  case	30	None	replace
369	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
370	[BUG]  [BUGGY]  Pentru(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	54	None	replace
371	[BUG]  [BUGGY]  while(fileLevelJsDocBuilder.isEmpty())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilder.isEmpty())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilder.isEmpty())  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	54	None	replace
372	[BUG]  [BUGGY]  fileLevelJsDocBuilder.clear();  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.clear();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.clear();	  fileLevelJsDocBuilder.setLength(0);    	non-compiled	[CE]  orphaned  case	17	None	replace
373	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  offset);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(preserve,  offset);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(preserve,  offset);	  fileLevelJsDocBuilder.delete(preserve,    preserve);    	non-compiled	[CE]  orphaned  case	28	None	replace
374	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "; ");  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "; ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "; ");	  fileLevelJsDocBuilder.append(preserve).append(   "n   ");    	non-compiled	[CE]  orphaned  case	9	None	replace
375	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(',').append(preserve);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(',').append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(',').append(preserve);	  fileLevelJsDocBuilder.append('n').append(preserve);    	non-compiled	[CE]  orphaned  case	15	None	replace
376	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  FileLevelJsDocBuilder  fileLevelJs  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  FileLevelJsDocBuilder  fileLevelJs  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  FileLevelJsDocBuilder  fileLevelJs	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  	38	None	replace
377	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
378	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  buffered  =  true;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  buffered  =  true;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.toString();  }  else  {  buffered  =  true;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.toString();    	non-compiled	[CE]  orphaned  case	38	None	replace
379	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  sourceFile,  preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  sourceFile,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  sourceFile,  preserve);	  fileLevelJsDocBuilder.append(preserve,    sourceFile);    	non-compiled	[CE]  orphaned  case	46	None	replace
380	[BUG]  [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve,  preserve.length());  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.setPosition(preserve,  preserve.length());  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.setPosition(preserve,  preserve.length());	  fileLevelJsDocBuilder.setPosition(preserve.length()    -    1);    	non-compiled	[CE]  orphaned  case	32	None	replace
381	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo.token);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo.token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserveInfo.token);	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
382	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo);  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserveInfo);	  fileLevelJsDocBuilder.append('    ',    preserve);    	non-compiled	[CE]  orphaned  case	21	None	replace
383	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "  ' ");  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append( "  ' ");  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append( "  ' ");	  fileLevelJsDocBuilder.append(preserve).append('    ');    	non-compiled	[CE]  orphaned  case	19	None	replace
384	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  messageNode);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  messageNode);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  messageNode);	  fileLevelJsDocBuilder.append(preserve,    messageId);    	non-compiled	[CE]  orphaned  case	24	None	replace
385	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  retry	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  	53	None	replace
386	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  re  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  re  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  for(JSDocToken  stream  :  preserveInfo.fileLevelJsDocBuilders())  {  fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());  continue  re	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    continue    retry;    }    	non-compiled	[CE]  	53	None	replace
387	[BUG]  [BUGGY]  Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	51	None	replace
388	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
389	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
390	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasMore())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasMore())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasMore())  {  for(JSDocToken  stream  :  preserveInfo.values())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.values())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	51	None	replace
391	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractRelativeTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
392	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractNewTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractNewTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractNewTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
393	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  extractPreserveTextualBlock(token,  WhitespaceOption.PRESERVE));	  fileLevelJsDocBuilder.append(preserve,    extractMultilineTextualBlock(token));    	non-compiled	[CE]  orphaned  case	47	None	replace
394	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  if(!preserve.equals( "* "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  if(!preserve.equals( "* "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  if(!preserve.equals( "* "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
395	[BUG]  [BUGGY]  if(preserve.length()  >=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
396	[BUG]  [BUGGY]  if(preserve.length()!=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()!=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()!=  0)  {  if(!preserve.equals( " "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
397	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  if(!preserve.equals( "- "))  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  if(!preserve.equals( "- "))  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  if(!preserve.equals( "- "))  {  continue  retry;  }	  if(preserve.length()    >    0)    {    if(!preserve.equals(   "   "))    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	3	None	replace
398	[BUG]  [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  jsdocBuilder  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	7	None	replace
399	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  jsdocBuilder  :  preserveInfo.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	7	None	replace
400	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo,  preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo,  preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserveInfo,  preserve);	  fileLevelJsDocBuilder.append(precedence,    preserve);    	non-compiled	[CE]  orphaned  case	11	None	replace
401	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
402	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    continue    retry;    	non-compiled	[CE]  orphaned  case	40	None	replace
403	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N',  1);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve).append('N',  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve).append('N',  1);	  fileLevelJsDocBuilder.append(preserve).append('N');    	non-compiled	[CE]  orphaned  case	16	None	replace
404	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve,  offset);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve,  offset);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve,  offset);	  fileLevelJsDocBuilder.append(preserve,    buffer);    	non-compiled	[CE]  orphaned  case	23	None	replace
405	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo).append('/');  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserveInfo).append('/');  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserveInfo).append('/');	  fileLevelJsDocBuilder.append(preserve).append('/');    	non-compiled	[CE]  orphaned  case	50	None	replace
406	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve.length()  +  1);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve.length()  +  1);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve.length()  +  1);	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
407	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve.charAt(0));  [CE]  orphaned  case  [FE]                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve.charAt(0));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve.charAt(0));	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
408	[BUG]  [BUGGY]  fileLevelJsDocBuilder.append(preserve.substring(1));  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.append(preserve.substring(1));  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.append(preserve.substring(1));	  fileLevelJsDocBuilder.append(precedence    +    1);    	non-compiled	[CE]  orphaned  case	12	None	replace
409	[BUG]  [BUGGY]  While(fileLevelJsDocBuilder.hasNext())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  While(fileLevelJsDocBuilder.hasNext())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	While(fileLevelJsDocBuilder.hasNext())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
410	[BUG]  [BUGGY]  While(fileLevelJsDocBuilder.hasArg())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  While(fileLevelJsDocBuilder.hasArg())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	While(fileLevelJsDocBuilder.hasArg())  {  if(preserve.length()  >  0)  {  throw  new  IllegalArgumentException( " ");  }	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	1	None	replace
411	[BUG]  [BUGGY]  aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo.token);  [CE]  orphaned  case  [FE]                          ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo.token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo.token);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
412	[BUG]  [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Thread.currentThread().getContextClassLoader().reset();  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Thread.currentThread().getContextClassLoader().reset();	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
413	[BUG]  [BUGGY]  aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	aughtExceptionHandler(fileLevelJsDocBuilder,  preserveInfo);	  if(preserve.length()    >    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  orphaned  case	1	None	replace
414	[BUG]  [BUGGY]  fileLevelJsDocBuilder.delete(token);  [CE]  orphaned  case  [FE]            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.delete(token);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.delete(token);	  fileLevelJsDocBuilder.delete(preserve);    	non-compiled	[CE]  orphaned  case	8	None	replace
415	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildrenToFront(preserve);  [CE]  orphaned  case  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildrenToFront(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildrenToFront(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
416	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildAfter(preserve);  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildAfter(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildAfter(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
417	[BUG]  [BUGGY]  fileLevelJsDocBuilder.addChildBefore(preserve);  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.addChildBefore(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.addChildBefore(preserve);	  fileLevelJsDocBuilder.addChildToBack(preserve);    	non-compiled	[CE]  orphaned  case	5	None	replace
418	[BUG]  [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [CE]  orphaned  case  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve.length()  >  0)  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve.length()    >    0)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	37	None	replace
419	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder.append(preserve);	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    preserveInfo.fileLevelJsDocBuilders())    {    fileLevelJsDocBuilder.append(fileLevelJsDocBuilder.toString());    }    	non-compiled	[CE]  ';'  expected	52	None	replace
420	[BUG]  [BUGGY]  fileLevelJsDocBuilder.removeCharno(preserve);  [CE]  orphaned  case  [FE]              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.removeCharno(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.removeCharno(preserve);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
421	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(charno);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(charno);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(charno);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
422	[BUG]  [BUGGY]  fileLevelJsDocBuilder.deleteCharno(offset);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  fileLevelJsDocBuilder.deleteCharno(offset);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	fileLevelJsDocBuilder.deleteCharno(offset);	  fileLevelJsDocBuilder.deleteCharno(preserve);    	non-compiled	[CE]  orphaned  case	49	None	replace
423	[BUG]  [BUGGY]  Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  stream  :  fileLevelJsDocBuilders.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	55	None	replace
424	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasMoreElements())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
425	[BUG]  [BUGGY]  while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	while(fileLevelJsDocBuilders.hasNext())  {  for(JSDocToken  stream  :  preserveInfo.keySet())  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    stream    :    fileLevelJsDocBuilders.keySet())    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	55	None	replace
426	[BUG]  [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  }  [CE]  orphaned  case  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(fileLevelJsDocBuilder!=  null)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  if(preserve!=  null)  {  continue  retry;  }  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    if(preserve!=    null)    {    continue    retry;    }    	non-compiled	[CE]  orphaned  case	39	None	replace
427	[BUG]  [BUGGY]  preserveInfo  =  extractLongTextualBlock(token,  WhitespaceOption.PRESERVE);  [CE]  orphaned  case  [FE]                      ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  preserveInfo  =  extractLongTextualBlock(token,  WhitespaceOption.PRESERVE);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	preserveInfo  =  extractLongTextualBlock(token,  WhitespaceOption.PRESERVE);	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    	non-compiled	[CE]  orphaned  case	36	None	replace
428	[BUG]  [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [CE]  orphaned  case  [FE]                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder  fileLevelJsDocBuilder  =  fileLevelJsDocBuilder.append(preserve);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
429	[BUG]  [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserveInfo);  [CE]  orphaned  case  [FE]                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserveInfo);  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	FileLevelJsDocBuilder.append(fileLevelJsDocBuilder,  preserveInfo);	  FileLevelJsDocBuilder.append(preserve);    	non-compiled	[CE]  orphaned  case	10	None	replace
430	[BUG]  [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  Pentru(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	Pentru(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
431	[BUG]  [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  }	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
432	[BUG]  [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [CE]  ')'  expected  [FE]                                ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	tryFor(JSDocToken  jsdocBuilder  :  preserveInfo.fileLevelJsDocBuilders)  {  continue  retry;	  if(preserve.length()    >    0)    {    for(JSDocToken    jsdocBuilder    :    preserveInfo.fileLevelJsDocBuilders)    {    continue    retry;    }    	non-compiled	[CE]  ')'  expected	4	None	replace
433	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  continue  retry;  }  [CE]  orphaned  case  [FE]                                  ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  continue  retry;  }  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  continue  retry;  }	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  orphaned  case	42	None	replace
434	[BUG]  [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  FileLevelJsDocBuilder  fileLevelJs  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      case  LICENSE:  case  PRESERVE:  ExtractionInfo  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  String  preserve  =  preserveInfo.string;  if  (preserve.length()  >  0)  {  if  (fileLevelJsDocBuilder  !=  null)  {      [BUGGY]  if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  FileLevelJsDocBuilder  fileLevelJs  [BUGGY]      }  }  token  =  preserveInfo.token;  continue  retry;  case  ENUM:  token  =  next();  lineno  =  stream.getLineno();  charno  =  stream.getCharno();  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  parse  [RETURN_TYPE]  boolean  [VARIABLES]  Set  modifiesAnnotationKeywords  suppressionNames  Node  associatedNode  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  meaning  messageArg  messageId  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  lineno  Annotation  annotation  ExtractionInfo  authorInfo  blockInfo  descriptionInfo  fileOverviewInfo  meaningInfo  paramDescriptionInfo  preserveInfo  reasonInfo  referenceInfo  returnDescriptionInfo  templateInfo  versionInfo  ErrorReporter  errorReporter  boolean  isBracketedParam  matchingRc  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  List  extendedTypes  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.8944271909999159	356	356	4	replace	if(preserve.length()  >  0)  {  preserveInfo  =  extractMultilineTextualBlock(token,  WhitespaceOption.PRESERVE);  token  =  fileLevelJsDocBuilder.token;  }  else  {  FileLevelJsDocBuilder  fileLevelJs	  preserveInfo    =    extractMultilineTextualBlock(preserve,    WhitespaceOption.PRESERVE);    token    =    fileLevelJsDocBuilder.token;    	non-compiled	[CE]  	42	None	replace
