bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(state  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
2	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
3	[BUG]  [BUGGY]  if(next()  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
4	[BUG]  [BUGGY]  if(state  ==  State.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
5	[BUG]  [BUGGY]  if(token  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
6	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	44	None	replace
7	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	44	None	replace
8	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	44	None	replace
9	[BUG]  [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	44	None	replace
10	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
11	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
12	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
13	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
14	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
15	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
17	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
18	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
19	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
20	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
21	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
22	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
23	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
24	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
25	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
26	[BUG]  [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
27	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	1	None	replace
28	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	1	None	replace
29	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    JsDocToken.NEW_TOKEN)    {    	non-compiled	[CE]  	128	None	replace
30	[BUG]  [BUGGY]  if(ignoredToken  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    JsDocToken.NEW_TOKEN)    {    	non-compiled	[CE]  	128	None	replace
31	[BUG]  [BUGGY]  if(nextToken  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    JsDocToken.NEW_TOKEN)    {    	non-compiled	[CE]  	128	None	replace
32	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
33	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
34	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
35	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
36	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
37	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
38	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
39	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
40	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
41	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
42	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
43	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_PREFIX)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
44	[BUG]  [BUGGY]  if(token  ==  Option.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.EOL)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
45	[BUG]  [BUGGY]  if(token  ==  Option.EOL  ||  token  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.EOL  ||  token  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.EOL  ||  token  ==  Option.SINGLE_LINE)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
46	[BUG]  [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NO_UNREAD_TOKEN)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
47	[BUG]  [BUGGY]  if(unreadToken  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  Option.SINGLE_LINE)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
48	[BUG]  [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN  ||  token  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN  ||  token  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NO_UNREAD_TOKEN  ||  token  ==  Option.SINGLE_LINE)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
49	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  token  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  token  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  token  ==  Option.SINGLE_LINE)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
50	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
51	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
52	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
53	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
54	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
55	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
56	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
57	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
58	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.BLOCK)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.BLOCK)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	116	None	replace
59	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	116	None	replace
60	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	12	None	replace
61	[BUG]  [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	12	None	replace
62	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NONE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NONE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NONE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	12	None	replace
63	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
64	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
65	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
66	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
67	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
68	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
69	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
70	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
71	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
72	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
73	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
74	[BUG]  [BUGGY]  if(nextToken  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
75	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	69	None	replace
76	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
77	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
78	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
79	[BUG]  [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
80	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
81	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
82	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
83	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
84	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option!=  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
85	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  option!=  null)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  option!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  &&  option!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
86	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  token!=  null)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  token!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
87	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  ||  token!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
88	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.EOL  &&  option!=  null)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  WhitespaceOption.EOL  &&  option!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  WhitespaceOption.EOL  &&  option!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
89	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  &&  option!=  null)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  &&  option!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  &&  option!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
90	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  token!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  &&  token!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
91	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  options!=  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  &&  options!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  &&  options!=  null)  {	  if(option    ==    WhitespaceOption.EOL    &&    token!=    null)    {    	non-compiled	[CE]  	117	None	replace
92	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  WhitespaceOption.EOL)  {	  if(token!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	143	None	replace
93	[BUG]  [BUGGY]  if(token!=  null  ||  token!=  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  null  ||  token!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  null  ||  token!=  WhitespaceOption.EOL)  {	  if(token!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	143	None	replace
94	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.EOL)  {	  if(token!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	143	None	replace
95	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  JsDocToken.END)  {	  if(token!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	143	None	replace
96	[BUG]  [BUGGY]  if(option!=  null  &&  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  &&  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  &&  option!=  WhitespaceOption.EOL)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
97	[BUG]  [BUGGY]  if(option  ==  null  &&  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  &&  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  &&  option!=  WhitespaceOption.EOL)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
98	[BUG]  [BUGGY]  if(token  ==  null  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  option!=  WhitespaceOption.EOL)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
99	[BUG]  [BUGGY]  if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
100	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.SEARCHING_NEWLINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.SEARCHING_NEWLINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
101	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option!=  Option.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option!=  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
102	[BUG]  [BUGGY]  if(option  ==  Option.SINGLE_LINE  ||  option  ==  Option.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.SINGLE_LINE  ||  option  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.SINGLE_LINE  ||  option  ==  Option.EOL)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
103	[BUG]  [BUGGY]  if(option!=  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
104	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
105	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
106	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
107	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_BLOCK)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
108	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
109	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
110	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
111	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
112	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
113	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SEARCHING_NEWLINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SEARCHING_NEWLINE)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
114	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
115	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option!=  Option.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option!=  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
116	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
117	[BUG]  [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
118	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.NEW_LINE)  {	  if(option    ==    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	22	None	replace
119	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
120	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
121	[BUG]  [BUGGY]  if(ignoredToken  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
122	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
123	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
124	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
125	[BUG]  [BUGGY]  if(unreadToken!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
126	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_EOL)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
127	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_EOF)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
128	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
129	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option!=  Option.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option!=  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
130	[BUG]  [BUGGY]  if(option!=  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
131	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
132	[BUG]  [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
133	[BUG]  [BUGGY]  if(option  ==  Option.NON_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NON_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NON_UNREAD_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
134	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
135	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  State.SEARCHING_ANNOTATION)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
136	[BUG]  [BUGGY]  if(token  ==  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
137	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  whitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  whitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  whitespaceOption.SINGLE_LINE)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
138	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  State.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  State.SINGLE_LINE)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
139	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
140	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
141	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
142	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
143	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
144	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
145	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
146	[BUG]  [BUGGY]  if(option  ==  Preserve.NEW_LINE  ||  option  ==  Preserve.NEW_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Preserve.NEW_LINE  ||  option  ==  Preserve.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Preserve.NEW_LINE  ||  option  ==  Preserve.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
147	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
148	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
149	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
150	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
151	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
152	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
153	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_LAST)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
154	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
155	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
156	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
157	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
158	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
159	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
160	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	98	None	replace
161	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	98	None	replace
162	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	98	None	replace
163	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option!=  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	98	None	replace
164	[BUG]  [BUGGY]  if(token!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  null  &&  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
165	[BUG]  [BUGGY]  if(token!=  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
166	[BUG]  [BUGGY]  if(token!=  null  ||  token!=  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  null  ||  token!=  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  null  ||  token!=  State.SEARCHING_ANNOTATION)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
167	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
168	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
169	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
170	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
171	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
172	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
173	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
174	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
175	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
176	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
177	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
178	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option!=  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option!=  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option!=  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
179	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE  ||  option!=  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
180	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option!=  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option!=  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option!=  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
181	[BUG]  [BUGGY]  if(token  ==  Option.NEW_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEW_EOL)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
182	[BUG]  [BUGGY]  if(next()  ==  Option.NEW_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NEW_EOL)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
183	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_EOL)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
184	[BUG]  [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.SEARCHING_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_EOL  ||  option  ==  Option.SEARCHING_ANNOTATION)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
185	[BUG]  [BUGGY]  if(next()  ==  Option.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.EOL)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
186	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.EOL)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
187	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
188	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
189	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
190	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
191	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
192	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
193	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  Double.NEGATIVE_INFINITY)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
194	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NEGATIVE_INFINITY)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
195	[BUG]  [BUGGY]  if(unreadToken  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  Double.NEGATIVE_INFINITY)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
196	[BUG]  [BUGGY]  if(token  ==  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
197	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  NO_UNREAD_TOKEN)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
198	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	118	None	replace
199	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	118	None	replace
200	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
201	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
202	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
203	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
204	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
205	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
206	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
207	[BUG]  [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
208	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
209	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
210	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
211	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
212	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
213	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
214	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
215	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
216	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
217	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
218	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
219	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  if(!ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
220	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  if(ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
221	[BUG]  [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
222	[BUG]  [BUGGY]  Builder.append( "n ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  Builder.append( "n ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	Builder.append( "n ");	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
223	[BUG]  [BUGGY]  if(next()  ==  null)  {  if(!ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  null)  {  if(!ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  null)  {  if(!ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
224	[BUG]  [BUGGY]  if(next()  ==  null)  {  if(ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  null)  {  if(ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  null)  {  if(ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
225	[BUG]  [BUGGY]  if(token  ==  Double.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
226	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
227	[BUG]  [BUGGY]  if(token  ==  Double.NaN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NaN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NaN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
228	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token!=  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
229	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
230	[BUG]  [BUGGY]  if(token  ==  EOL  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  EOL  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  EOL  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
231	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_TOKEN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	130	None	replace
232	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option!=  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option!=  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option!=  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_TOKEN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	130	None	replace
233	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
234	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
235	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
236	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	121	None	replace
237	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	121	None	replace
238	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
239	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
240	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
241	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
242	[BUG]  [BUGGY]  if(unreadToken  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
243	[BUG]  [BUGGY]  if(ignoredToken  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
244	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
245	[BUG]  [BUGGY]  if(option  ==  Option.NO_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
246	[BUG]  [BUGGY]  if(option!=  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
247	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_NEWLINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
248	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
249	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
250	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  State.SEARCHING_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
251	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
252	[BUG]  [BUGGY]  if(node  ==  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(node  ==  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(node  ==  State.SEARCHING_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
253	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
254	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
255	[BUG]  [BUGGY]  if(unreadToken!=  JsDocToken.EOL)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken!=  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken!=  JsDocToken.EOL)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
256	[BUG]  [BUGGY]  if(ignored)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignored)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignored)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
257	[BUG]  [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent  ==  null  ||!ignored)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
258	[BUG]  [BUGGY]  while(!ignored)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  while(!ignored)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	while(!ignored)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
259	[BUG]  [BUGGY]  parent!=  null  &&!ignored)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent!=  null  &&!ignored)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent!=  null  &&!ignored)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
260	[BUG]  [BUGGY]  parent!=  null  &&!ignored)  {  builder.append( "null ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent!=  null  &&!ignored)  {  builder.append( "null ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent!=  null  &&!ignored)  {  builder.append( "null ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
261	[BUG]  [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "null ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "null ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent  ==  null  ||!ignored)  {  builder.append( "null ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
262	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
263	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Option.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
264	[BUG]  [BUGGY]  if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
265	[BUG]  [BUGGY]  if(option  ==  Option.SINGLE_LINE  ||  state  ==  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.SINGLE_LINE  ||  state  ==  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.SINGLE_LINE  ||  state  ==  State.SEARCHING_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
266	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
267	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
268	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
269	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
270	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
271	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
272	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
273	[BUG]  [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	state  =  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
274	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
275	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
276	[BUG]  [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  ||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	||  state  ==  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
277	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
278	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  State.SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
279	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
280	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
281	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
282	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
283	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.PRESERVE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
284	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  Preserve.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  Preserve.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  Preserve.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
285	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
286	[BUG]  [BUGGY]  if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
287	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
288	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
289	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
290	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
291	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
292	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
293	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EOL)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
294	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_EOL)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
295	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
296	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
297	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
298	[BUG]  [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
299	[BUG]  [BUGGY]  if(line  ==  null  ||  line  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(line  ==  null  ||  line  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(line  ==  null  ||  line  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
300	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.START_EOL)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
301	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_EOL)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
302	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_BLOCK)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
303	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_EOL)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
304	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_CATCH)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_CATCH)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_CATCH)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
305	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_OBJECT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.END_OBJECT)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
306	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
307	[BUG]  [BUGGY]  if(option!=  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
308	[BUG]  [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
309	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
310	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
311	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
312	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
313	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
314	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  State.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
315	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	34	None	replace
316	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	34	None	replace
317	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	34	None	replace
318	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
319	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
320	[BUG]  [BUGGY]  if(option  ==  null  &&  option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  &&  option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  &&  option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
321	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  &&  option!=  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
322	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
323	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
324	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
325	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
326	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
327	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_ELEMENT  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_ELEMENT  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_ELEMENT  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
328	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	64	None	replace
329	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_EOL  &&  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	64	None	replace
330	[BUG]  [BUGGY]  if(option  ==  Preserve.NEW_EOL  ||  option  ==  Preserve.NEW_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Preserve.NEW_EOL  ||  option  ==  Preserve.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Preserve.NEW_EOL  ||  option  ==  Preserve.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	64	None	replace
331	[BUG]  [BUGGY]  if(token  ==  Option.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	63	None	replace
332	[BUG]  [BUGGY]  if(next()  ==  Option.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	63	None	replace
333	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	63	None	replace
334	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	89	None	replace
335	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	89	None	replace
336	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.EOL)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
337	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.EOL)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
338	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
339	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.END)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
340	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FUNCTION)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FUNCTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.FUNCTION)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
341	[BUG]  [BUGGY]  jsdocBuilder.append( "EOL ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "EOL ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "EOL ");	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
342	[BUG]  [BUGGY]  jsdocBuilder.append( "EOL: ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "EOL: ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "EOL: ");	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
343	[BUG]  [BUGGY]  jsdocBuilder.append( "n ".getBytes());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "n ".getBytes());  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "n ".getBytes());	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
344	[BUG]  [BUGGY]  jsdocBuilder.append( "n ".getLineno());  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "n ".getLineno());  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "n ".getLineno());	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
345	[BUG]  [BUGGY]  jsdocBuilder.append( "t ");  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "t ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "t ");	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
346	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
347	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
348	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
349	[BUG]  [BUGGY]  if(option  ==  EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
350	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
351	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
352	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.POSITIVE_INFINITY)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	68	None	replace
353	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_EOL    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	84	None	replace
354	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_EOL    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	84	None	replace
355	[BUG]  [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_EOL    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	84	None	replace
356	[BUG]  [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	38	None	replace
357	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	38	None	replace
358	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	38	None	replace
359	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
360	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
361	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
362	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
363	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
364	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
365	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
366	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
367	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
368	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
369	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
370	[BUG]  [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
371	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
372	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
373	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.MIN_VALUE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
374	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
375	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
376	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
377	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
378	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
379	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
380	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
381	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
382	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
383	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
384	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_LINE)  {	  if(token    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	86	None	replace
385	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NEW_LINE)  {	  if(token    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	86	None	replace
386	[BUG]  [BUGGY]  if(next()  ==  Option.SEARCHING_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.SEARCHING_ANNOTATION)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
387	[BUG]  [BUGGY]  if(next()  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NO_UNREAD_TOKEN)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
388	[BUG]  [BUGGY]  if(next()  ==  Option.SINGLE_LINE  ||  next()  ==  Option.SEARCHING_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.SINGLE_LINE  ||  next()  ==  Option.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.SINGLE_LINE  ||  next()  ==  Option.SEARCHING_ANNOTATION)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
389	[BUG]  [BUGGY]  if(next()  ==  Option.SEARCHING_NEWLINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.SEARCHING_NEWLINE)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
390	[BUG]  [BUGGY]  if(next()  ==  Option.SEARCHING_ANNOTATION  ||  next()  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.SEARCHING_ANNOTATION  ||  next()  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.SEARCHING_ANNOTATION  ||  next()  ==  Option.SINGLE_LINE)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
391	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	139	None	replace
392	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
393	[BUG]  [BUGGY]  if(nextToken  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
394	[BUG]  [BUGGY]  Context.checkState(!ignoreStar)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  Context.checkState(!ignoreStar)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	Context.checkState(!ignoreStar)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
395	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	80	None	replace
396	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	80	None	replace
397	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	80	None	replace
398	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	80	None	replace
399	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
400	[BUG]  [BUGGY]  if(option  ==  Option.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
401	[BUG]  [BUGGY]  if(option!=  EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  EOL)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
402	[BUG]  [BUGGY]  if(token!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  null)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
403	[BUG]  [BUGGY]  if(option  ==  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
404	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
405	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
406	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
407	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
408	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
409	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
410	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
411	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
412	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
413	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
414	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
415	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
416	[BUG]  [BUGGY]  if(nextToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
417	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
418	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
419	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
420	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
421	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
422	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_COLLECTION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
423	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	32	None	replace
424	[BUG]  [BUGGY]  if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Preserve.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	32	None	replace
425	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
426	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
427	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
428	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  whitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  whitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  whitespaceOption.SINGLE_LINE)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	71	None	replace
429	[BUG]  [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
430	[BUG]  [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent  ==  null  ||!ignored)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
431	[BUG]  [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	parent  ==  null  ||!ignored)  {  builder.append( "n   ");  }  else  {  throw  new  IllegalArgumentException( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
432	[BUG]  [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
433	[BUG]  [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
434	[BUG]  [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  token!=  null)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
435	[BUG]  [BUGGY]  if(!ignoreStar  &&  token  ==  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  token  ==  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  token  ==  null)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
436	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
437	[BUG]  [BUGGY]  if(!unreadToken)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!unreadToken)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!unreadToken)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
438	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
439	[BUG]  [BUGGY]  if(option!=  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
440	[BUG]  [BUGGY]  if(option  ==  Double.MIN_VALUE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.MIN_VALUE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.MIN_VALUE  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
441	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	3	None	replace
442	[BUG]  [BUGGY]  if(option!=  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	3	None	replace
443	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
444	[BUG]  [BUGGY]  if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken!=  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
445	[BUG]  [BUGGY]  if(ignoredToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
446	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
447	[BUG]  [BUGGY]  if(notreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(notreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(notreadToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
448	[BUG]  [BUGGY]  if(nextToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
449	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  NO_UNREAD_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  NO_UNREAD_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
450	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  LEFT_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  LEFT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  LEFT_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
451	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  SINGLE_LINE)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
452	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.NO_UNREAD_TOKEN)  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.NO_UNREAD_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
453	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  ignoreStar)  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  ignoreStar)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  ignoreStar)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
454	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.UNREAD_TOKEN)  {  [CE]  [FE]                                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  Preserve.UNREAD_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
455	[BUG]  [BUGGY]  if(unreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
456	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
457	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
458	[BUG]  [BUGGY]  if(nextToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
459	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	99	None	replace
460	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	99	None	replace
461	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	99	None	replace
462	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
463	[BUG]  [BUGGY]  if(option!=  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NO_UNREAD_TOKEN  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
464	[BUG]  [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NO_UNREAD_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
465	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NO_UNREAD_TOKEN)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
466	[BUG]  [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NO_UNREAD_TOKEN  ||  option!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NO_UNREAD_TOKEN  ||  option!=  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
467	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	2	None	replace
468	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option!=  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	2	None	replace
469	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
470	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
471	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  State.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
472	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.EOL)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
473	[BUG]  [BUGGY]  if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
474	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
475	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
476	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
477	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
478	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
479	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
480	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
481	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
482	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
483	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
484	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
485	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
486	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
487	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
488	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SEARCHING_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.SEARCHING_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
489	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
490	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	6	None	replace
491	[BUG]  [BUGGY]  if(state  ==  State.NEW_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
492	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
493	[BUG]  [BUGGY]  if(state  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
494	[BUG]  [BUGGY]  if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
495	[BUG]  [BUGGY]  if(next()  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
496	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option!=    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	25	None	replace
497	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option!=    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	25	None	replace
498	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(token    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	91	None	replace
499	[BUG]  [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
500	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
501	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  &&  option  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
502	[BUG]  [BUGGY]  if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
503	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
504	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
505	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
506	[BUG]  [BUGGY]  if(option  ==  null  &&  option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  &&  option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  &&  option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
507	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
508	[BUG]  [BUGGY]  if(token  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
509	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
510	[BUG]  [BUGGY]  if(nextToken  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
511	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
512	[BUG]  [BUGGY]  if(next()  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
513	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.UNREAD_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.UNREAD_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
514	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
515	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
516	[BUG]  [BUGGY]  if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
517	[BUG]  [BUGGY]  if(token  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
518	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
519	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
520	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
521	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
522	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  stream.getSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  stream.getSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
523	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  this.fileLevelJsDocBuilder.getSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  this.fileLevelJsDocBuilder.getSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  this.fileLevelJsDocBuilder.getSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
524	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  jsdocBuilder.getSourceFile();  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  jsdocBuilder.getSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  jsdocBuilder.getSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
525	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.fileLevelJsDocBuilder.getSourceFile();  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  stream.fileLevelJsDocBuilder.getSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  stream.fileLevelJsDocBuilder.getSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
526	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.getSourceFileName();  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.getSourceFileName();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.getSourceFileName();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
527	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.readLine();  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.readLine();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.readLine();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
528	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
529	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
530	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
531	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  State.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  State.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  State.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
532	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
533	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
534	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
535	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
536	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
537	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
538	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
539	[BUG]  [BUGGY]  if(option  ==  Double.NEW  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEW  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEW  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
540	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
541	[BUG]  [BUGGY]  Builder  builder.append( "n ");  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  Builder  builder.append( "n ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	Builder  builder.append( "n ");	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  	111	None	replace
542	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
543	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
544	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
545	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.START_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
546	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_EOL)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
547	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.END_EOF)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.END_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.END_EOF)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
548	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.START_EOF)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.START_EOF)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
549	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
550	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
551	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
552	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_END)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
553	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
554	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.END)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
555	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  &&  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
556	[BUG]  [BUGGY]  if(option!=  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
557	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option!=  Option.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option!=  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
558	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.SINGLE_ANNOTATION)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
559	[BUG]  [BUGGY]  if(unreadToken  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(unreadToken  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(unreadToken  ==  JsDocToken.START_EOL)  {	  if(token    ==    JsDocToken.START_EOL)    {    	non-compiled	[CE]  	92	None	replace
560	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COOKIE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COOKIE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COOKIE)  {	  if(token    ==    JsDocToken.START_EOL)    {    	non-compiled	[CE]  	92	None	replace
561	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.START_EOL)    {    	non-compiled	[CE]  	92	None	replace
562	[BUG]  [BUGGY]  if(nextToken  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(nextToken  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(nextToken  ==  JsDocToken.START_EOL)  {	  if(token    ==    JsDocToken.START_EOL)    {    	non-compiled	[CE]  	92	None	replace
563	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
564	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_EOF)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.START_EOF)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
565	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOF)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
566	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
567	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOF)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOF)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOF)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
568	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
569	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
570	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
571	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
572	[BUG]  [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {	  if(token    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	81	None	replace
573	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	81	None	replace
574	[BUG]  [BUGGY]  if(token!=  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.NEW_TOKEN)  {	  if(token    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	81	None	replace
575	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	81	None	replace
576	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
577	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
578	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
579	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
580	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
581	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_BOOLEAN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
582	[BUG]  [BUGGY]  state  =  State.SEARCHING_NEWLINE;  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  state  =  State.SEARCHING_NEWLINE;  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	state  =  State.SEARCHING_NEWLINE;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	5	None	replace
583	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
584	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
585	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
586	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
587	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
588	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
589	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
590	[BUG]  [BUGGY]  if(option!=  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
591	[BUG]  [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option!=  Option.NEW_LINE)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option!=  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_LINE  ||  option!=  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
592	[BUG]  [BUGGY]  if(option  ==  Option.NEW_LINE  &&  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_LINE  &&  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_LINE  &&  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
593	[BUG]  [BUGGY]  if(token  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
594	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "noEOL ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "noEOL ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "noEOL ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
595	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "null ");  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
596	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEW_EOL)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
597	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_EOL)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
598	[BUG]  [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
599	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
600	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
601	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
602	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.EOL)    {    	non-compiled	[CE]  	58	None	replace
603	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
604	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
605	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_ANNOTATION)    {    	non-compiled	[CE]  	103	None	replace
606	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
607	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	137	None	replace
608	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
609	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
610	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
611	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
612	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
613	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
614	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  WhitespaceOption.START_TOKEN)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
615	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  WhitespaceOption.NEW_TOKEN)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
616	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  EOL)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
617	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  whitespaceOption)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  whitespaceOption)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  whitespaceOption)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
618	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
619	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
620	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
621	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_COLLECTION  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_COLLECTION  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_COLLECTION  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
622	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
623	[BUG]  [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
624	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_NEWLINE)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    else    {    state    =    State.SEARCHING_ANNOTATION;    }    	non-compiled	[CE]  	5	None	replace
625	[BUG]  [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	63	None	replace
626	[BUG]  [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_LINE  ||  option  ==  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	63	None	replace
627	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_LAST  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_LAST  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_LAST  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
628	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_EOL  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
629	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_LAST)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
630	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
631	[BUG]  [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  State  state  =  State.SEARCHING_ANNOTATION;  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	State  state  =  State.SEARCHING_ANNOTATION;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
632	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( "n ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
633	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
634	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
635	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LEADING  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LEADING  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LEADING  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
636	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
637	[BUG]  [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
638	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
639	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
640	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
641	[BUG]  [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
642	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
643	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
644	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine();  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  stream.readLine();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
645	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.buildSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.buildSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  fileLevelJsDocBuilder.buildSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
646	[BUG]  [BUGGY]  if(option  ==  Option.START_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.START_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.START_TOKEN  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
647	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.EOL)  {	  if(option    ==    Option.NEW_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	78	None	replace
648	[BUG]  [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  null  ||  token!=  WhitespaceOption.SINGLE_TOKEN)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
649	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_DO)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_DO)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_DO)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
650	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_ELEMENT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_ELEMENT)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
651	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
652	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	61	None	replace
653	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
654	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
655	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
656	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  WhitespaceOption.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
657	[BUG]  [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoreStar)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoreStar)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
658	[BUG]  [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
659	[BUG]  [BUGGY]  if(option  ==  Option.EOL  &&  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  &&  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  &&  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
660	[BUG]  [BUGGY]  if(option  ==  Option.NEW  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
661	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
662	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "r ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "r ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "r ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
663	[BUG]  [BUGGY]  if(next()!=  Option.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()!=  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()!=  Option.EOL)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
664	[BUG]  [BUGGY]  if(next()  ==  Option.SINGLE_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.SINGLE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.SINGLE_ANNOTATION)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
665	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NO_UNREAD_TOKEN)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
666	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NaN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NaN)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
667	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
668	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  options  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  options  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  options  ==  Double.NEGATIVE_INFINITY)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	45	None	replace
669	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_EOL)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
670	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
671	[BUG]  [BUGGY]  if(state  ==  State.NEXT_IS_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.NEXT_IS_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.NEXT_IS_ANNOTATION  ||  state  ==  State.SEARCHING_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
672	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_EOL)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
673	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
674	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_NaN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NEGATIVE_NaN)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
675	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
676	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	129	None	replace
677	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
678	[BUG]  [BUGGY]  if(ignoredToken!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
679	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	144	None	replace
680	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.DEFAULT)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	144	None	replace
681	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	144	None	replace
682	[BUG]  [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  EOL  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
683	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
684	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
685	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
686	[BUG]  [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_EOL  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	64	None	replace
687	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	2	None	replace
688	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	71	None	replace
689	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
690	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN  ||  token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
691	[BUG]  [BUGGY]  if(ignoredToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
692	[BUG]  [BUGGY]  if(!ignored)  {  builder.append( ".n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored)  {  builder.append( ".n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored)  {  builder.append( ".n ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
693	[BUG]  [BUGGY]  if(!ignored)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored)  {  builder.append( "n ");  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
694	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
695	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
696	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
697	[BUG]  [BUGGY]  if(ignoredToken  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
698	[BUG]  [BUGGY]  jsdocBuilder.append( "n ".equals(token));  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "n ".equals(token));  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "n ".equals(token));	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
699	[BUG]  [BUGGY]  jsdocBuilder.append( "EOLn ");  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "EOLn ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "EOLn ");	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
700	[BUG]  [BUGGY]  jsdocBuilder.append( "n ".getJSDocToken());  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "n ".getJSDocToken());  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "n ".getJSDocToken());	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
701	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
702	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option!=    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	25	None	replace
703	[BUG]  [BUGGY]  if(option!=  Option.NEW_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEW_TOKEN)  {	  if(option    ==    Option.NEW_TOKEN)    {    	non-compiled	[CE]  	39	None	replace
704	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
705	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
706	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
707	[BUG]  [BUGGY]  if(option!=  Option.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
708	[BUG]  [BUGGY]  if(option  ==  Preserve.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Preserve.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Preserve.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
709	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
710	[BUG]  [BUGGY]  if(option  ==  Double.NOT_IS_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NOT_IS_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NOT_IS_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
711	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_ANNOTATION)    {    	non-compiled	[CE]  	119	None	replace
712	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
713	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
714	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TAKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TAKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TAKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
715	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
716	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
717	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
718	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.DEFAULT_EOL)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
719	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
720	[BUG]  [BUGGY]  if(option  ==  Option.START  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.START  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.START  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
721	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.SINGLE_LINE  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.SINGLE_LINE    ||    option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	31	None	replace
722	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  Option.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
723	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
724	[BUG]  [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state!=  State.SEARCHING_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
725	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.PRIVATE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.PRIVATE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.PRIVATE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	12	None	replace
726	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
727	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  null)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  null)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
728	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	34	None	replace
729	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  WhitespaceOption.EOL)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
730	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
731	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.END_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.END_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  WhitespaceOption.END_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
732	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
733	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
734	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_ELEMENT)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_ELEMENT)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
735	[BUG]  [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
736	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
737	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
738	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NaN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NaN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	121	None	replace
739	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
740	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
741	[BUG]  [BUGGY]  if(!ignored  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
742	[BUG]  [BUGGY]  if(!ignored  &&  token!=  null)  {  builder.append( "n ");  }  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  token!=  null)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  token!=  null)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
743	[BUG]  [BUGGY]  if(!ignored  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
744	[BUG]  [BUGGY]  if(!ignored  &&  token  ==  null)  {  builder.append( "n ");  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  token  ==  null)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  token  ==  null)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
745	[BUG]  [BUGGY]  if(!ignored  &&  isEnabled)  {  builder.append( "n ");  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  isEnabled)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  isEnabled)  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
746	[BUG]  [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_TOKEN  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
747	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.START_EOL)  {	  if(token    ==    JsDocToken.START_EOL)    {    	non-compiled	[CE]  	92	None	replace
748	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.END)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.END)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
749	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_EOL    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	84	None	replace
750	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
751	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BOOLEAN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BOOLEAN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_BOOLEAN)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BOOLEAN)    {    	non-compiled	[CE]  	114	None	replace
752	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_PREFIX)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_PREFIX)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  &&  option  ==  WhitespaceOption.START_PREFIX)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
753	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_PREFIX  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_PREFIX  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_PREFIX  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_PREFIX)    {    	non-compiled	[CE]  	125	None	replace
754	[BUG]  [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  state!=  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
755	[BUG]  [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  builder.append( "n ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  token!=  null)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  token!=  null)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
756	[BUG]  [BUGGY]  if(ignoredToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(ignoredToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(ignoredToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
757	[BUG]  [BUGGY]  if(notreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(notreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(notreadToken!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
758	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EOL)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EOL)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
759	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_UNREAD_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_UNREAD_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
760	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMPTY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMPTY)  {	  if(token    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	91	None	replace
761	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
762	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option!=  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
763	[BUG]  [BUGGY]  if(option  ==  Double.NEW  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEW  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEW  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	3	None	replace
764	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
765	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  &&  option  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
766	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.DEFAULT_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
767	[BUG]  [BUGGY]  if(option  ==  Option.NO_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_EOL)  {	  if(option    ==    Option.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	75	None	replace
768	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NO_UNREAD_TOKEN)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
769	[BUG]  [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.EOL  ||  option  ==  Double.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.EOL  ||  option  ==  Double.NO_UNREAD_TOKEN)  {	  if(option    ==    Double.NO_UNREAD_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	67	None	replace
770	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	1	None	replace
771	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
772	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.EOL)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
773	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
774	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
775	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_ERROR  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_ERROR  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_ERROR  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
776	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
777	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
778	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
779	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
780	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
781	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
782	[BUG]  [BUGGY]  if(option  ==  Option.NO_EOL  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_EOL  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_EOL  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
783	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
784	[BUG]  [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
785	[BUG]  [BUGGY]  if(!ignoreStar  &&!state.isSEARCHING_ANNOTATION)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&!state.isSEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&!state.isSEARCHING_ANNOTATION)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
786	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
787	[BUG]  [BUGGY]  if(token!=  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Option.NO_UNREAD_TOKEN)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
788	[BUG]  [BUGGY]  if(token!=  Option.EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Option.EOL)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
789	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	69	None	replace
790	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.START)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.START)  {	  if(option    ==    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	22	None	replace
791	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
792	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_EOL)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
793	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_END)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NEXT_IS_END)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	131	None	replace
794	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
795	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
796	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option!=  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
797	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
798	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_LINE  &&  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.START_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	98	None	replace
799	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.EOC)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.EOC)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.EOC)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
800	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
801	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
802	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
803	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.FIELD_NAME)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
804	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.VALUE_EMBEDDED)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
805	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.START_OBJECT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.START_OBJECT)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
806	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
807	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
808	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.PRIVATE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.PRIVATE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.EOL  ||  option  ==  WhitespaceOption.PRIVATE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	13	None	replace
809	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_EOL)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
810	[BUG]  [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  NO_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
811	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
812	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token  ==  JsDocToken.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
813	[BUG]  [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  WhitespaceOption.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
814	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
815	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
816	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	21	None	replace
817	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_BLOCK)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_BLOCK)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
818	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOF  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_EOF)    {    	non-compiled	[CE]  	60	None	replace
819	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  null;  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  null;  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  null;	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
820	[BUG]  [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  fileLevelJsDocBuilder.getSourceFile();  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  fileLevelJsDocBuilder.getSourceFile();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	StaticSourceFile  sourceFile  =  stream.readLine()?  fileLevelJsDocBuilder.getSourceFile()  :  fileLevelJsDocBuilder.getSourceFile();	  StaticSourceFile    sourceFile    =    fileLevelJsDocBuilder.getSourceFile();    	non-compiled	[CE]  	7	None	replace
821	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EMBEDDED  ||  token  ==  JsDocToken.VALUE_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED)    {    	non-compiled	[CE]  	94	None	replace
822	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
823	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
824	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	35	None	replace
825	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
826	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
827	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_BLOCK  ||  option  ==  Double.NEGATIVE_LAST)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_BLOCK  ||  option  ==  Double.NEGATIVE_LAST)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_BLOCK  ||  option  ==  Double.NEGATIVE_LAST)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_LAST)    {    	non-compiled	[CE]  	106	None	replace
828	[BUG]  [BUGGY]  if(token!=  Option.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Option.SINGLE_LINE)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
829	[BUG]  [BUGGY]  if(token  ==  Option.SINGLE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.SINGLE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.SINGLE_TOKEN)  {	  if(token    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	27	None	replace
830	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_BLOCK  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
831	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_BLOCK)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_BLOCK)    {    	non-compiled	[CE]  	49	None	replace
832	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
833	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.NEGATIVE_ANNOTATION)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
834	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MAX_VALUE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MAX_VALUE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MAX_VALUE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
835	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	142	None	replace
836	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option!=  WhitespaceOption.EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	144	None	replace
837	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOC)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOC)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.EOC)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	144	None	replace
838	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	116	None	replace
839	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.NEW)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  WhitespaceOption.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
840	[BUG]  [BUGGY]  if(option  ==  Double.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEW)  {	  if(option!=    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	109	None	replace
841	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  EOL)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  EOL)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
842	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  EOL)  {  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_TOKEN  ||  option  ==  EOL)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
843	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  EOL)  {  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  EOL)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    EOL)    {    	non-compiled	[CE]  	43	None	replace
844	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
845	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
846	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
847	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
848	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  &&  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	33	None	replace
849	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NaN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_TOKEN  ||  option  ==  Double.NaN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	139	None	replace
850	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	139	None	replace
851	[BUG]  [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NONE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	139	None	replace
852	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	34	None	replace
853	[BUG]  [BUGGY]  jsdocBuilder.append( "r ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  jsdocBuilder.append( "r ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	jsdocBuilder.append( "r ");	  jsdocBuilder.append(   "n   ");    	non-compiled	[CE]  	8	None	replace
854	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NaN  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	140	None	replace
855	[BUG]  [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.VALUE_EOL  ||  token  ==  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token    ==    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	56	None	replace
856	[BUG]  [BUGGY]  if(!ignored  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {  builder.append( "n ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
857	[BUG]  [BUGGY]  mockBuilder.append( "n ");  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  mockBuilder.append( "n ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	mockBuilder.append( "n ");	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
858	[BUG]  [BUGGY]  if(!ignored  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignored  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignored  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  builder.append( "n ");  }	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
859	[BUG]  [BUGGY]  mockingJsDocBuilder.append( "n ");  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  mockingJsDocBuilder.append( "n ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	mockingJsDocBuilder.append( "n ");	  if(!ignored)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	112	None	replace
860	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	16	None	replace
861	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
862	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT_EOL  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	62	None	replace
863	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
864	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	40	None	replace
865	[BUG]  [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.NO_UNREAD_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
866	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
867	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  ||  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
868	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.SINGLE_LINE)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
869	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	55	None	replace
870	[BUG]  [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
871	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  Double.MIN_VALUE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN    ||    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	120	None	replace
872	[BUG]  [BUGGY]  if(next()!=  Option.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()!=  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()!=  Option.SINGLE_LINE)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
873	[BUG]  [BUGGY]  if(next()  ==  Option.UNREAD_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(next()  ==  Option.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(next()  ==  Option.UNREAD_TOKEN)  {	  if(next()    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	30	None	replace
874	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.UNREAD_TOKEN)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
875	[BUG]  [BUGGY]  if(option  ==  Option.EOL  &&  token!=  null)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  &&  token!=  null)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  &&  token!=  null)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
876	[BUG]  [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.PRIVATE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.EOL  ||  option  ==  Option.PRIVATE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.EOL  ||  option  ==  Option.PRIVATE)  {	  if(option    ==    Option.EOL)    {    	non-compiled	[CE]  	28	None	replace
877	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE  ||  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
878	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	83	None	replace
879	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	118	None	replace
880	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_TOKEN  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_TOKEN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	118	None	replace
881	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option!=  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option!=    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	24	None	replace
882	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.DEFAULT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.DEFAULT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.DEFAULT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
883	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.UNREAD_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Option.UNREAD_TOKEN)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	29	None	replace
884	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_LINE)    {    	non-compiled	[CE]  	15	None	replace
885	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
886	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.END_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
887	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.FIELD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.FIELD_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	123	None	replace
888	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL)  {	  if(option    ==    Option.NEXT_IS_ANNOTATION    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	132	None	replace
889	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append('n');  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	10	None	replace
890	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEW_EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_EOL)    {    	non-compiled	[CE]  	85	None	replace
891	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.NEXT_IS_ANNOTATION)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
892	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.NO_UNREAD_TOKEN)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
893	[BUG]  [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.PRIVATE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.PRIVATE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NO_UNREAD_TOKEN  ||  option  ==  Option.PRIVATE)  {	  if(option    ==    Option.NO_UNREAD_TOKEN    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	76	None	replace
894	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_SINGLE_LINE)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
895	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_SINGLE_LINE)    {    	non-compiled	[CE]  	51	None	replace
896	[BUG]  [BUGGY]  if(token!=  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Double.NEGATIVE_INFINITY)  {	  if(token    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	104	None	replace
897	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NEW_TOKEN)  {	  if(token    ==    JsDocToken.NEW_TOKEN)    {    	non-compiled	[CE]  	128	None	replace
898	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.DEFAULT)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	12	None	replace
899	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_TOKEN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	130	None	replace
900	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  &&  option  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  &&  option  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  &&  option  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NEGATIVE_TOKEN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	130	None	replace
901	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.DEFAULT_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.DEFAULT_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.DEFAULT_TOKEN)    {    	non-compiled	[CE]  	18	None	replace
902	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_EOL  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_EOL  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_EOL  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_EOL    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	84	None	replace
903	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_TOKEN  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
904	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.DEFAULT  ||  option  ==  WhitespaceOption.NEGATIVE_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	17	None	replace
905	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START)  {	  if(option    ==    WhitespaceOption.START)    {    	non-compiled	[CE]  	95	None	replace
906	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NaN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NaN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NaN)    {    	non-compiled	[CE]  	121	None	replace
907	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option!=    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	36	None	replace
908	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  aughtExceptionHandler.throwAsUnquotedException( " ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	aughtExceptionHandler.throwAsUnquotedException( " ");	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
909	[BUG]  [BUGGY]  aughtExceptionHandler.throwInternal();  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  aughtExceptionHandler.throwInternal();  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	aughtExceptionHandler.throwInternal();	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
910	[BUG]  [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  aughtExceptionHandler.throwAsIOException( " ");  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	aughtExceptionHandler.throwAsIOException( " ");	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
911	[BUG]  [BUGGY]  [Delete]  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  [Delete]  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	[Delete]	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
912	[BUG]  [BUGGY]  aughtExceptionHandler.handleEOL(token);  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  aughtExceptionHandler.handleEOL(token);  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	aughtExceptionHandler.handleEOL(token);	  if(!ignored)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	110	None	replace
913	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.SINGLE_LINE)  {	  if(token    ==    JsDocToken.SINGLE_LINE)    {    	non-compiled	[CE]  	93	None	replace
914	[BUG]  [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.DEFAULT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.EOL  ||  token  ==  JsDocToken.DEFAULT)  {	  if(token    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	100	None	replace
915	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	20	None	replace
916	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SEARCHING_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	41	None	replace
917	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.DEFAULT_EOL  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.DEFAULT_EOL  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.DEFAULT_EOL  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.DEFAULT_EOL    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	42	None	replace
918	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEXT_IS_ANNOTATION  ||  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	65	None	replace
919	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.LINE  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.LINE  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	96	None	replace
920	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.SINGLE_LINE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
921	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_CLOSE)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_CLOSE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.ON_CLOSE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
922	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.USE_EOL)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.USE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.USE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	122	None	replace
923	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.START_LINE)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.START_LINE)    {    	non-compiled	[CE]  	101	None	replace
924	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_OP)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_OP)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOF  ||  option  ==  WhitespaceOption.START_OP)  {	  if(option    ==    WhitespaceOption.START_EOF)    {    	non-compiled	[CE]  	73	None	replace
925	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.START_EOL)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
926	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.START_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  WhitespaceOption.START_EOL)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
927	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COLON)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COLON)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_EOL  ||  token  ==  JsDocToken.START_COLON)  {	  if(token    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	52	None	replace
928	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.START_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_TOKEN)    {    	non-compiled	[CE]  	97	None	replace
929	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.SINGLE_LINE)    {    	non-compiled	[CE]  	141	None	replace
930	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_TOKEN  &&  option  ==  WhitespaceOption.NEW_LINE)  {	  if(option    ==    WhitespaceOption.NEW_TOKEN    ||    option    ==    WhitespaceOption.NEW_LINE)    {    	non-compiled	[CE]  	136	None	replace
931	[BUG]  [BUGGY]  if(token!=  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  WhitespaceOption.EOL  ||  token  ==  WhitespaceOption.NEGATIVE)  {	  if(option!=    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	25	None	replace
932	[BUG]  [BUGGY]  if(option  ==  Option.UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.UNREAD_TOKEN  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
933	[BUG]  [BUGGY]  if(option  ==  Option.START_LINE  ||  option  ==  Option.NEW_LINE)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.START_LINE  ||  option  ==  Option.NEW_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.START_LINE  ||  option  ==  Option.NEW_LINE)  {	  if(option    ==    Option.NEW_LINE    ||    option    ==    Option.NEW_LINE)    {    	non-compiled	[CE]  	66	None	replace
934	[BUG]  [BUGGY]  if(!ignoreStar  &&!ignoreStar)  {  builder.append( "n ");  }  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&!ignoreStar)  {  builder.append( "n ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&!ignoreStar)  {  builder.append( "n ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    	non-compiled	[CE]  	133	None	replace
935	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW_LINE  &&  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	135	None	replace
936	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	107	None	replace
937	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
938	[BUG]  [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NaN  ||  option  ==  Double.POSITIVE_TOKEN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_TOKEN)    {    	non-compiled	[CE]  	88	None	replace
939	[BUG]  [BUGGY]  if(token!=  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	89	None	replace
940	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	89	None	replace
941	[BUG]  [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEXT_IS_ANNOTATION  ||  option  ==  Option.EOL  ||  option  ==  Option.SINGLE_LINE)  {	  if(option    ==    Option.EOL    ||    option    ==    Option.SINGLE_LINE)    {    	non-compiled	[CE]  	26	None	replace
942	[BUG]  [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  isEnabled(Feature.FLUSH_PASSED_TOKEN))  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
943	[BUG]  [BUGGY]  if(!ignoreStar  &&!state.SEARCHING_ANNOTATION)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&!state.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&!state.SEARCHING_ANNOTATION)  {	  if(!ignoreStar)    {    	non-compiled	[CE]  	145	None	replace
944	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	2	None	replace
945	[BUG]  [BUGGY]  if(token  ==  Double.NOT_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NOT_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NOT_UNREAD_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
946	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_TOKEN  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
947	[BUG]  [BUGGY]  if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(token    ==    Double.POSITIVE_INFINITY    ||    token    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	138	None	replace
948	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.START_TOKEN  ||  token  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.START_TOKEN    ||    option    ==    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	79	None	replace
949	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_NAME  ||  option  ==  WhitespaceOption.START_LEADING)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_NAME  ||  option  ==  WhitespaceOption.START_LEADING)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_NAME  ||  option  ==  WhitespaceOption.START_LEADING)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_LEADING)    {    	non-compiled	[CE]  	127	None	replace
950	[BUG]  [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  option!=  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  option!=  WhitespaceOption.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
951	[BUG]  [BUGGY]  if(option  ==  Double.NEW_TOKEN)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEW_TOKEN)  {	  if(option!=    WhitespaceOption.NEW_TOKEN)    {    	non-compiled	[CE]  	82	None	replace
952	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  WhitespaceOption.SINGLE_LINE)  {	  if(token    ==    null    ||    token!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	54	None	replace
953	[BUG]  [BUGGY]  if(option  ==  Double.NE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NE  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.NaN    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	37	None	replace
954	[BUG]  [BUGGY]  if(!ignoreStar  &&  option  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar  &&  option  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar  &&  option  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
955	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
956	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  &&  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
957	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  option!=  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    &&    option!=    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	70	None	replace
958	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EOL  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EOL  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EOL  ||  token!=  JsDocToken.VALUE_EMBEDDED_TOKEN)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
959	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
960	[BUG]  [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.VALUE_EMBEDDED_TOKEN  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.VALUE_EMBEDDED_TOKEN)    {    	non-compiled	[CE]  	57	None	replace
961	[BUG]  [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option!=  Double.POSITIVE_INFINITY  &&  option  ==  Double.POSITIVE_INFINITY)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	68	None	replace
962	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INT  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INT  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INT  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	68	None	replace
963	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_ELEMENT)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_ELEMENT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_ELEMENT)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_ELEMENT)    {    	non-compiled	[CE]  	113	None	replace
964	[BUG]  [BUGGY]  if(option  ==  null  ||  default:  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  default:  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  default:  option!=  WhitespaceOption.EOL)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
965	[BUG]  [BUGGY]  if(null!=  option  ||  option!=  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(null!=  option  ||  option!=  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(null!=  option  ||  option!=  WhitespaceOption.EOL)  {	  if(option!=    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	23	None	replace
966	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	143	None	replace
967	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.END  ||  option  ==  WhitespaceOption.START_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.END  ||  option  ==  WhitespaceOption.START_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.END  ||  option  ==  WhitespaceOption.START_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.END)    {    	non-compiled	[CE]  	53	None	replace
968	[BUG]  [BUGGY]  if(option  ==  Double.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.SINGLE_LINE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
969	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.SINGLE_LINE  ||  token  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    WhitespaceOption.SINGLE_LINE    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	72	None	replace
970	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
971	[BUG]  [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.FIELD_NAME)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.FIELD_NAME)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
972	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
973	[BUG]  [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.END)  {  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.END)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.EOL  &&  token!=  JsDocToken.END)  {	  if(token!=    JsDocToken.EOL)    {    	non-compiled	[CE]  	59	None	replace
974	[BUG]  [BUGGY]  if(token  ==  Double.NaN  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NaN  ||  token  ==  Double.NEGATIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NaN  ||  token  ==  Double.NEGATIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.NEGATIVE_INFINITY)    {    	non-compiled	[CE]  	46	None	replace
975	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_INFINITY  ||  option  ==  Double.NaN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
976	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	102	None	replace
977	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  ExtendedTypeInfo.NEXT_IS_ANNOTATION)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  ExtendedTypeInfo.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  ExtendedTypeInfo.NEXT_IS_ANNOTATION)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
978	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {	  if(state    ==    State.SEARCHING_ANNOTATION)    {    	non-compiled	[CE]  	4	None	replace
979	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	69	None	replace
980	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_COLLECTION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.START_COLLECTION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_COLLECTION)    {    	non-compiled	[CE]  	115	None	replace
981	[BUG]  [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.UNREAD_TOKEN)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Option.NEW_EOL  ||  option  ==  Option.UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Option.NEW_EOL  ||  option  ==  Option.UNREAD_TOKEN)  {	  if(option    ==    Option.NEW_EOL)    {    	non-compiled	[CE]  	74	None	replace
982	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
983	[BUG]  [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_TOKEN)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.NEGATIVE_INFINITY  ||  token  ==  Double.NEGATIVE_TOKEN)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_TOKEN)    {    	non-compiled	[CE]  	47	None	replace
984	[BUG]  [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_EOL)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Double.POSITIVE_INFINITY  ||  token  ==  Double.POSITIVE_EOL)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
985	[BUG]  [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NaN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NaN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.POSITIVE_INFINITY  ||  option  ==  Double.POSITIVE_EOL  ||  option  ==  Double.NaN)  {	  if(option    ==    Double.POSITIVE_INFINITY    ||    option    ==    Double.POSITIVE_EOL)    {    	non-compiled	[CE]  	87	None	replace
986	[BUG]  [BUGGY]  if(token  ==  WhitespaceOption.NEW)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  WhitespaceOption.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  WhitespaceOption.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
987	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.START)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.START)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.START)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
988	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START  ||  token  ==  JsDocToken.NEW)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
989	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.DEFAULT)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NEW  ||  option  ==  WhitespaceOption.DEFAULT)  {	  if(option    ==    WhitespaceOption.NEW)    {    	non-compiled	[CE]  	108	None	replace
990	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_ANNOTATION  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.NEXT_IS_ANNOTATION)    {    	non-compiled	[CE]  	126	None	replace
991	[BUG]  [BUGGY]  if(option  ==  Double.NE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NE  ||  option  ==  Double.POSITIVE_INFINITY)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NE  ||  option  ==  Double.POSITIVE_INFINITY)  {	  if(option    ==    Double.NaN    ||    option    ==    Double.POSITIVE_INFINITY)    {    	non-compiled	[CE]  	3	None	replace
992	[BUG]  [BUGGY]  if(token  ==  Option.NEW_IS_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  Option.NEW_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  Option.NEW_IS_ANNOTATION)  {	  if(option    ==    Option.NEW_IS_ANNOTATION)    {    	non-compiled	[CE]  	77	None	replace
993	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.NO_UNREAD_TOKEN  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.NEW_LINE    ||    option    ==    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	99	None	replace
994	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
995	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token  ==  JsDocToken.START_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
996	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
997	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.END_TOKEN)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.END_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  ||  token!=  JsDocToken.END_TOKEN)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
998	[BUG]  [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  JsDocToken.START_TOKEN  &&  token!=  JsDocToken.START_OBJECT)  {	  if(token!=    JsDocToken.START_TOKEN)    {    	non-compiled	[CE]  	124	None	replace
999	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                          ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar)  {  builder.append( "no ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
1000	[BUG]  [BUGGY]  if(!ignoreStar)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(!ignoreStar)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(!ignoreStar)  {  builder.append( "null ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(!ignoreStar)    {    builder.append(   "n   ");    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
1001	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.NEW_TOKEN)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
1002	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.SEARCHING_ANNOTATION)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	50	None	replace
1003	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_EOL)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.START_EOL  ||  option  ==  WhitespaceOption.END_EOL)  {	  if(option    ==    WhitespaceOption.START_EOL    ||    option    ==    WhitespaceOption.START_EOL)    {    	non-compiled	[CE]  	48	None	replace
1004	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  continue;  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
1005	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  return  null;  }  [CE]  [FE]                                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  return  null;  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION)  {  builder.append( "n ");  }  else  {  state  =  State.SEARCHING_ANNOTATION;  return  null;  }	  builder.append(   "n   ");    	non-compiled	[CE]  	11	None	replace
1006	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  state  ==  SEARCHING_NEWLINE)  {  throw  new  IllegalArgumentException( " ");  }	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
1007	[BUG]  [BUGGY]  State.SEARCHING_ANNOTATION  =  false;  [CE]  [FE]                                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  State.SEARCHING_ANNOTATION  =  false;  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	State.SEARCHING_ANNOTATION  =  false;	  if(state    ==    State.SEARCHING_ANNOTATION)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	9	None	replace
1008	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [CE]  [FE]            ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.NEXT_IS_ANNOTATION)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
1009	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  [CE]  [FE]              ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_BLOCK)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
1010	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.PRESERVE)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
1011	[BUG]  [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_EOL)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option  ==  WhitespaceOption.SINGLE_EOL)  {	  if(option    ==    null    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	19	None	replace
1012	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.EOL_BLOCK)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.EOL_BLOCK)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.EOL_BLOCK)  {	  if(option    ==    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	22	None	replace
1013	[BUG]  [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.DEFAULT)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  null  ||  option!=  WhitespaceOption.DEFAULT)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  null  ||  option!=  WhitespaceOption.DEFAULT)  {	  if(option    ==    null    ||    option!=    WhitespaceOption.EOL)    {    	non-compiled	[CE]  	22	None	replace
1014	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_TOKEN  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
1015	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_EOL)  {  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE_ANNOTATION  ||  option  ==  Double.NEGATIVE_EOL)  {	  if(option    ==    Double.NEGATIVE_INFINITY    ||    option    ==    Double.NEGATIVE_EOL)    {    	non-compiled	[CE]  	105	None	replace
1016	[BUG]  [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(state  ==  State.SEARCHING_ANNOTATION  ||  option  ==  Double.POSITIVE_INFINITY  ||  option  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	71	None	replace
1017	[BUG]  [BUGGY]  if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token!=  Double.POSITIVE_INFINITY  ||  token  ==  WhitespaceOption.SINGLE_LINE)  {	  if(option!=    Double.POSITIVE_INFINITY    ||    option    ==    WhitespaceOption.SINGLE_LINE)    {    	non-compiled	[CE]  	71	None	replace
1018	[BUG]  [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.START_OBJECT  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
1019	[BUG]  [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [CE]  [FE]                  ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(token  ==  JsDocToken.FIELD_NAME  ||  token  ==  JsDocToken.NO_UNREAD_TOKEN)  {	  if(token    ==    JsDocToken.NO_UNREAD_TOKEN)    {    	non-compiled	[CE]  	90	None	replace
1020	[BUG]  [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  WhitespaceOption.SINGLE_LINE  ||  option  ==  WhitespaceOption.NEGATIVE)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
1021	[BUG]  [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [CE]  [FE]                      ComparisonFailure      [CONTEXT]      builder.append('  ');  }  builder.append('*');  }  token  =  next();  continue;  case  EOL:      [BUGGY]  if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {  [BUGGY]      builder.append(     "\n     ");  }  ignoreStar  =  true;  token  =  next();  continue;  default:  ignoreStar  =  false;  state  =  State.SEARCHING_ANNOTATION;  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.2672612419124244	1377	1377	4	replace	if(option  ==  Double.NEGATIVE  ||  option  ==  WhitespaceOption.EOL)  {	  if(option    ==    WhitespaceOption.EOL    ||    option    ==    WhitespaceOption.NEGATIVE)    {    	non-compiled	[CE]  	14	None	replace
