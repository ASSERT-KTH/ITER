bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	8	None	replace
2	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	8	None	replace
3	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineNumber);	  jsdocBuilder.markText(multilineText,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	2	None	replace
4	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  0);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  0);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  0);	  jsdocBuilder.markText(multilineText,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  errorReporter);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  errorReporter);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  errorReporter);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  lineno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  1);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  1);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    startCharno);    	non-compiled	[CE]  	1	None	replace
10	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  int  endLineno  =  stream.getLineno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	6	None	replace
11	[BUG]  [BUGGY]  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();	      	non-compiled	[CE]  	6	None	replace
12	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  Integer  endLineno  =  stream.getLineno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	6	None	replace
13	[BUG]  [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	Integer  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();	      	non-compiled	[CE]  	6	None	replace
14	[BUG]  [BUGGY]  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  charno  =  stream.getLineno();  endCharno  =  stream.getCharno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	charno  =  stream.getLineno();  endCharno  =  stream.getCharno();	      	non-compiled	[CE]  	6	None	replace
15	[BUG]  [BUGGY]  endLineno  =  stream.getLineno();  [CE]  [FE]                            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  endLineno  =  stream.getLineno();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	endLineno  =  stream.getLineno();	      	non-compiled	[CE]  	6	None	replace
16	[BUG]  [BUGGY]  String  token  =  builder.toString();  [CE]  [FE]                              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  String  token  =  builder.toString();  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	String  token  =  builder.toString();	      	non-compiled	[CE]  	6	None	replace
17	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
18	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
19	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
20	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  errorReporter,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  errorReporter,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  errorReporter,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
21	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  lineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
22	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
23	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
24	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  unreadToken);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  unreadToken);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
25	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  ignoreStar);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  ignoreStar);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
26	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  ignoreStar);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  ignoreStar);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
27	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  unreadToken);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  unreadToken);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
28	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  lineno,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno);  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  lineno,  endCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    lineno,    endCharno,    endLineno);    	non-compiled	[CE]  	11	None	replace
32	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	3	None	replace
33	[BUG]  [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  JsDocBuilder.markText(multilineText,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	JsDocBuilder.markText(multilineText,  endLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	3	None	replace
34	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  lineno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno,  endLineno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(buffer,  startLineno,  endCharno,  endLineno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(buffer,  startLineno,  endCharno,  endLineno);	  jsdocBuilder.markText(multilineText,    startLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	3	None	replace
36	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  NO_UNREAD_TOKEN,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	7	None	replace
37	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  unreadToken);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  unreadToken);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	7	None	replace
38	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
39	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno);	  jsdocBuilder.markText(multilineText,    lineno,    endLineno,    endCharno);    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	2	None	replace
41	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  charno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  charno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  charno);	  jsdocBuilder.markText(multilineText,    endLineno,    startCharno,    endCharno);    	non-compiled	[CE]  	2	None	replace
42	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno  +  1);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno  +  1);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno  +  1);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	13	None	replace
43	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getCharno();  }	      	non-compiled	[CE]  	6	None	replace
44	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  <  0)  {  endLineno  =  stream.getEndLineno();  }	      	non-compiled	[CE]  	6	None	replace
45	[BUG]  [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	int  endLineno  =  stream.getLineno();  if(endLineno  >=  endLineno)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	6	None	replace
46	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    startCharno);    	non-compiled	[CE]  	1	None	replace
47	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  ignoreStar);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  ignoreStar);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
48	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startLineno,  endCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  lineno,  startLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  lineno,  startLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
49	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);  [CE]  [FE]                ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  endLineno,  startCharno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
50	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endLineno,  endCharno);  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  null,  startLineno,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  null,  startLineno,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
51	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startCharno);  [CE]  [FE]        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  startCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    startCharno);    	non-compiled	[CE]  	1	None	replace
52	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  multilineText,  endLineno,  endCharno);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  null,  multilineText,  endLineno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  multilineText,  endLineno,  endCharno);	  jsdocBuilder.markText(token,    null,    startLineno,    endLineno,    endCharno);    	non-compiled	[CE]  	10	None	replace
53	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endCharno);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endCharno);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endCharno);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    endLineno);    	non-compiled	[CE]  	13	None	replace
54	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar);  [CE]  [FE]          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
55	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  ignoreStar);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  ignoreStar);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  ignoreStar);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    ignoreStar);    	non-compiled	[CE]  	12	None	replace
56	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [CE]  [FE]                    ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(token);  }	      	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [CE]  [FE]                      ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }	      	non-compiled	[CE]  	6	None	replace
59	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  [FE]                        ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  	6	None	replace
60	[BUG]  [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [CE]  [FE]                          ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	if(endLineno  <  0)  {  endLineno  =  stream.getLineno();  endCharno  =  stream.getCharno();  }  else  {  return  new  ExtractionInfo(lineno,  endLineno);  }	      	non-compiled	[CE]  	6	None	replace
61	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken);  [CE]  [FE]            ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  endLineno,  endCharno,  unreadToken);	  jsdocBuilder.markText(token,    startLineno,    endCharno,    endLineno,    endCharno);    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart);  [CE]  [FE]              ComparisonFailure    [CONTEXT]    String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {    [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart);  [BUGGY]    endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  this.ignoreStart);	  jsdocBuilder.markText(multilineText,    endLineno,    endCharno,    lineno);    	non-compiled	[CE]  	4	None	replace
