bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startCharno);  [CE]  [FE]    ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  startCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
2	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  startCharno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
3	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);  [CE]  [FE]        ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endCharno,  endLineno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
4	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno);  [CE]  [FE]          ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  lineno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
5	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endLineno,  endCharno);  [CE]  [FE]            ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endLineno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endLineno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
6	[BUG]  [BUGGY]    [CE]  [FE]              ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]    [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	  	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
7	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno);  [CE]  [FE]    ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endLineno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
8	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endLineno,  endCharno);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  startLineno,  endLineno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  startLineno,  endLineno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
9	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  [CE]  [FE]        ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  startLineno,  endCharno,  endLineno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
10	[BUG]  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);  [CE]  [FE]          ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(token,  null,  startLineno,  endLineno,  endCharno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
11	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno);  [CE]  [FE]    ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  lineno,  endCharno,  endLineno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
12	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [CE]  [FE]      ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  ignoreStar);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
13	[BUG]  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno);  [CE]  [FE]        ComparisonFailure  [CONTEXT]  String  multilineText  =  builder.toString();  if  (option  !=  WhitespaceOption.PRESERVE)  {  multilineText  =  multilineText.trim();  }  int  endLineno  =  stream.getLineno();  int  endCharno  =  stream.getCharno();  if  (multilineText.length()  >  0)  {  [BUGGY]  jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno);  [BUGGY]  endLineno,  endCharno);  }  return  new  ExtractionInfo(multilineText,  token);  }  [CLASS]  JsDocInfoParser  ErrorReporterParser  State  ExtractionInfo  ExtendedTypeInfo  WhitespaceOption  [METHOD]  extractMultilineTextualBlock  [RETURN_TYPE]  JsDocInfoParser$ExtractionInfo  JsDocToken  token  WhitespaceOption  option  [VARIABLES]  Set  modifies  modifiesAnnotationKeywords  suppressionNames  suppressions  StringBuilder  builder  Node  associatedNode  n  templateNode  typeNode  JsDocTokenStream  stream  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  annotationName  author  description  fileOverview  line  meaning  messageArg  messageId  multilineText  name  paramDescription  preserve  reason  reference  returnDescription  string  templateTypeName  typeString  version  JSDocInfo  fileOverviewJSDocInfo  int  charno  endCharno  endLineno  lineno  startCharno  startLineno  ErrorReporter  errorReporter  boolean  ignoreStar  JsDocToken  NO_UNREAD_TOKEN  token  unreadToken  WhitespaceOption  PRESERVE  SINGLE_LINE  TRIM  option  ErrorReporterParser  parser  State  NEXT_IS_ANNOTATION  SEARCHING_ANNOTATION  SEARCHING_NEWLINE  state  JSTypeExpression  type  JSDocInfoBuilder  jsdocBuilder  StaticSourceFile  sourceFile  Map  annotationNames  	projects/Closure32/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java	0.30151134457776363	1407	1408	4	replace	jsdocBuilder.markText(multilineText,  endLineno,  endCharno,  endLineno);	jsdocBuilder.markText(multilineText,  startLineno,  startCharno,    endLineno,  endCharno);  	non-compiled	[CE]  	37	None	replace
